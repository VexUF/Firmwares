
Firmware-Horus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800def8  0800def8  0000eef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3cc  0800e3cc  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3cc  0800e3cc  0000f3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3d4  0800e3d4  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3d4  0800e3d4  0000f3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3d8  0800e3d8  0000f3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e3dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  200001d4  0800e5b0  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001700  20000788  0800e5b0  00010788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e057  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b5c  00000000  00000000  0002e25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  00032db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001534  00000000  00000000  00034918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000075b4  00000000  00000000  00035e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024d42  00000000  00000000  0003d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac6af  00000000  00000000  00062142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e7f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086dc  00000000  00000000  0010e834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00116f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dedc 	.word	0x0800dedc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800dedc 	.word	0x0800dedc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001008:	4a37      	ldr	r2, [pc, #220]	@ (80010e8 <MX_ADC1_Init+0xf4>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001022:	2201      	movs	r2, #1
 8001024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001034:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001036:	4a2d      	ldr	r2, [pc, #180]	@ (80010ec <MX_ADC1_Init+0xf8>)
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001042:	2204      	movs	r2, #4
 8001044:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	4823      	ldr	r0, [pc, #140]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001056:	f001 fb65 	bl	8002724 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fbea 	bl	8001838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001064:	230f      	movs	r3, #15
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001076:	f001 fdc1 	bl	8002bfc <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001080:	f000 fbda 	bl	8001838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001084:	2308      	movs	r3, #8
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 8001092:	f001 fdb3 	bl	8002bfc <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800109c:	f000 fbcc 	bl	8001838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010a0:	2309      	movs	r3, #9
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a4:	2303      	movs	r3, #3
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 80010ae:	f001 fda5 	bl	8002bfc <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010b8:	f000 fbbe 	bl	8001838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010bc:	2310      	movs	r3, #16
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010c4:	2307      	movs	r3, #7
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_ADC1_Init+0xf0>)
 80010ce:	f001 fd95 	bl	8002bfc <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80010d8:	f000 fbae 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f8 	.word	0x200001f8
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a40      	ldr	r2, [pc, #256]	@ (8001210 <HAL_ADC_MspInit+0x120>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d179      	bne.n	8001206 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b3f      	ldr	r3, [pc, #252]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a3e      	ldr	r2, [pc, #248]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a37      	ldr	r2, [pc, #220]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a30      	ldr	r2, [pc, #192]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <HAL_ADC_MspInit+0x124>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Av1_Pin;
 8001166:	2320      	movs	r3, #32
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Av1_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4827      	ldr	r0, [pc, #156]	@ (8001218 <HAL_ADC_MspInit+0x128>)
 800117a:	f002 fd09 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Av2_Pin|Av3_Pin;
 800117e:	2303      	movs	r3, #3
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4822      	ldr	r0, [pc, #136]	@ (800121c <HAL_ADC_MspInit+0x12c>)
 8001192:	f002 fcfd 	bl	8003b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 8001198:	4a22      	ldr	r2, [pc, #136]	@ (8001224 <HAL_ADC_MspInit+0x134>)
 800119a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011da:	4811      	ldr	r0, [pc, #68]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011dc:	f002 f8ca 	bl	8003374 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80011e6:	f000 fb27 	bl	8001838 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80011f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <HAL_ADC_MspInit+0x130>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2012      	movs	r0, #18
 80011fc:	f002 f883 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001200:	2012      	movs	r0, #18
 8001202:	f002 f89c 	bl	800333e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40012000 	.word	0x40012000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020800 	.word	0x40020800
 800121c:	40020400 	.word	0x40020400
 8001220:	20000240 	.word	0x20000240
 8001224:	40026410 	.word	0x40026410

08001228 <get_cpu_temp>:
  }
}

/* USER CODE BEGIN 1 */

float get_cpu_temp(uint16_t cpu_temp_value) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	float temp_sense = CPU_TEMP_VSENSE * cpu_temp_value;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f97d 	bl	8000534 <__aeabi_i2d>
 800123a:	a31c      	add	r3, pc, #112	@ (adr r3, 80012ac <get_cpu_temp+0x84>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9e2 	bl	8000608 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fcd4 	bl	8000bf8 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
	return (((V25 - temp_sense) / CPU_TEMP_AVG_SLOPE) + 25);
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f7ff f97f 	bl	8000558 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	a115      	add	r1, pc, #84	@ (adr r1, 80012b4 <get_cpu_temp+0x8c>)
 8001260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001264:	f7ff f818 	bl	8000298 <__aeabi_dsub>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	a312      	add	r3, pc, #72	@ (adr r3, 80012bc <get_cpu_temp+0x94>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff faf1 	bl	800085c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <get_cpu_temp+0x80>)
 8001288:	f7ff f808 	bl	800029c <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fcb0 	bl	8000bf8 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	ee07 3a90 	vmov	s15, r3
}
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40390000 	.word	0x40390000
 80012ac:	66666666 	.word	0x66666666
 80012b0:	3f4a6666 	.word	0x3f4a6666
 80012b4:	851eb852 	.word	0x851eb852
 80012b8:	3fe851eb 	.word	0x3fe851eb
 80012bc:	47ae147b 	.word	0x47ae147b
 80012c0:	3f647ae1 	.word	0x3f647ae1

080012c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <MX_DMA_Init+0x5c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <MX_DMA_Init+0x5c>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_DMA_Init+0x5c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2038      	movs	r0, #56	@ 0x38
 80012ec:	f002 f80b 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f0:	2038      	movs	r0, #56	@ 0x38
 80012f2:	f002 f824 	bl	800333e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	203b      	movs	r0, #59	@ 0x3b
 80012fc:	f002 f803 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001300:	203b      	movs	r0, #59	@ 0x3b
 8001302:	f002 f81c 	bl	800333e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2045      	movs	r0, #69	@ 0x45
 800130c:	f001 fffb 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001310:	2045      	movs	r0, #69	@ 0x45
 8001312:	f002 f814 	bl	800333e <HAL_NVIC_EnableIRQ>

}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a66      	ldr	r2, [pc, #408]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b64      	ldr	r3, [pc, #400]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b60      	ldr	r3, [pc, #384]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a5f      	ldr	r2, [pc, #380]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b5d      	ldr	r3, [pc, #372]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b59      	ldr	r3, [pc, #356]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a58      	ldr	r2, [pc, #352]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b52      	ldr	r3, [pc, #328]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a51      	ldr	r2, [pc, #324]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b4f      	ldr	r3, [pc, #316]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b4b      	ldr	r3, [pc, #300]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a4a      	ldr	r2, [pc, #296]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <MX_GPIO_Init+0x1b8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ErrorLD_Pin|WarnLD_Pin|InfoLD_Pin|SDCardLD_Pin
 80013c6:	2200      	movs	r2, #0
 80013c8:	211f      	movs	r1, #31
 80013ca:	4845      	ldr	r0, [pc, #276]	@ (80014e0 <MX_GPIO_Init+0x1bc>)
 80013cc:	f002 fd7c 	bl	8003ec8 <HAL_GPIO_WritePin>
                          |MemOrg_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AV3LD_Pin|AV2LD_Pin|AV1LD_Pin|MemCS_Pin
 80013d0:	2200      	movs	r2, #0
 80013d2:	211f      	movs	r1, #31
 80013d4:	4843      	ldr	r0, [pc, #268]	@ (80014e4 <MX_GPIO_Init+0x1c0>)
 80013d6:	f002 fd77 	bl	8003ec8 <HAL_GPIO_WritePin>
                          |SpiCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|ActDa_Pin|ActLa_Pin|ActCk_Pin
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 4174 	mov.w	r1, #62464	@ 0xf400
 80013e0:	4841      	ldr	r0, [pc, #260]	@ (80014e8 <MX_GPIO_Init+0x1c4>)
 80013e2:	f002 fd71 	bl	8003ec8 <HAL_GPIO_WritePin>
                          |ActLd_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = ErrorLD_Pin|WarnLD_Pin|InfoLD_Pin|SDCardLD_Pin
 80013e6:	231f      	movs	r3, #31
 80013e8:	617b      	str	r3, [r7, #20]
                          |MemOrg_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4838      	ldr	r0, [pc, #224]	@ (80014e0 <MX_GPIO_Init+0x1bc>)
 80013fe:	f002 fbc7 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = AV3LD_Pin|AV2LD_Pin|AV1LD_Pin|MemCS_Pin
 8001402:	231f      	movs	r3, #31
 8001404:	617b      	str	r3, [r7, #20]
                          |SpiCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4832      	ldr	r0, [pc, #200]	@ (80014e4 <MX_GPIO_Init+0x1c0>)
 800141a:	f002 fbb9 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 800141e:	2304      	movs	r3, #4
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001422:	2303      	movs	r3, #3
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	482d      	ldr	r0, [pc, #180]	@ (80014e8 <MX_GPIO_Init+0x1c4>)
 8001432:	f002 fbad 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|ActDa_Pin|ActLa_Pin|ActCk_Pin
 8001436:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 800143a:	617b      	str	r3, [r7, #20]
                          |ActLd_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4826      	ldr	r0, [pc, #152]	@ (80014e8 <MX_GPIO_Init+0x1c4>)
 8001450:	f002 fb9e 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	481c      	ldr	r0, [pc, #112]	@ (80014e4 <MX_GPIO_Init+0x1c0>)
 8001472:	f002 fb8d 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = UsbM_Pin|UsbP_Pin;
 8001476:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001488:	230a      	movs	r3, #10
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <MX_GPIO_Init+0x1c0>)
 8001494:	f002 fb7c 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SdioDet_Pin;
 8001498:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SdioDet_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <MX_GPIO_Init+0x1c0>)
 80014ae:	f002 fb6f 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Evt_Pin;
 80014b2:	2320      	movs	r3, #32
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 80014c2:	230f      	movs	r3, #15
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Evt_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4806      	ldr	r0, [pc, #24]	@ (80014e8 <MX_GPIO_Init+0x1c4>)
 80014ce:	f002 fb5f 	bl	8003b90 <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400

080014ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_I2C1_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	@ (8001540 <MX_I2C1_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_I2C1_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_I2C1_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_I2C1_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_I2C1_Init+0x50>)
 800152a:	f002 fce7 	bl	8003efc <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f980 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002a0 	.word	0x200002a0
 8001540:	40005400 	.word	0x40005400
 8001544:	000186a0 	.word	0x000186a0

08001548 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	@ (80015cc <HAL_I2C_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12b      	bne.n	80015c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_I2C_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <HAL_I2C_MspInit+0x88>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_I2C_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2cCk_Pin|I2cDa_Pin;
 8001586:	23c0      	movs	r3, #192	@ 0xc0
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	2312      	movs	r3, #18
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001596:	2304      	movs	r3, #4
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <HAL_I2C_MspInit+0x8c>)
 80015a2:	f002 faf5 	bl	8003b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_I2C_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_I2C_MspInit+0x88>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_I2C_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40005400 	.word	0x40005400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400

080015d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80015f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001600:	e000      	b.n	8001604 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001602:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001604:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f9      	beq.n	8001602 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800160e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
	for (int i=0; i < len; i++) {
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
		ITM_SendChar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ffc9 	bl	80015d8 <ITM_SendChar>
	for (int i=0; i < len; i++) {
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
	}
	return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 ffc7 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f873 	bl	8001754 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166e:	f7ff fe59 	bl	8001324 <MX_GPIO_Init>
  MX_DMA_Init();
 8001672:	f7ff fe27 	bl	80012c4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001676:	f7ff ff39 	bl	80014ec <MX_I2C1_Init>
  MX_RTC_Init();
 800167a:	f000 f8e3 	bl	8001844 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800167e:	f000 f991 	bl	80019a4 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001682:	f000 faa7 	bl	8001bd4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001686:	f000 feab 	bl	80023e0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800168a:	f000 fed3 	bl	8002434 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800168e:	f007 fdf5 	bl	800927c <MX_FATFS_Init>
  MX_ADC1_Init();
 8001692:	f7ff fcaf 	bl	8000ff4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001696:	f000 fca5 	bl	8001fe4 <MX_TIM3_Init>
  MX_TIM10_Init();
 800169a:	f000 fd19 	bl	80020d0 <MX_TIM10_Init>
  MX_TIM11_Init();
 800169e:	f000 fd65 	bl	800216c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ActLd_GPIO_Port, ActLd_Pin, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a8:	4821      	ldr	r0, [pc, #132]	@ (8001730 <main+0xd0>)
 80016aa:	f002 fc0d 	bl	8003ec8 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, avs, 4);
 80016ae:	2204      	movs	r2, #4
 80016b0:	4920      	ldr	r1, [pc, #128]	@ (8001734 <main+0xd4>)
 80016b2:	4821      	ldr	r0, [pc, #132]	@ (8001738 <main+0xd8>)
 80016b4:	f001 f98a 	bl	80029cc <HAL_ADC_Start_DMA>

//  HAL_ADC_GetValue(&hadc1);/
  uint8_t counter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	71fb      	strb	r3, [r7, #7]

  printf("hello %d\r\n", counter);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4619      	mov	r1, r3
 80016c0:	481e      	ldr	r0, [pc, #120]	@ (800173c <main+0xdc>)
 80016c2:	f009 fe61 	bl	800b388 <iprintf>
 		  HAL_Delay(1000);
 80016c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ca:	f001 f807 	bl	80026dc <HAL_Delay>
 		  counter++;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3301      	adds	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
//
//
//
//	  }

	printf("value of av1: %i\r\n", avs[0]);
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <main+0xd4>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4819      	ldr	r0, [pc, #100]	@ (8001740 <main+0xe0>)
 80016dc:	f009 fe54 	bl	800b388 <iprintf>
	printf("value of av2: %i\r\n", avs[1]);
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <main+0xd4>)
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4817      	ldr	r0, [pc, #92]	@ (8001744 <main+0xe4>)
 80016e8:	f009 fe4e 	bl	800b388 <iprintf>
	printf("value of av3: %i\r\n", avs[2]);
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <main+0xd4>)
 80016ee:	889b      	ldrh	r3, [r3, #4]
 80016f0:	4619      	mov	r1, r3
 80016f2:	4815      	ldr	r0, [pc, #84]	@ (8001748 <main+0xe8>)
 80016f4:	f009 fe48 	bl	800b388 <iprintf>
	printf("value of cpu_temp: %i\r\n", avs[3]);
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <main+0xd4>)
 80016fa:	88db      	ldrh	r3, [r3, #6]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4813      	ldr	r0, [pc, #76]	@ (800174c <main+0xec>)
 8001700:	f009 fe42 	bl	800b388 <iprintf>
	printf("temp of cpu: %f\r\n", get_cpu_temp(avs[3]));
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <main+0xd4>)
 8001706:	88db      	ldrh	r3, [r3, #6]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fd8d 	bl	8001228 <get_cpu_temp>
 800170e:	ee10 3a10 	vmov	r3, s0
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff20 	bl	8000558 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <main+0xf0>)
 800171e:	f009 fe33 	bl	800b388 <iprintf>

	HAL_Delay(1000);
 8001722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001726:	f000 ffd9 	bl	80026dc <HAL_Delay>
	printf("value of av1: %i\r\n", avs[0]);
 800172a:	bf00      	nop
 800172c:	e7d2      	b.n	80016d4 <main+0x74>
 800172e:	bf00      	nop
 8001730:	40020400 	.word	0x40020400
 8001734:	200001f0 	.word	0x200001f0
 8001738:	200001f8 	.word	0x200001f8
 800173c:	0800def8 	.word	0x0800def8
 8001740:	0800df04 	.word	0x0800df04
 8001744:	0800df18 	.word	0x0800df18
 8001748:	0800df2c 	.word	0x0800df2c
 800174c:	0800df40 	.word	0x0800df40
 8001750:	0800df58 	.word	0x0800df58

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	@ 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2230      	movs	r2, #48	@ 0x30
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f009 fe34 	bl	800b3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <SystemClock_Config+0xdc>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <SystemClock_Config+0xdc>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	@ 0x40
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <SystemClock_Config+0xdc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <SystemClock_Config+0xe0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017a0:	4a24      	ldr	r2, [pc, #144]	@ (8001834 <SystemClock_Config+0xe0>)
 80017a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <SystemClock_Config+0xe0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80017b4:	2305      	movs	r3, #5
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017be:	2301      	movs	r3, #1
 80017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017cc:	2308      	movs	r3, #8
 80017ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017d0:	23a8      	movs	r3, #168	@ 0xa8
 80017d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017d4:	2304      	movs	r3, #4
 80017d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017d8:	2307      	movs	r3, #7
 80017da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fccf 	bl	8004184 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017ec:	f000 f824 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2102      	movs	r1, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f002 ff31 	bl	8004674 <HAL_RCC_ClockConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001818:	f000 f80e 	bl	8001838 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001822:	2000      	movs	r0, #0
 8001824:	f003 f80c 	bl	8004840 <HAL_RCC_MCOConfig>
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	@ 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	@ 0x38
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  RTC_TamperTypeDef sTamper = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2220      	movs	r2, #32
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f009 fdb3 	bl	800b3d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800186a:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <MX_RTC_Init+0x100>)
 800186c:	4a36      	ldr	r2, [pc, #216]	@ (8001948 <MX_RTC_Init+0x104>)
 800186e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001870:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <MX_RTC_Init+0x100>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001876:	4b33      	ldr	r3, [pc, #204]	@ (8001944 <MX_RTC_Init+0x100>)
 8001878:	227f      	movs	r2, #127	@ 0x7f
 800187a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800187c:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <MX_RTC_Init+0x100>)
 800187e:	22ff      	movs	r2, #255	@ 0xff
 8001880:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001882:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <MX_RTC_Init+0x100>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001888:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <MX_RTC_Init+0x100>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800188e:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <MX_RTC_Init+0x100>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001894:	482b      	ldr	r0, [pc, #172]	@ (8001944 <MX_RTC_Init+0x100>)
 8001896:	f003 fa61 	bl	8004d5c <HAL_RTC_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80018a0:	f7ff ffca 	bl	8001838 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sTime.Minutes = 0x0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sTime.Seconds = 0x0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c2:	2201      	movs	r2, #1
 80018c4:	4619      	mov	r1, r3
 80018c6:	481f      	ldr	r0, [pc, #124]	@ (8001944 <MX_RTC_Init+0x100>)
 80018c8:	f003 facb 	bl	8004e62 <HAL_RTC_SetTime>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80018d2:	f7ff ffb1 	bl	8001838 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 80018dc:	2301      	movs	r3, #1
 80018de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sDate.Date = 0x1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sDate.Year = 0x0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2201      	movs	r2, #1
 80018f4:	4619      	mov	r1, r3
 80018f6:	4813      	ldr	r0, [pc, #76]	@ (8001944 <MX_RTC_Init+0x100>)
 80018f8:	f003 fb4d 	bl	8004f96 <HAL_RTC_SetDate>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001902:	f7ff ff99 	bl	8001838 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001906:	2301      	movs	r3, #1
 8001908:	603b      	str	r3, [r7, #0]
  sTamper.PinSelection = RTC_TAMPERPIN_DEFAULT;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	61fb      	str	r3, [r7, #28]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001926:	463b      	mov	r3, r7
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <MX_RTC_Init+0x100>)
 800192c:	f003 fc58 	bl	80051e0 <HAL_RTCEx_SetTamper>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8001936:	f7ff ff7f 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	3738      	adds	r7, #56	@ 0x38
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002f4 	.word	0x200002f4
 8001948:	40002800 	.word	0x40002800

0800194c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <HAL_RTC_MspInit+0x50>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d111      	bne.n	8001992 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800196e:	2302      	movs	r3, #2
 8001970:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001972:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001976:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4618      	mov	r0, r3
 800197e:	f003 f8ff 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001988:	f7ff ff56 	bl	8001838 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <HAL_RTC_MspInit+0x54>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40002800 	.word	0x40002800
 80019a0:	42470e3c 	.word	0x42470e3c

080019a4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDIO_Init 0 */
	hsd.Instance = SDIO;
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <MX_SDIO_SD_Init+0x4c>)
 80019ac:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019b4:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */
	if (HAL_SD_Init(&hsd) == HAL_OK) {
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019d4:	f003 fc61 	bl	800529a <HAL_SD_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d104      	bne.n	80019e8 <MX_SDIO_SD_Init+0x44>
		HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);
 80019de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019e2:	4802      	ldr	r0, [pc, #8]	@ (80019ec <MX_SDIO_SD_Init+0x48>)
 80019e4:	f004 fa32 	bl	8005e4c <HAL_SD_ConfigWideBusOperation>
  /* USER CODE END SDIO_Init 1 */
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000314 	.word	0x20000314
 80019f0:	40012c00 	.word	0x40012c00

080019f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a68      	ldr	r2, [pc, #416]	@ (8001bb4 <HAL_SD_MspInit+0x1c0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	f040 80c9 	bne.w	8001baa <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	4a65      	ldr	r2, [pc, #404]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a26:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a28:	4b63      	ldr	r3, [pc, #396]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a44:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	4a57      	ldr	r2, [pc, #348]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a60:	4b55      	ldr	r3, [pc, #340]	@ (8001bb8 <HAL_SD_MspInit+0x1c4>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001a6c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001a70:	617b      	str	r3, [r7, #20]
                          |SdioCk_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a7e:	230c      	movs	r3, #12
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	484c      	ldr	r0, [pc, #304]	@ (8001bbc <HAL_SD_MspInit+0x1c8>)
 8001a8a:	f002 f881 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SdioCmd_Pin;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SdioCmd_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4845      	ldr	r0, [pc, #276]	@ (8001bc0 <HAL_SD_MspInit+0x1cc>)
 8001aaa:	f002 f871 	bl	8003b90 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001aae:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ab0:	4a45      	ldr	r2, [pc, #276]	@ (8001bc8 <HAL_SD_MspInit+0x1d4>)
 8001ab2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001ab4:	4b43      	ldr	r3, [pc, #268]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ab6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abc:	4b41      	ldr	r3, [pc, #260]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac2:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ace:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ad2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ad6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ade:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001ae0:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b37      	ldr	r3, [pc, #220]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001aec:	4b35      	ldr	r3, [pc, #212]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001aee:	2204      	movs	r2, #4
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001af8:	4b32      	ldr	r3, [pc, #200]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001afa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b00:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001b02:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b06:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001b08:	482e      	ldr	r0, [pc, #184]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001b0a:	f001 fc33 	bl	8003374 <HAL_DMA_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001b14:	f7ff fe90 	bl	8001838 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b1e:	4a29      	ldr	r2, [pc, #164]	@ (8001bc4 <HAL_SD_MspInit+0x1d0>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001b24:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b26:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd0 <HAL_SD_MspInit+0x1dc>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001b2a:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b30:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b34:	2240      	movs	r2, #64	@ 0x40
 8001b36:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b44:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b54:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b58:	2220      	movs	r2, #32
 8001b5a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b64:	2204      	movs	r2, #4
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b78:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b7c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001b7e:	4813      	ldr	r0, [pc, #76]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b80:	f001 fbf8 	bl	8003374 <HAL_DMA_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001b8a:	f7ff fe55 	bl	8001838 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <HAL_SD_MspInit+0x1d8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2031      	movs	r0, #49	@ 0x31
 8001ba0:	f001 fbb1 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001ba4:	2031      	movs	r0, #49	@ 0x31
 8001ba6:	f001 fbca 	bl	800333e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	20000398 	.word	0x20000398
 8001bc8:	40026458 	.word	0x40026458
 8001bcc:	200003f8 	.word	0x200003f8
 8001bd0:	400264a0 	.word	0x400264a0

08001bd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_SPI1_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c26:	f004 fe73 	bl	8006910 <HAL_SPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c30:	f7ff fe02 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000458 	.word	0x20000458
 8001c3c:	40013000 	.word	0x40013000

08001c40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <HAL_SPI_MspInit+0x94>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d133      	bne.n	8001cca <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <HAL_SPI_MspInit+0x98>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <HAL_SPI_MspInit+0x98>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_SPI_MspInit+0x98>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <HAL_SPI_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a14      	ldr	r2, [pc, #80]	@ (8001cd8 <HAL_SPI_MspInit+0x98>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_SPI_MspInit+0x98>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SpiCk_Pin|SpiMISO_Pin|SpiMosi_Pin;
 8001c9a:	23e0      	movs	r3, #224	@ 0xe0
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <HAL_SPI_MspInit+0x9c>)
 8001cb6:	f001 ff6b 	bl	8003b90 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2023      	movs	r0, #35	@ 0x23
 8001cc0:	f001 fb21 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cc4:	2023      	movs	r0, #35	@ 0x23
 8001cc6:	f001 fb3a 	bl	800333e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	@ 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40013000 	.word	0x40013000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f000 fc89 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <ADC_IRQHandler+0x10>)
 8001d96:	f000 fd08 	bl	80027aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200001f8 	.word	0x200001f8

08001da4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001daa:	f004 fff5 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200004fc 	.word	0x200004fc

08001db8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001dbe:	f004 ffeb 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000544 	.word	0x20000544

08001dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <TIM3_IRQHandler+0x10>)
 8001dd2:	f004 ffe1 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200004b4 	.word	0x200004b4

08001de0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <SPI1_IRQHandler+0x10>)
 8001de6:	f004 fe1d 	bl	8006a24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000458 	.word	0x20000458

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <USART1_IRQHandler+0x10>)
 8001dfa:	f005 fdfd 	bl	80079f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000058c 	.word	0x2000058c

08001e08 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <SDIO_IRQHandler+0x10>)
 8001e0e:	f003 fcbd 	bl	800578c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000314 	.word	0x20000314

08001e1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA2_Stream0_IRQHandler+0x10>)
 8001e22:	f001 fc3f 	bl	80036a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000240 	.word	0x20000240

08001e30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA2_Stream3_IRQHandler+0x10>)
 8001e36:	f001 fc35 	bl	80036a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000398 	.word	0x20000398

08001e44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <DMA2_Stream6_IRQHandler+0x10>)
 8001e4a:	f001 fc2b 	bl	80036a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200003f8 	.word	0x200003f8

08001e58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <USART6_IRQHandler+0x10>)
 8001e5e:	f005 fdcb 	bl	80079f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200005d4 	.word	0x200005d4

08001e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_kill>:

int _kill(int pid, int sig)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e86:	f009 faaf 	bl	800b3e8 <__errno>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2216      	movs	r2, #22
 8001e8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_exit>:

void _exit (int status)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe7 	bl	8001e7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eae:	bf00      	nop
 8001eb0:	e7fd      	b.n	8001eae <_exit+0x12>

08001eb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e00a      	b.n	8001eda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	4601      	mov	r1, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	60ba      	str	r2, [r7, #8]
 8001ed0:	b2ca      	uxtb	r2, r1
 8001ed2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dbf0      	blt.n	8001ec4 <_read+0x12>
  }

  return len;
 8001ee2:	687b      	ldr	r3, [r7, #4]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_close>:
  }
  return len;
}

int _close(int file)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f14:	605a      	str	r2, [r3, #4]
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_isatty>:

int _isatty(int file)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f009 fa30 	bl	800b3e8 <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20010000 	.word	0x20010000
 8001fb4:	00000f00 	.word	0x00000f00
 8001fb8:	200004b0 	.word	0x200004b0
 8001fbc:	20000788 	.word	0x20000788

08001fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <SystemInit+0x20>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <SystemInit+0x20>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	@ 0x38
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	f107 0320 	add.w	r3, r7, #32
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002016:	4a2d      	ldr	r2, [pc, #180]	@ (80020cc <MX_TIM3_Init+0xe8>)
 8002018:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002026:	4b28      	ldr	r3, [pc, #160]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800202c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800203a:	4823      	ldr	r0, [pc, #140]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 800203c:	f004 fe04 	bl	8006c48 <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002046:	f7ff fbf7 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002050:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002054:	4619      	mov	r1, r3
 8002056:	481c      	ldr	r0, [pc, #112]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002058:	f005 f850 	bl	80070fc <HAL_TIM_ConfigClockSource>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002062:	f7ff fbe9 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002066:	4818      	ldr	r0, [pc, #96]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002068:	f004 fe3d 	bl	8006ce6 <HAL_TIM_PWM_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002072:	f7ff fbe1 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800207e:	f107 0320 	add.w	r3, r7, #32
 8002082:	4619      	mov	r1, r3
 8002084:	4810      	ldr	r0, [pc, #64]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 8002086:	f005 fbe5 	bl	8007854 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002090:	f7ff fbd2 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002094:	2360      	movs	r3, #96	@ 0x60
 8002096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	4619      	mov	r1, r3
 80020aa:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 80020ac:	f004 ff64 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020b6:	f7ff fbbf 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <MX_TIM3_Init+0xe4>)
 80020bc:	f000 f908 	bl	80022d0 <HAL_TIM_MspPostInit>

}
 80020c0:	bf00      	nop
 80020c2:	3738      	adds	r7, #56	@ 0x38
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200004b4 	.word	0x200004b4
 80020cc:	40000400 	.word	0x40000400

080020d0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002164 <MX_TIM10_Init+0x94>)
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <MX_TIM10_Init+0x98>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80020ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_TIM10_Init+0x94>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <MX_TIM10_Init+0x94>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM10_Init+0x94>)
 80020fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002100:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <MX_TIM10_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_TIM10_Init+0x94>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800210e:	4815      	ldr	r0, [pc, #84]	@ (8002164 <MX_TIM10_Init+0x94>)
 8002110:	f004 fd9a 	bl	8006c48 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800211a:	f7ff fb8d 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800211e:	4811      	ldr	r0, [pc, #68]	@ (8002164 <MX_TIM10_Init+0x94>)
 8002120:	f004 fde1 	bl	8006ce6 <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800212a:	f7ff fb85 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212e:	2360      	movs	r3, #96	@ 0x60
 8002130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	4807      	ldr	r0, [pc, #28]	@ (8002164 <MX_TIM10_Init+0x94>)
 8002146:	f004 ff17 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002150:	f7ff fb72 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <MX_TIM10_Init+0x94>)
 8002156:	f000 f8bb 	bl	80022d0 <HAL_TIM_MspPostInit>

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200004fc 	.word	0x200004fc
 8002168:	40014400 	.word	0x40014400

0800216c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	615a      	str	r2, [r3, #20]
 8002182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <MX_TIM11_Init+0x94>)
 8002186:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <MX_TIM11_Init+0x98>)
 8002188:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800218a:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <MX_TIM11_Init+0x94>)
 800218c:	2200      	movs	r2, #0
 800218e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <MX_TIM11_Init+0x94>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_TIM11_Init+0x94>)
 8002198:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800219c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219e:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_TIM11_Init+0x94>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <MX_TIM11_Init+0x94>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80021aa:	4815      	ldr	r0, [pc, #84]	@ (8002200 <MX_TIM11_Init+0x94>)
 80021ac:	f004 fd4c 	bl	8006c48 <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80021b6:	f7ff fb3f 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80021ba:	4811      	ldr	r0, [pc, #68]	@ (8002200 <MX_TIM11_Init+0x94>)
 80021bc:	f004 fd93 	bl	8006ce6 <HAL_TIM_PWM_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80021c6:	f7ff fb37 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ca:	2360      	movs	r3, #96	@ 0x60
 80021cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	4807      	ldr	r0, [pc, #28]	@ (8002200 <MX_TIM11_Init+0x94>)
 80021e2:	f004 fec9 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80021ec:	f7ff fb24 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80021f0:	4803      	ldr	r0, [pc, #12]	@ (8002200 <MX_TIM11_Init+0x94>)
 80021f2:	f000 f86d 	bl	80022d0 <HAL_TIM_MspPostInit>

}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000544 	.word	0x20000544
 8002204:	40014800 	.word	0x40014800

08002208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d116      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4a28      	ldr	r2, [pc, #160]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6413      	str	r3, [r2, #64]	@ 0x40
 800222a:	4b26      	ldr	r3, [pc, #152]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	201d      	movs	r0, #29
 800223c:	f001 f863 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002240:	201d      	movs	r0, #29
 8002242:	f001 f87c 	bl	800333e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002246:	e036      	b.n	80022b6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_TIM_Base_MspInit+0xc0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d116      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 800225c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002260:	6453      	str	r3, [r2, #68]	@ 0x44
 8002262:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2019      	movs	r0, #25
 8002274:	f001 f847 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002278:	2019      	movs	r0, #25
 800227a:	f001 f860 	bl	800333e <HAL_NVIC_EnableIRQ>
}
 800227e:	e01a      	b.n	80022b6 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d115      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4a0c      	ldr	r2, [pc, #48]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002298:	6453      	str	r3, [r2, #68]	@ 0x44
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	201a      	movs	r0, #26
 80022ac:	f001 f82b 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022b0:	201a      	movs	r0, #26
 80022b2:	f001 f844 	bl	800333e <HAL_NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800

080022d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	@ 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a37      	ldr	r2, [pc, #220]	@ (80023cc <HAL_TIM_MspPostInit+0xfc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d11e      	bne.n	8002330 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a35      	ldr	r2, [pc, #212]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800230e:	2310      	movs	r3, #16
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800231e:	2302      	movs	r3, #2
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	482a      	ldr	r0, [pc, #168]	@ (80023d4 <HAL_TIM_MspPostInit+0x104>)
 800232a:	f001 fc31 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800232e:	e048      	b.n	80023c2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a28      	ldr	r2, [pc, #160]	@ (80023d8 <HAL_TIM_MspPostInit+0x108>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d11f      	bne.n	800237a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002368:	2303      	movs	r3, #3
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4818      	ldr	r0, [pc, #96]	@ (80023d4 <HAL_TIM_MspPostInit+0x104>)
 8002374:	f001 fc0c 	bl	8003b90 <HAL_GPIO_Init>
}
 8002378:	e023      	b.n	80023c2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <HAL_TIM_MspPostInit+0x10c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d11e      	bne.n	80023c2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	6313      	str	r3, [r2, #48]	@ 0x30
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_TIM_MspPostInit+0x100>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80023b2:	2303      	movs	r3, #3
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <HAL_TIM_MspPostInit+0x104>)
 80023be:	f001 fbe7 	bl	8003b90 <HAL_GPIO_Init>
}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800

080023e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	@ (8002430 <MX_USART1_UART_Init+0x50>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_USART1_UART_Init+0x4c>)
 8002418:	f005 fa9e 	bl	8007958 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002422:	f7ff fa09 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000058c 	.word	0x2000058c
 8002430:	40011000 	.word	0x40011000

08002434 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <MX_USART6_UART_Init+0x50>)
 800243c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_USART6_UART_Init+0x4c>)
 800246c:	f005 fa74 	bl	8007958 <HAL_UART_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002476:	f7ff f9df 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200005d4 	.word	0x200005d4
 8002484:	40011400 	.word	0x40011400

08002488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002590 <HAL_UART_MspInit+0x108>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d135      	bne.n	8002516 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	4a38      	ldr	r2, [pc, #224]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ba:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	4b32      	ldr	r3, [pc, #200]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a31      	ldr	r2, [pc, #196]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f4:	2307      	movs	r3, #7
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4826      	ldr	r0, [pc, #152]	@ (8002598 <HAL_UART_MspInit+0x110>)
 8002500:	f001 fb46 	bl	8003b90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2025      	movs	r0, #37	@ 0x25
 800250a:	f000 fefc 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800250e:	2025      	movs	r0, #37	@ 0x25
 8002510:	f000 ff15 	bl	800333e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002514:	e038      	b.n	8002588 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a20      	ldr	r2, [pc, #128]	@ (800259c <HAL_UART_MspInit+0x114>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d133      	bne.n	8002588 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 8002526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002528:	4a1a      	ldr	r2, [pc, #104]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 800252a:	f043 0320 	orr.w	r3, r3, #32
 800252e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002530:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 8002532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	4a13      	ldr	r2, [pc, #76]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6313      	str	r3, [r2, #48]	@ 0x30
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_UART_MspInit+0x10c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002558:	23c0      	movs	r3, #192	@ 0xc0
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002568:	2308      	movs	r3, #8
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	480b      	ldr	r0, [pc, #44]	@ (80025a0 <HAL_UART_MspInit+0x118>)
 8002574:	f001 fb0c 	bl	8003b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2047      	movs	r0, #71	@ 0x47
 800257e:	f000 fec2 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002582:	2047      	movs	r0, #71	@ 0x47
 8002584:	f000 fedb 	bl	800333e <HAL_NVIC_EnableIRQ>
}
 8002588:	bf00      	nop
 800258a:	3730      	adds	r7, #48	@ 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40011000 	.word	0x40011000
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	40011400 	.word	0x40011400
 80025a0:	40020800 	.word	0x40020800

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025a8:	f7ff fd0a 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	@ (80025f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f008 ff0f 	bl	800b3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff f843 	bl	8001660 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025e8:	0800e3dc 	.word	0x0800e3dc
  ldr r2, =_sbss
 80025ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025f0:	20000788 	.word	0x20000788

080025f4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <DMA1_Stream0_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 fe65 	bl	80032f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	200f      	movs	r0, #15
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fb58 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fe7d 	bl	800335a <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002678:	f000 fe45 	bl	8003306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	@ (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000000 	.word	0x20000000
 8002694:	20000008 	.word	0x20000008
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000008 	.word	0x20000008
 80026c0:	2000061c 	.word	0x2000061c

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000061c 	.word	0x2000061c

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000008 	.word	0x20000008

08002724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e033      	b.n	80027a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fcd4 	bl	80010f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800276a:	f023 0302 	bic.w	r3, r3, #2
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fb62 	bl	8002e40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
 8002792:	e001      	b.n	8002798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d049      	beq.n	8002874 <HAL_ADC_IRQHandler+0xca>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d046      	beq.n	8002874 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d12b      	bne.n	8002864 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002810:	2b00      	cmp	r3, #0
 8002812:	d127      	bne.n	8002864 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800282c:	2b00      	cmp	r3, #0
 800282e:	d119      	bne.n	8002864 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0220 	bic.w	r2, r2, #32
 800283e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f9a1 	bl	8002bac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f06f 0212 	mvn.w	r2, #18
 8002872:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d057      	beq.n	800293a <HAL_ADC_IRQHandler+0x190>
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d054      	beq.n	800293a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d139      	bne.n	800292a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d12b      	bne.n	800292a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d124      	bne.n	800292a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11d      	bne.n	800292a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d119      	bne.n	800292a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002904:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fc06 	bl	800313c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 020c 	mvn.w	r2, #12
 8002938:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d017      	beq.n	8002980 <HAL_ADC_IRQHandler+0x1d6>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d10d      	bne.n	8002980 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f92f 	bl	8002bd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0201 	mvn.w	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800298e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x218>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0220 	mvn.w	r2, #32
 80029b0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f918 	bl	8002be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0220 	mvn.w	r2, #32
 80029c0:	601a      	str	r2, [r3, #0]
  }
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_Start_DMA+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0ce      	b.n	8002b88 <HAL_ADC_Start_DMA+0x1bc>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d018      	beq.n	8002a32 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a10:	4b5f      	ldr	r3, [pc, #380]	@ (8002b90 <HAL_ADC_Start_DMA+0x1c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5f      	ldr	r2, [pc, #380]	@ (8002b94 <HAL_ADC_Start_DMA+0x1c8>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9a      	lsrs	r2, r3, #18
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a50:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 8086 	bne.w	8002b6e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f023 0206 	bic.w	r2, r3, #6
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
 8002aae:	e002      	b.n	8002ab6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002abe:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <HAL_ADC_Start_DMA+0x1cc>)
 8002ac0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	4a35      	ldr	r2, [pc, #212]	@ (8002b9c <HAL_ADC_Start_DMA+0x1d0>)
 8002ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_ADC_Start_DMA+0x1d4>)
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad6:	4a33      	ldr	r2, [pc, #204]	@ (8002ba4 <HAL_ADC_Start_DMA+0x1d8>)
 8002ad8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002af2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b02:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	334c      	adds	r3, #76	@ 0x4c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f000 fcdc 	bl	80034d0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10f      	bne.n	8002b44 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d129      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	e020      	b.n	8002b86 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a17      	ldr	r2, [pc, #92]	@ (8002ba8 <HAL_ADC_Start_DMA+0x1dc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d11b      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1ba>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d114      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	e00b      	b.n	8002b86 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f043 0210 	orr.w	r2, r3, #16
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000000 	.word	0x20000000
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	40012300 	.word	0x40012300
 8002b9c:	08003039 	.word	0x08003039
 8002ba0:	080030f3 	.word	0x080030f3
 8002ba4:	0800310f 	.word	0x0800310f
 8002ba8:	40012000 	.word	0x40012000

08002bac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e105      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x228>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b09      	cmp	r3, #9
 8002c26:	d925      	bls.n	8002c74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68d9      	ldr	r1, [r3, #12]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	2207      	movs	r2, #7
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43da      	mvns	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68d9      	ldr	r1, [r3, #12]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	4603      	mov	r3, r0
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4403      	add	r3, r0
 8002c66:	3b1e      	subs	r3, #30
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	e022      	b.n	8002cba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6919      	ldr	r1, [r3, #16]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	2207      	movs	r2, #7
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	400a      	ands	r2, r1
 8002c96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6919      	ldr	r1, [r3, #16]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4403      	add	r3, r0
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d824      	bhi.n	8002d0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b05      	subs	r3, #5
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b05      	subs	r3, #5
 8002cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d0a:	e04c      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d824      	bhi.n	8002d5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b23      	subs	r3, #35	@ 0x23
 8002d26:	221f      	movs	r2, #31
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	400a      	ands	r2, r1
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b23      	subs	r3, #35	@ 0x23
 8002d50:	fa00 f203 	lsl.w	r2, r0, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d5c:	e023      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b41      	subs	r3, #65	@ 0x41
 8002d70:	221f      	movs	r2, #31
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	3b41      	subs	r3, #65	@ 0x41
 8002d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da6:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <HAL_ADC_ConfigChannel+0x234>)
 8002da8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <HAL_ADC_ConfigChannel+0x238>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d109      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1cc>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b12      	cmp	r3, #18
 8002dba:	d105      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <HAL_ADC_ConfigChannel+0x238>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d123      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x21e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d003      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x1e6>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b11      	cmp	r3, #17
 8002de0:	d11b      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d111      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <HAL_ADC_ConfigChannel+0x23c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a10      	ldr	r2, [pc, #64]	@ (8002e3c <HAL_ADC_ConfigChannel+0x240>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9a      	lsrs	r2, r3, #18
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e0c:	e002      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f9      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40012300 	.word	0x40012300
 8002e34:	40012000 	.word	0x40012000
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	431bde83 	.word	0x431bde83

08002e40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e48:	4b79      	ldr	r3, [pc, #484]	@ (8003030 <ADC_Init+0x1f0>)
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed2:	4a58      	ldr	r2, [pc, #352]	@ (8003034 <ADC_Init+0x1f4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6899      	ldr	r1, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	e00f      	b.n	8002f3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0202 	bic.w	r2, r2, #2
 8002f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7e1b      	ldrb	r3, [r3, #24]
 8002f58:	005a      	lsls	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01b      	beq.n	8002fa4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	3b01      	subs	r3, #1
 8002f98:	035a      	lsls	r2, r3, #13
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e007      	b.n	8002fb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	051a      	lsls	r2, r3, #20
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ff6:	025a      	lsls	r2, r3, #9
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	029a      	lsls	r2, r3, #10
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40012300 	.word	0x40012300
 8003034:	0f000001 	.word	0x0f000001

08003038 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d13c      	bne.n	80030cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d12b      	bne.n	80030c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	d127      	bne.n	80030c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800308c:	2b00      	cmp	r3, #0
 800308e:	d119      	bne.n	80030c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0220 	bic.w	r2, r2, #32
 800309e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fd71 	bl	8002bac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030ca:	e00e      	b.n	80030ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff fd85 	bl	8002be8 <HAL_ADC_ErrorCallback>
}
 80030de:	e004      	b.n	80030ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff fd5d 	bl	8002bc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2240      	movs	r2, #64	@ 0x40
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0204 	orr.w	r2, r3, #4
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff fd5a 	bl	8002be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <__NVIC_SetPriorityGrouping>:
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003160:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800317c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003182:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60d3      	str	r3, [r2, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_GetPriorityGrouping>:
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <__NVIC_GetPriorityGrouping+0x18>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 0307 	and.w	r3, r3, #7
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_EnableIRQ>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db0b      	blt.n	80031de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4907      	ldr	r1, [pc, #28]	@ (80031ec <__NVIC_EnableIRQ+0x38>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2001      	movs	r0, #1
 80031d6:	fa00 f202 	lsl.w	r2, r0, r2
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	@ (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <SysTick_Config>:
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032bc:	d301      	bcc.n	80032c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032be:	2301      	movs	r3, #1
 80032c0:	e00f      	b.n	80032e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <SysTick_Config+0x40>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ca:	210f      	movs	r1, #15
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032d0:	f7ff ff8e 	bl	80031f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <SysTick_Config+0x40>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <SysTick_Config+0x40>)
 80032dc:	2207      	movs	r2, #7
 80032de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	e000e010 	.word	0xe000e010

080032f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff29 	bl	8003150 <__NVIC_SetPriorityGrouping>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003318:	f7ff ff3e 	bl	8003198 <__NVIC_GetPriorityGrouping>
 800331c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f7ff ff8e 	bl	8003244 <NVIC_EncodePriority>
 8003328:	4602      	mov	r2, r0
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff5d 	bl	80031f0 <__NVIC_SetPriority>
}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff31 	bl	80031b4 <__NVIC_EnableIRQ>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ffa2 	bl	80032ac <SysTick_Config>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7ff f9a0 	bl	80026c4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e099      	b.n	80034c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b0:	e00f      	b.n	80033d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b2:	f7ff f987 	bl	80026c4 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d908      	bls.n	80033d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2203      	movs	r2, #3
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e078      	b.n	80034c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e8      	bne.n	80033b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <HAL_DMA_Init+0x158>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	2b04      	cmp	r3, #4
 800342a:	d107      	bne.n	800343c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	4313      	orrs	r3, r2
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0307 	bic.w	r3, r3, #7
 8003452:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	2b04      	cmp	r3, #4
 8003464:	d117      	bne.n	8003496 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fb0d 	bl	8003a98 <DMA_CheckFifoParam>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2240      	movs	r2, #64	@ 0x40
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003492:	2301      	movs	r3, #1
 8003494:	e016      	b.n	80034c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fac4 	bl	8003a2c <DMA_CalcBaseAndBitshift>
 80034a4:	4603      	mov	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	223f      	movs	r2, #63	@ 0x3f
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	f010803f 	.word	0xf010803f

080034d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_DMA_Start_IT+0x26>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e040      	b.n	8003578 <HAL_DMA_Start_IT+0xa8>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d12f      	bne.n	800356a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fa56 	bl	80039d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	223f      	movs	r2, #63	@ 0x3f
 800352a:	409a      	lsls	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0216 	orr.w	r2, r2, #22
 800353e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0208 	orr.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e005      	b.n	8003576 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800358e:	f7ff f899 	bl	80026c4 <HAL_GetTick>
 8003592:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2280      	movs	r2, #128	@ 0x80
 80035a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e052      	b.n	8003658 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0216 	bic.w	r2, r2, #22
 80035c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_DMA_Abort+0x62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0208 	bic.w	r2, r2, #8
 80035f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003602:	e013      	b.n	800362c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003604:	f7ff f85e 	bl	80026c4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b05      	cmp	r3, #5
 8003610:	d90c      	bls.n	800362c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2203      	movs	r2, #3
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e015      	b.n	8003658 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e4      	bne.n	8003604 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	223f      	movs	r2, #63	@ 0x3f
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d004      	beq.n	800367e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2280      	movs	r2, #128	@ 0x80
 8003678:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e00c      	b.n	8003698 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2205      	movs	r2, #5
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036b0:	4b8e      	ldr	r3, [pc, #568]	@ (80038ec <HAL_DMA_IRQHandler+0x248>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a8e      	ldr	r2, [pc, #568]	@ (80038f0 <HAL_DMA_IRQHandler+0x24c>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	2208      	movs	r2, #8
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01a      	beq.n	8003710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fc:	2208      	movs	r2, #8
 80036fe:	409a      	lsls	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	2201      	movs	r2, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003732:	2201      	movs	r2, #1
 8003734:	409a      	lsls	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	2204      	movs	r2, #4
 800374c:	409a      	lsls	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	2204      	movs	r2, #4
 800376a:	409a      	lsls	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003780:	2210      	movs	r2, #16
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d043      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03c      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379e:	2210      	movs	r2, #16
 80037a0:	409a      	lsls	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d024      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	e01f      	b.n	8003814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e016      	b.n	8003814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0208 	bic.w	r2, r2, #8
 8003802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	2220      	movs	r2, #32
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 808f 	beq.w	8003944 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8087 	beq.w	8003944 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	2220      	movs	r2, #32
 800383c:	409a      	lsls	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b05      	cmp	r3, #5
 800384c:	d136      	bne.n	80038bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0216 	bic.w	r2, r2, #22
 800385c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800386c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_DMA_IRQHandler+0x1da>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0208 	bic.w	r2, r2, #8
 800388c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003892:	223f      	movs	r2, #63	@ 0x3f
 8003894:	409a      	lsls	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d07e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
        }
        return;
 80038ba:	e079      	b.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d031      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e02c      	b.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000
 80038f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d023      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e01e      	b.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0210 	bic.w	r2, r2, #16
 8003922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d022      	beq.n	800399e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2205      	movs	r2, #5
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3301      	adds	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	d307      	bcc.n	800398c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f2      	bne.n	8003970 <HAL_DMA_IRQHandler+0x2cc>
 800398a:	e000      	b.n	800398e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800398c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039b0:	bf00      	nop
    }
  }
}
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d108      	bne.n	8003a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a0e:	e007      	b.n	8003a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3b10      	subs	r3, #16
 8003a3c:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <DMA_CalcBaseAndBitshift+0x64>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a46:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x68>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d909      	bls.n	8003a6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a6c:	e007      	b.n	8003a7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	0800df84 	.word	0x0800df84

08003a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11f      	bne.n	8003af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d856      	bhi.n	8003b66 <DMA_CheckFifoParam+0xce>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <DMA_CheckFifoParam+0x28>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ae3 	.word	0x08003ae3
 8003ac8:	08003ad1 	.word	0x08003ad1
 8003acc:	08003b67 	.word	0x08003b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d046      	beq.n	8003b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae0:	e043      	b.n	8003b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aea:	d140      	bne.n	8003b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e03d      	b.n	8003b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afa:	d121      	bne.n	8003b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d837      	bhi.n	8003b72 <DMA_CheckFifoParam+0xda>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <DMA_CheckFifoParam+0x70>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b1f 	.word	0x08003b1f
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003b31 	.word	0x08003b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e030      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d025      	beq.n	8003b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2e:	e022      	b.n	8003b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b38:	d11f      	bne.n	8003b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b3e:	e01c      	b.n	8003b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d903      	bls.n	8003b4e <DMA_CheckFifoParam+0xb6>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d003      	beq.n	8003b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b4c:	e018      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      break;
 8003b52:	e015      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e00b      	b.n	8003b7e <DMA_CheckFifoParam+0xe6>
      break;
 8003b66:	bf00      	nop
 8003b68:	e00a      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e008      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e006      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e004      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e159      	b.n	8003e60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	f040 8148 	bne.w	8003e5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d005      	beq.n	8003be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d130      	bne.n	8003c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c18:	2201      	movs	r2, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 0201 	and.w	r2, r3, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d017      	beq.n	8003c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d123      	bne.n	8003cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	08da      	lsrs	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3208      	adds	r2, #8
 8003cce:	69b9      	ldr	r1, [r7, #24]
 8003cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80a2 	beq.w	8003e5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b57      	ldr	r3, [pc, #348]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	4a56      	ldr	r2, [pc, #344]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d26:	4b54      	ldr	r3, [pc, #336]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d32:	4a52      	ldr	r2, [pc, #328]	@ (8003e7c <HAL_GPIO_Init+0x2ec>)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a49      	ldr	r2, [pc, #292]	@ (8003e80 <HAL_GPIO_Init+0x2f0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d019      	beq.n	8003d92 <HAL_GPIO_Init+0x202>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a48      	ldr	r2, [pc, #288]	@ (8003e84 <HAL_GPIO_Init+0x2f4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_Init+0x1fe>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a47      	ldr	r2, [pc, #284]	@ (8003e88 <HAL_GPIO_Init+0x2f8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00d      	beq.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a46      	ldr	r2, [pc, #280]	@ (8003e8c <HAL_GPIO_Init+0x2fc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <HAL_GPIO_Init+0x1f6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a45      	ldr	r2, [pc, #276]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_GPIO_Init+0x1f2>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e008      	b.n	8003d94 <HAL_GPIO_Init+0x204>
 8003d82:	2307      	movs	r3, #7
 8003d84:	e006      	b.n	8003d94 <HAL_GPIO_Init+0x204>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e004      	b.n	8003d94 <HAL_GPIO_Init+0x204>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e002      	b.n	8003d94 <HAL_GPIO_Init+0x204>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_GPIO_Init+0x204>
 8003d92:	2300      	movs	r3, #0
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f002 0203 	and.w	r2, r2, #3
 8003d9a:	0092      	lsls	r2, r2, #2
 8003d9c:	4093      	lsls	r3, r2
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da4:	4935      	ldr	r1, [pc, #212]	@ (8003e7c <HAL_GPIO_Init+0x2ec>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	3302      	adds	r3, #2
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db2:	4b38      	ldr	r3, [pc, #224]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e00:	4a24      	ldr	r2, [pc, #144]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e06:	4b23      	ldr	r3, [pc, #140]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e30:	4b18      	ldr	r3, [pc, #96]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e54:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <HAL_GPIO_Init+0x304>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	f67f aea2 	bls.w	8003bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3724      	adds	r7, #36	@ 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	e001      	b.n	8003eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed8:	787b      	ldrb	r3, [r7, #1]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ee4:	e003      	b.n	8003eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	619a      	str	r2, [r3, #24]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e12b      	b.n	8004166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fb10 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	@ 0x24
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f60:	f000 fde6 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a81      	ldr	r2, [pc, #516]	@ (8004170 <HAL_I2C_Init+0x274>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d807      	bhi.n	8003f80 <HAL_I2C_Init+0x84>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a80      	ldr	r2, [pc, #512]	@ (8004174 <HAL_I2C_Init+0x278>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bf94      	ite	ls
 8003f78:	2301      	movls	r3, #1
 8003f7a:	2300      	movhi	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e006      	b.n	8003f8e <HAL_I2C_Init+0x92>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a7d      	ldr	r2, [pc, #500]	@ (8004178 <HAL_I2C_Init+0x27c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	bf94      	ite	ls
 8003f88:	2301      	movls	r3, #1
 8003f8a:	2300      	movhi	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0e7      	b.n	8004166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a78      	ldr	r2, [pc, #480]	@ (800417c <HAL_I2C_Init+0x280>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0c9b      	lsrs	r3, r3, #18
 8003fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8004170 <HAL_I2C_Init+0x274>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d802      	bhi.n	8003fd0 <HAL_I2C_Init+0xd4>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	e009      	b.n	8003fe4 <HAL_I2C_Init+0xe8>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	4a69      	ldr	r2, [pc, #420]	@ (8004180 <HAL_I2C_Init+0x284>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ff6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	495c      	ldr	r1, [pc, #368]	@ (8004170 <HAL_I2C_Init+0x274>)
 8004000:	428b      	cmp	r3, r1
 8004002:	d819      	bhi.n	8004038 <HAL_I2C_Init+0x13c>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e59      	subs	r1, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004018:	400b      	ands	r3, r1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_I2C_Init+0x138>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1e59      	subs	r1, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fbb1 f3f3 	udiv	r3, r1, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004032:	e051      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 8004034:	2304      	movs	r3, #4
 8004036:	e04f      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d111      	bne.n	8004064 <HAL_I2C_Init+0x168>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e012      	b.n	800408a <HAL_I2C_Init+0x18e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e58      	subs	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	0099      	lsls	r1, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	fbb0 f3f3 	udiv	r3, r0, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Init+0x196>
 800408e:	2301      	movs	r3, #1
 8004090:	e022      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <HAL_I2C_Init+0x1bc>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e58      	subs	r0, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040b6:	e00f      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	0099      	lsls	r1, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	6809      	ldr	r1, [r1, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004106:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6911      	ldr	r1, [r2, #16]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68d2      	ldr	r2, [r2, #12]
 8004112:	4311      	orrs	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	430b      	orrs	r3, r1
 800411a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	000186a0 	.word	0x000186a0
 8004174:	001e847f 	.word	0x001e847f
 8004178:	003d08ff 	.word	0x003d08ff
 800417c:	431bde83 	.word	0x431bde83
 8004180:	10624dd3 	.word	0x10624dd3

08004184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e267      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a2:	4b88      	ldr	r3, [pc, #544]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b85      	ldr	r3, [pc, #532]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b82      	ldr	r3, [pc, #520]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e242      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x74>
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b70      	ldr	r3, [pc, #448]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6c      	ldr	r2, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 800421c:	4b69      	ldr	r3, [pc, #420]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fa42 	bl	80026c4 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fa3e 	bl	80026c4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	@ 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e207      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b5b      	ldr	r3, [pc, #364]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xc0>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fe fa2e 	bl	80026c4 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe fa2a 	bl	80026c4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	@ 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1f3      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b51      	ldr	r3, [pc, #324]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d063      	beq.n	8004362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b44      	ldr	r3, [pc, #272]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1c7      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4937      	ldr	r1, [pc, #220]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b34      	ldr	r3, [pc, #208]	@ (80043c8 <HAL_RCC_OscConfig+0x244>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fe f9e3 	bl	80026c4 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7fe f9df 	bl	80026c4 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1a8      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4925      	ldr	r1, [pc, #148]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <HAL_RCC_OscConfig+0x244>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe f9c2 	bl	80026c4 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004344:	f7fe f9be 	bl	80026c4 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e187      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <HAL_RCC_OscConfig+0x248>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe f9a2 	bl	80026c4 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7fe f99e 	bl	80026c4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e167      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x200>
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_OscConfig+0x248>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fe f98b 	bl	80026c4 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00e      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fe f987 	bl	80026c4 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d907      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e150      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8097 	beq.w	8004518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b81      	ldr	r3, [pc, #516]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b7d      	ldr	r3, [pc, #500]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	4a7c      	ldr	r2, [pc, #496]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	@ 0x40
 800440a:	4b7a      	ldr	r3, [pc, #488]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b77      	ldr	r3, [pc, #476]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b74      	ldr	r3, [pc, #464]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fe f947 	bl	80026c4 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fe f943 	bl	80026c4 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b6a      	ldr	r3, [pc, #424]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x2ea>
 8004460:	4b64      	ldr	r3, [pc, #400]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004464:	4a63      	ldr	r2, [pc, #396]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x30c>
 8004476:	4b5f      	ldr	r3, [pc, #380]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	4a5e      	ldr	r2, [pc, #376]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	@ 0x70
 8004482:	4b5c      	ldr	r3, [pc, #368]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a5b      	ldr	r2, [pc, #364]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 8004490:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	@ 0x70
 800449c:	4b55      	ldr	r3, [pc, #340]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	4a54      	ldr	r2, [pc, #336]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f023 0304 	bic.w	r3, r3, #4
 80044a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fe f908 	bl	80026c4 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f904 	bl	80026c4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0cb      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b49      	ldr	r3, [pc, #292]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCC_OscConfig+0x334>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fe f8f2 	bl	80026c4 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fe f8ee 	bl	80026c4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0b5      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	4b3e      	ldr	r3, [pc, #248]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ee      	bne.n	80044e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	4a38      	ldr	r2, [pc, #224]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a1 	beq.w	8004664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004522:	4b34      	ldr	r3, [pc, #208]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d05c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d141      	bne.n	80045ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe f8c2 	bl	80026c4 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe f8be 	bl	80026c4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e087      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	491b      	ldr	r1, [pc, #108]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b1b      	ldr	r3, [pc, #108]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fe f897 	bl	80026c4 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459a:	f7fe f893 	bl	80026c4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e05c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x416>
 80045b8:	e054      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe f880 	bl	80026c4 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe f87c 	bl	80026c4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e045      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
 80045e6:	e03d      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e038      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <HAL_RCC_OscConfig+0x4ec>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d028      	beq.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d121      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	3b01      	subs	r3, #1
 800464a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cc      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b68      	ldr	r3, [pc, #416]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90c      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b65      	ldr	r3, [pc, #404]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a58      	ldr	r2, [pc, #352]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a52      	ldr	r2, [pc, #328]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472e:	2b03      	cmp	r3, #3
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b3f      	ldr	r3, [pc, #252]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e067      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b37      	ldr	r3, [pc, #220]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4934      	ldr	r1, [pc, #208]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fd ffae 	bl	80026c4 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fd ffaa 	bl	80026c4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b25      	ldr	r3, [pc, #148]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20c      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b22      	ldr	r3, [pc, #136]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f889 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	@ (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd ff0e 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	0800df6c 	.word	0x0800df6c
 8004838:	20000000 	.word	0x20000000
 800483c:	20000004 	.word	0x20000004

08004840 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	@ 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d129      	bne.n	80048a6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6313      	str	r3, [r2, #48]	@ 0x30
 8004862:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800486e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004878:	2303      	movs	r3, #3
 800487a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004884:	f107 031c 	add.w	r3, r7, #28
 8004888:	4619      	mov	r1, r3
 800488a:	481f      	ldr	r0, [pc, #124]	@ (8004908 <HAL_RCC_MCOConfig+0xc8>)
 800488c:	f7ff f980 	bl	8003b90 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004890:	4b1c      	ldr	r3, [pc, #112]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	430b      	orrs	r3, r1
 800489e:	4919      	ldr	r1, [pc, #100]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80048a4:	e029      	b.n	80048fa <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	4a15      	ldr	r2, [pc, #84]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048b6:	4b13      	ldr	r3, [pc, #76]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80048c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048cc:	2303      	movs	r3, #3
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	4619      	mov	r1, r3
 80048de:	480b      	ldr	r0, [pc, #44]	@ (800490c <HAL_RCC_MCOConfig+0xcc>)
 80048e0:	f7ff f956 	bl	8003b90 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80048e4:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	00d9      	lsls	r1, r3, #3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	430b      	orrs	r3, r1
 80048f4:	4903      	ldr	r1, [pc, #12]	@ (8004904 <HAL_RCC_MCOConfig+0xc4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
}
 80048fa:	bf00      	nop
 80048fc:	3730      	adds	r7, #48	@ 0x30
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	40020000 	.word	0x40020000
 800490c:	40020800 	.word	0x40020800

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b094      	sub	sp, #80	@ 0x50
 8004916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
 800491c:	2300      	movs	r3, #0
 800491e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004920:	2300      	movs	r3, #0
 8004922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004928:	4b79      	ldr	r3, [pc, #484]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	d00d      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x40>
 8004934:	2b08      	cmp	r3, #8
 8004936:	f200 80e1 	bhi.w	8004afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x34>
 800493e:	2b04      	cmp	r3, #4
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x3a>
 8004942:	e0db      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004948:	e0db      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494a:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 800494c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494e:	e0d8      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004950:	4b6f      	ldr	r3, [pc, #444]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	2200      	movs	r2, #0
 800496e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
 800497e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004982:	4622      	mov	r2, r4
 8004984:	462b      	mov	r3, r5
 8004986:	f04f 0000 	mov.w	r0, #0
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	0159      	lsls	r1, r3, #5
 8004990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004994:	0150      	lsls	r0, r2, #5
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4621      	mov	r1, r4
 800499c:	1a51      	subs	r1, r2, r1
 800499e:	6139      	str	r1, [r7, #16]
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb63 0301 	sbc.w	r3, r3, r1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b4:	4659      	mov	r1, fp
 80049b6:	018b      	lsls	r3, r1, #6
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049be:	4651      	mov	r1, sl
 80049c0:	018a      	lsls	r2, r1, #6
 80049c2:	4651      	mov	r1, sl
 80049c4:	ebb2 0801 	subs.w	r8, r2, r1
 80049c8:	4659      	mov	r1, fp
 80049ca:	eb63 0901 	sbc.w	r9, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e2:	4690      	mov	r8, r2
 80049e4:	4699      	mov	r9, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb18 0303 	adds.w	r3, r8, r3
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	462b      	mov	r3, r5
 80049f0:	eb49 0303 	adc.w	r3, r9, r3
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a02:	4629      	mov	r1, r5
 8004a04:	028b      	lsls	r3, r1, #10
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	028a      	lsls	r2, r1, #10
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a16:	2200      	movs	r2, #0
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a20:	f7fc f93a 	bl	8000c98 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2c:	e058      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b38      	ldr	r3, [pc, #224]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	2200      	movs	r2, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	4611      	mov	r1, r2
 8004a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	f04f 0100 	mov.w	r1, #0
 8004a54:	0159      	lsls	r1, r3, #5
 8004a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a5a:	0150      	lsls	r0, r2, #5
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4641      	mov	r1, r8
 8004a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a80:	ebb2 040a 	subs.w	r4, r2, sl
 8004a84:	eb63 050b 	sbc.w	r5, r3, fp
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	00eb      	lsls	r3, r5, #3
 8004a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a96:	00e2      	lsls	r2, r4, #3
 8004a98:	4614      	mov	r4, r2
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	4643      	mov	r3, r8
 8004a9e:	18e3      	adds	r3, r4, r3
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	eb45 0303 	adc.w	r3, r5, r3
 8004aa8:	607b      	str	r3, [r7, #4]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	028b      	lsls	r3, r1, #10
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	028a      	lsls	r2, r1, #10
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	61fa      	str	r2, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	f7fc f8e0 	bl	8000c98 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	3301      	adds	r3, #1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afa:	e002      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3750      	adds	r7, #80	@ 0x50
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400

08004b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000000 	.word	0x20000000

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	0800df7c 	.word	0x0800df7c

08004b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b5c:	f7ff ffdc 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	0b5b      	lsrs	r3, r3, #13
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4903      	ldr	r1, [pc, #12]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	0800df7c 	.word	0x0800df7c

08004b80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d035      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ba8:	4b67      	ldr	r3, [pc, #412]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bae:	f7fd fd89 	bl	80026c4 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bb6:	f7fd fd85 	bl	80026c4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0ba      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc8:	4b60      	ldr	r3, [pc, #384]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	019a      	lsls	r2, r3, #6
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	071b      	lsls	r3, r3, #28
 8004be0:	495a      	ldr	r1, [pc, #360]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004be8:	4b57      	ldr	r3, [pc, #348]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bee:	f7fd fd69 	bl	80026c4 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bf6:	f7fd fd65 	bl	80026c4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e09a      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c08:	4b50      	ldr	r3, [pc, #320]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8083 	beq.w	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b49      	ldr	r3, [pc, #292]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	4a48      	ldr	r2, [pc, #288]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c32:	4b46      	ldr	r3, [pc, #280]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c3e:	4b44      	ldr	r3, [pc, #272]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4a:	f7fd fd3b 	bl	80026c4 <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c52:	f7fd fd37 	bl	80026c4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e06c      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c64:	4b3a      	ldr	r3, [pc, #232]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02f      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d028      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c98:	4b2e      	ldr	r3, [pc, #184]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ca4:	4a29      	ldr	r2, [pc, #164]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004caa:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d114      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fd fd05 	bl	80026c4 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fd fd01 	bl	80026c4 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e034      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ee      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cec:	d10d      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cee:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d02:	4912      	ldr	r1, [pc, #72]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]
 8004d08:	e005      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d0a:	4b10      	ldr	r3, [pc, #64]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d14:	6093      	str	r3, [r2, #8]
 8004d16:	4b0d      	ldr	r3, [pc, #52]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	490a      	ldr	r1, [pc, #40]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7c1a      	ldrb	r2, [r3, #16]
 8004d38:	4b07      	ldr	r3, [pc, #28]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d3a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	42470068 	.word	0x42470068
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42470e40 	.word	0x42470e40
 8004d58:	424711e0 	.word	0x424711e0

08004d5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e073      	b.n	8004e5a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7f5b      	ldrb	r3, [r3, #29]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc fde2 	bl	800194c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d055      	beq.n	8004e48 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	22ca      	movs	r2, #202	@ 0xca
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2253      	movs	r2, #83	@ 0x53
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f99d 	bl	80050ec <RTC_EnterInitMode>
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d12c      	bne.n	8004e16 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6899      	ldr	r1, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6919      	ldr	r1, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	041a      	lsls	r2, r3, #16
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f9a4 	bl	800515a <RTC_ExitInitMode>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d110      	bne.n	8004e3e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	22ff      	movs	r2, #255	@ 0xff
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e46:	e001      	b.n	8004e4c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e62:	b590      	push	{r4, r7, lr}
 8004e64:	b087      	sub	sp, #28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	7f1b      	ldrb	r3, [r3, #28]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_RTC_SetTime+0x1c>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e087      	b.n	8004f8e <HAL_RTC_SetTime+0x12c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2202      	movs	r2, #2
 8004e88:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d126      	bne.n	8004ede <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f97b 	bl	80051a4 <RTC_ByteToBcd2>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f974 	bl	80051a4 <RTC_ByteToBcd2>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ec0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	789b      	ldrb	r3, [r3, #2]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f96c 	bl	80051a4 <RTC_ByteToBcd2>
 8004ecc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ece:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e018      	b.n	8004f10 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004efe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f04:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	78db      	ldrb	r3, [r3, #3]
 8004f0a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	22ca      	movs	r2, #202	@ 0xca
 8004f16:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2253      	movs	r2, #83	@ 0x53
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f8e3 	bl	80050ec <RTC_EnterInitMode>
 8004f26:	4603      	mov	r3, r0
 8004f28:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d120      	bne.n	8004f72 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004f3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f8f6 	bl	800515a <RTC_ExitInitMode>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	22ff      	movs	r2, #255	@ 0xff
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]

  return status;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}

08004f96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f96:	b590      	push	{r4, r7, lr}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7f1b      	ldrb	r3, [r3, #28]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_RTC_SetDate+0x1c>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e071      	b.n	8005096 <HAL_RTC_SetDate+0x100>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_RTC_SetDate+0x4c>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	330a      	adds	r3, #10
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11c      	bne.n	8005022 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	78db      	ldrb	r3, [r3, #3]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f8d9 	bl	80051a4 <RTC_ByteToBcd2>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f8d2 	bl	80051a4 <RTC_ByteToBcd2>
 8005000:	4603      	mov	r3, r0
 8005002:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005004:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	789b      	ldrb	r3, [r3, #2]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f8ca 	bl	80051a4 <RTC_ByteToBcd2>
 8005010:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005012:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e00e      	b.n	8005040 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	78db      	ldrb	r3, [r3, #3]
 8005026:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800502e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005034:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	22ca      	movs	r2, #202	@ 0xca
 8005046:	625a      	str	r2, [r3, #36]	@ 0x24
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2253      	movs	r2, #83	@ 0x53
 800504e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f84b 	bl	80050ec <RTC_EnterInitMode>
 8005056:	4603      	mov	r3, r0
 8005058:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800505a:	7cfb      	ldrb	r3, [r7, #19]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10c      	bne.n	800507a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800506a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800506e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f872 	bl	800515a <RTC_ExitInitMode>
 8005076:	4603      	mov	r3, r0
 8005078:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	22ff      	movs	r2, #255	@ 0xff
 800508c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]

  return status;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
}
 8005096:	4618      	mov	r0, r3
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd90      	pop	{r4, r7, pc}
	...

080050a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0d      	ldr	r2, [pc, #52]	@ (80050e8 <HAL_RTC_WaitForSynchro+0x48>)
 80050b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050b4:	f7fd fb06 	bl	80026c4 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050ba:	e009      	b.n	80050d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050bc:	f7fd fb02 	bl	80026c4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050ca:	d901      	bls.n	80050d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e007      	b.n	80050e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	00013f5f 	.word	0x00013f5f

080050ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d122      	bne.n	8005150 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005118:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800511a:	f7fd fad3 	bl	80026c4 <HAL_GetTick>
 800511e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005120:	e00c      	b.n	800513c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005122:	f7fd facf 	bl	80026c4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005130:	d904      	bls.n	800513c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <RTC_EnterInitMode+0x64>
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d1e8      	bne.n	8005122 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005174:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ff8b 	bl	80050a0 <HAL_RTC_WaitForSynchro>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2204      	movs	r2, #4
 8005194:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80051b2:	e005      	b.n	80051c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	3b0a      	subs	r3, #10
 80051be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	d8f6      	bhi.n	80051b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b2db      	uxtb	r3, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_RTCEx_SetTamper>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7f1b      	ldrb	r3, [r3, #28]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_RTCEx_SetTamper+0x1a>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e049      	b.n	800528e <HAL_RTCEx_SetTamper+0xae>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	775a      	strb	r2, [r3, #29]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAFCR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d106      	bne.n	800522e <HAL_RTCEx_SetTamper+0x4e>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e006      	b.n	800523c <HAL_RTCEx_SetTamper+0x5c>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	43db      	mvns	r3, r3
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8005242:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8005246:	60fb      	str	r3, [r7, #12]
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TAFCR_TAMP1INSEL               | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
             (uint32_t)sTamper->SamplingFrequency | \
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8005250:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8005256:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
             (uint32_t)sTamper->PrechargeDuration | \
 800525c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PinSelection      | \
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
             (uint32_t)sTamper->TamperPullUp      | \
 8005262:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->PinSelection      | \
 8005268:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

  /* Disable tamper global interrupt in case it is enabled */
  tmpreg &= (uint32_t)~RTC_TAFCR_TAMPIE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAFCR = tmpreg;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e022      	b.n	80052f2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fc fb98 	bl	80019f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2203      	movs	r2, #3
 80052c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f815 	bl	80052fc <HAL_SD_InitCard>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e00a      	b.n	80052f2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052fc:	b5b0      	push	{r4, r5, r7, lr}
 80052fe:	b08e      	sub	sp, #56	@ 0x38
 8005300:	af04      	add	r7, sp, #16
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005314:	2300      	movs	r3, #0
 8005316:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005318:	2376      	movs	r3, #118	@ 0x76
 800531a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681d      	ldr	r5, [r3, #0]
 8005320:	466c      	mov	r4, sp
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800532a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005334:	4628      	mov	r0, r5
 8005336:	f003 fa2d 	bl	8008794 <SDIO_Init>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04f      	b.n	80053ec <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800534c:	4b29      	ldr	r3, [pc, #164]	@ (80053f4 <HAL_SD_InitCard+0xf8>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f003 fa65 	bl	8008826 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800535c:	4b25      	ldr	r3, [pc, #148]	@ (80053f4 <HAL_SD_InitCard+0xf8>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005362:	2002      	movs	r0, #2
 8005364:	f7fd f9ba 	bl	80026dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 f805 	bl	8006378 <SD_PowerON>
 800536e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e02e      	b.n	80053ec <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 ff24 	bl	80061dc <SD_InitCard>
 8005394:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e01b      	b.n	80053ec <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80053bc:	4618      	mov	r0, r3
 80053be:	f003 fac4 	bl	800894a <SDMMC_CmdBlockLength>
 80053c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a0a      	ldr	r2, [pc, #40]	@ (80053f8 <HAL_SD_InitCard+0xfc>)
 80053d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	@ 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bdb0      	pop	{r4, r5, r7, pc}
 80053f4:	422580a0 	.word	0x422580a0
 80053f8:	004005ff 	.word	0x004005ff

080053fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	@ 0x30
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0c0      	b.n	80055a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 80b9 	bne.w	80055a4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	441a      	add	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005442:	429a      	cmp	r2, r3
 8005444:	d907      	bls.n	8005456 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e0a7      	b.n	80055a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2203      	movs	r2, #3
 800545a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	4a4c      	ldr	r2, [pc, #304]	@ (80055b0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	4a4b      	ldr	r2, [pc, #300]	@ (80055b4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005488:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	2200      	movs	r2, #0
 8005490:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	2200      	movs	r2, #0
 8005498:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3380      	adds	r3, #128	@ 0x80
 80054c0:	4619      	mov	r1, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	025b      	lsls	r3, r3, #9
 80054c8:	089b      	lsrs	r3, r3, #2
 80054ca:	f7fe f801 	bl	80034d0 <HAL_DMA_Start_IT>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d017      	beq.n	8005504 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80054e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a33      	ldr	r2, [pc, #204]	@ (80055b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80054ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e050      	b.n	80055a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005504:	4b2d      	ldr	r3, [pc, #180]	@ (80055bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550e:	2b01      	cmp	r3, #1
 8005510:	d002      	beq.n	8005518 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	025b      	lsls	r3, r3, #9
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800551c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	025b      	lsls	r3, r3, #9
 8005522:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005524:	2390      	movs	r3, #144	@ 0x90
 8005526:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005528:	2302      	movs	r3, #2
 800552a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800552c:	2300      	movs	r3, #0
 800552e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005530:	2301      	movs	r3, #1
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f107 0210 	add.w	r2, r7, #16
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f003 f9d7 	bl	80088f2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d90a      	bls.n	8005560 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2282      	movs	r2, #130	@ 0x82
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005556:	4618      	mov	r0, r3
 8005558:	f003 fa3b 	bl	80089d2 <SDMMC_CmdReadMultiBlock>
 800555c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800555e:	e009      	b.n	8005574 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2281      	movs	r2, #129	@ 0x81
 8005564:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800556c:	4618      	mov	r0, r3
 800556e:	f003 fa0e 	bl	800898e <SDMMC_CmdReadSingleBlock>
 8005572:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d012      	beq.n	80055a0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0e      	ldr	r2, [pc, #56]	@ (80055b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e002      	b.n	80055a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e000      	b.n	80055a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3730      	adds	r7, #48	@ 0x30
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08005feb 	.word	0x08005feb
 80055b4:	0800605d 	.word	0x0800605d
 80055b8:	004005ff 	.word	0x004005ff
 80055bc:	4225858c 	.word	0x4225858c

080055c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	@ 0x30
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0c5      	b.n	8005774 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 80be 	bne.w	8005772 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005606:	429a      	cmp	r2, r3
 8005608:	d907      	bls.n	800561a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0ac      	b.n	8005774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2203      	movs	r2, #3
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005642:	4a4e      	ldr	r2, [pc, #312]	@ (800577c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8005644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564a:	4a4d      	ldr	r2, [pc, #308]	@ (8005780 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800564c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005652:	2200      	movs	r2, #0
 8005654:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565a:	2b01      	cmp	r3, #1
 800565c:	d002      	beq.n	8005664 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	025b      	lsls	r3, r3, #9
 8005662:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d90a      	bls.n	8005680 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	22a0      	movs	r2, #160	@ 0xa0
 800566e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005676:	4618      	mov	r0, r3
 8005678:	f003 f9ef 	bl	8008a5a <SDMMC_CmdWriteMultiBlock>
 800567c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800567e:	e009      	b.n	8005694 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2290      	movs	r2, #144	@ 0x90
 8005684:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800568c:	4618      	mov	r0, r3
 800568e:	f003 f9c2 	bl	8008a16 <SDMMC_CmdWriteSingleBlock>
 8005692:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d012      	beq.n	80056c0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a39      	ldr	r2, [pc, #228]	@ (8005784 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80056a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e059      	b.n	8005774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80056c0:	4b31      	ldr	r3, [pc, #196]	@ (8005788 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	2240      	movs	r2, #64	@ 0x40
 80056cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3380      	adds	r3, #128	@ 0x80
 80056f6:	461a      	mov	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	025b      	lsls	r3, r3, #9
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	f7fd fee7 	bl	80034d0 <HAL_DMA_Start_IT>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01c      	beq.n	8005742 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8005716:	f023 0302 	bic.w	r3, r3, #2
 800571a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005728:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e018      	b.n	8005774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005746:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	025b      	lsls	r3, r3, #9
 800574c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800574e:	2390      	movs	r3, #144	@ 0x90
 8005750:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005756:	2300      	movs	r3, #0
 8005758:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800575a:	2301      	movs	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f107 0210 	add.w	r2, r7, #16
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f003 f8c2 	bl	80088f2 <SDIO_ConfigData>

      return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3730      	adds	r7, #48	@ 0x30
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	08005fc1 	.word	0x08005fc1
 8005780:	0800605d 	.word	0x0800605d
 8005784:	004005ff 	.word	0x004005ff
 8005788:	4225858c 	.word	0x4225858c

0800578c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_SD_IRQHandler+0x2e>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 f806 	bl	80067c4 <SD_Read_IT>
 80057b8:	e165      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 808f 	beq.w	80058e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80057e2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80057e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d039      	beq.n	8005876 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <HAL_SD_IRQHandler+0x8a>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d011      	beq.n	800583a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f003 f940 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 8005820:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f92f 	bl	8005a98 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005842:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <HAL_SD_IRQHandler+0xda>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f003 fda6 	bl	80093b8 <HAL_SD_RxCpltCallback>
 800586c:	e10b      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f003 fd98 	bl	80093a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005874:	e107      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8102 	beq.w	8005a86 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f003 f905 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 8005896:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8f4 	bl	8005a98 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 80e5 	bne.w	8005a86 <HAL_SD_IRQHandler+0x2fa>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 80df 	bne.w	8005a86 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0208 	bic.w	r2, r2, #8
 80058d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f003 fd5f 	bl	80093a4 <HAL_SD_TxCpltCallback>
}
 80058e6:	e0ce      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_SD_IRQHandler+0x17c>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 ffb0 	bl	8006866 <SD_Write_IT>
 8005906:	e0be      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800590e:	f240 233a 	movw	r3, #570	@ 0x23a
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80b6 	beq.w	8005a86 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	f043 0202 	orr.w	r2, r3, #2
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005946:	f043 0208 	orr.w	r2, r3, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	f043 0210 	orr.w	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	f043 0208 	orr.w	r2, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f240 723a 	movw	r2, #1850	@ 0x73a
 80059a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80059b4:	f023 0302 	bic.w	r3, r3, #2
 80059b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f003 f86e 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 80059c4:	4602      	mov	r2, r0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f855 	bl	8005a98 <HAL_SD_ErrorCallback>
}
 80059ee:	e04a      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d045      	beq.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <HAL_SD_IRQHandler+0x282>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a12:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <HAL_SD_IRQHandler+0x304>)
 8005a14:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fd fe20 	bl	8003660 <HAL_DMA_Abort_IT>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02f      	beq.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb68 	bl	8006100 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a30:	e029      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_SD_IRQHandler+0x2ba>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	4a12      	ldr	r2, [pc, #72]	@ (8005a94 <HAL_SD_IRQHandler+0x308>)
 8005a4c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd fe04 	bl	8003660 <HAL_DMA_Abort_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d013      	beq.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fb83 	bl	800616e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a68:	e00d      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f003 fc86 	bl	8009390 <HAL_SD_AbortCallback>
}
 8005a84:	e7ff      	b.n	8005a86 <HAL_SD_IRQHandler+0x2fa>
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08006101 	.word	0x08006101
 8005a94:	0800616f 	.word	0x0800616f

08005a98 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aba:	0f9b      	lsrs	r3, r3, #30
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac6:	0e9b      	lsrs	r3, r3, #26
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aea:	0c1b      	lsrs	r3, r3, #16
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b0c:	0d1b      	lsrs	r3, r3, #20
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b2a:	0bdb      	lsrs	r3, r3, #15
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b3c:	0b9b      	lsrs	r3, r3, #14
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b60:	0b1b      	lsrs	r3, r3, #12
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2200      	movs	r2, #0
 8005b72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d163      	bne.n	8005c44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b80:	009a      	lsls	r2, r3, #2
 8005b82:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005b8c:	0f92      	lsrs	r2, r2, #30
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b98:	0edb      	lsrs	r3, r3, #27
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005baa:	0e1b      	lsrs	r3, r3, #24
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bbc:	0d5b      	lsrs	r3, r3, #21
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bce:	0c9b      	lsrs	r3, r3, #18
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005be0:	0bdb      	lsrs	r3, r3, #15
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	7e1b      	ldrb	r3, [r3, #24]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	3302      	adds	r3, #2
 8005c04:	2201      	movs	r2, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005c0e:	fb03 f202 	mul.w	r2, r3, r2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	7a1b      	ldrb	r3, [r3, #8]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005c30:	0a52      	lsrs	r2, r2, #9
 8005c32:	fb03 f202 	mul.w	r2, r3, r2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c40:	661a      	str	r2, [r3, #96]	@ 0x60
 8005c42:	e031      	b.n	8005ca8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d11d      	bne.n	8005c88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	3301      	adds	r3, #1
 8005c68:	029a      	lsls	r2, r3, #10
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c7c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	661a      	str	r2, [r3, #96]	@ 0x60
 8005c86:	e00f      	b.n	8005ca8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	@ (8005df0 <HAL_SD_GetCardCSD+0x344>)
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e09d      	b.n	8005de4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cac:	0b9b      	lsrs	r3, r3, #14
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cbe:	09db      	lsrs	r3, r3, #7
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	0fdb      	lsrs	r3, r3, #31
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	0f5b      	lsrs	r3, r3, #29
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfe:	0e9b      	lsrs	r3, r3, #26
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d10:	0d9b      	lsrs	r3, r3, #22
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	0d5b      	lsrs	r3, r3, #21
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	0bdb      	lsrs	r3, r3, #15
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d66:	0b9b      	lsrs	r3, r3, #14
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	0b5b      	lsrs	r3, r3, #13
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8e:	0b1b      	lsrs	r3, r3, #12
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	0a9b      	lsrs	r3, r3, #10
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	004005ff 	.word	0x004005ff

08005df4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e4c:	b5b0      	push	{r4, r5, r7, lr}
 8005e4e:	b08e      	sub	sp, #56	@ 0x38
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2203      	movs	r2, #3
 8005e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d02e      	beq.n	8005eca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e72:	d106      	bne.n	8005e82 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e80:	e029      	b.n	8005ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e88:	d10a      	bne.n	8005ea0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb2a 	bl	80064e4 <SD_WideBus_Enable>
 8005e90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e9e:	e01a      	b.n	8005ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb67 	bl	800657a <SD_WideBus_Disable>
 8005eac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8005eba:	e00c      	b.n	8005ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ec8:	e005      	b.n	8005ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ece:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a26      	ldr	r2, [pc, #152]	@ (8005f7c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005ef4:	e01f      	b.n	8005f36 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681d      	ldr	r5, [r3, #0]
 8005f1c:	466c      	mov	r4, sp
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f30:	4628      	mov	r0, r5
 8005f32:	f002 fc2f 	bl	8008794 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f002 fd03 	bl	800894a <SDMMC_CmdBlockLength>
 8005f44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00c      	beq.n	8005f66 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	@ (8005f7c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	@ 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bdb0      	pop	{r4, r5, r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	004005ff 	.word	0x004005ff

08005f80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f8c:	f107 030c 	add.w	r3, r7, #12
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa7e 	bl	8006494 <SD_SendStatus>
 8005f98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	0a5b      	lsrs	r3, r3, #9
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005fb6:	693b      	ldr	r3, [r7, #16]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffc:	2b82      	cmp	r3, #130	@ 0x82
 8005ffe:	d111      	bne.n	8006024 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f002 fd4b 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 800600a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff fd3a 	bl	8005a98 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0208 	bic.w	r2, r2, #8
 8006032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f240 523a 	movw	r2, #1338	@ 0x53a
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f003 f9b3 	bl	80093b8 <HAL_SD_RxCpltCallback>
#endif
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fd fca4 	bl	80039b8 <HAL_DMA_GetError>
 8006070:	4603      	mov	r3, r0
 8006072:	2b02      	cmp	r3, #2
 8006074:	d03e      	beq.n	80060f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006084:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d002      	beq.n	8006092 <SD_DMAError+0x36>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d12d      	bne.n	80060ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <SD_DMAError+0xa0>)
 8006098:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80060a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff ff62 	bl	8005f80 <HAL_SD_GetCardState>
 80060bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b06      	cmp	r3, #6
 80060c2:	d002      	beq.n	80060ca <SD_DMAError+0x6e>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d10a      	bne.n	80060e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f002 fce6 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 80060d4:	4602      	mov	r2, r0
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	431a      	orrs	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f7ff fcd2 	bl	8005a98 <HAL_SD_ErrorCallback>
#endif
  }
}
 80060f4:	bf00      	nop
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	004005ff 	.word	0x004005ff

08006100 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff ff31 	bl	8005f80 <HAL_SD_GetCardState>
 800611e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d002      	beq.n	800613a <SD_DMATxAbort+0x3a>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d10a      	bne.n	8006150 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f002 fcae 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 8006144:	4602      	mov	r2, r0
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614a:	431a      	orrs	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f003 f919 	bl	8009390 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800615e:	e002      	b.n	8006166 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fc99 	bl	8005a98 <HAL_SD_ErrorCallback>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006184:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fefa 	bl	8005f80 <HAL_SD_GetCardState>
 800618c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b06      	cmp	r3, #6
 80061a0:	d002      	beq.n	80061a8 <SD_DMARxAbort+0x3a>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d10a      	bne.n	80061be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f002 fc77 	bl	8008aa0 <SDMMC_CmdStopTransfer>
 80061b2:	4602      	mov	r2, r0
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f003 f8e2 	bl	8009390 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80061cc:	e002      	b.n	80061d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff fc62 	bl	8005a98 <HAL_SD_ErrorCallback>
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b094      	sub	sp, #80	@ 0x50
 80061e0:	af04      	add	r7, sp, #16
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061e4:	2301      	movs	r3, #1
 80061e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f002 fb28 	bl	8008842 <SDIO_GetPowerState>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80061fc:	e0b8      	b.n	8006370 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	2b03      	cmp	r3, #3
 8006204:	d02f      	beq.n	8006266 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f002 fd52 	bl	8008cb4 <SDMMC_CmdSendCID>
 8006210:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <SD_InitCard+0x40>
    {
      return errorstate;
 8006218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621a:	e0a9      	b.n	8006370 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f002 fb52 	bl	80088cc <SDIO_GetResponse>
 8006228:	4602      	mov	r2, r0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2104      	movs	r1, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f002 fb49 	bl	80088cc <SDIO_GetResponse>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2108      	movs	r1, #8
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fb40 	bl	80088cc <SDIO_GetResponse>
 800624c:	4602      	mov	r2, r0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	210c      	movs	r1, #12
 8006258:	4618      	mov	r0, r3
 800625a:	f002 fb37 	bl	80088cc <SDIO_GetResponse>
 800625e:	4602      	mov	r2, r0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626a:	2b03      	cmp	r3, #3
 800626c:	d00d      	beq.n	800628a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f107 020e 	add.w	r2, r7, #14
 8006276:	4611      	mov	r1, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f002 fd58 	bl	8008d2e <SDMMC_CmdSetRelAdd>
 800627e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <SD_InitCard+0xae>
    {
      return errorstate;
 8006286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006288:	e072      	b.n	8006370 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628e:	2b03      	cmp	r3, #3
 8006290:	d036      	beq.n	8006300 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006292:	89fb      	ldrh	r3, [r7, #14]
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f002 fd22 	bl	8008cf0 <SDMMC_CmdSendCSD>
 80062ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80062b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b6:	e05b      	b.n	8006370 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f002 fb04 	bl	80088cc <SDIO_GetResponse>
 80062c4:	4602      	mov	r2, r0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2104      	movs	r1, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f002 fafb 	bl	80088cc <SDIO_GetResponse>
 80062d6:	4602      	mov	r2, r0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2108      	movs	r1, #8
 80062e2:	4618      	mov	r0, r3
 80062e4:	f002 faf2 	bl	80088cc <SDIO_GetResponse>
 80062e8:	4602      	mov	r2, r0
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	210c      	movs	r1, #12
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 fae9 	bl	80088cc <SDIO_GetResponse>
 80062fa:	4602      	mov	r2, r0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2104      	movs	r1, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f002 fae0 	bl	80088cc <SDIO_GetResponse>
 800630c:	4603      	mov	r3, r0
 800630e:	0d1a      	lsrs	r2, r3, #20
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006314:	f107 0310 	add.w	r3, r7, #16
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fbc6 	bl	8005aac <HAL_SD_GetCardCSD>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006326:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800632a:	e021      	b.n	8006370 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	2200      	movs	r2, #0
 8006338:	461c      	mov	r4, r3
 800633a:	4615      	mov	r5, r2
 800633c:	4622      	mov	r2, r4
 800633e:	462b      	mov	r3, r5
 8006340:	4608      	mov	r0, r1
 8006342:	f002 fbcf 	bl	8008ae4 <SDMMC_CmdSelDesel>
 8006346:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <SD_InitCard+0x176>
  {
    return errorstate;
 800634e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006350:	e00e      	b.n	8006370 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681d      	ldr	r5, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	466c      	mov	r4, sp
 800635a:	f103 0210 	add.w	r2, r3, #16
 800635e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006364:	3304      	adds	r3, #4
 8006366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006368:	4628      	mov	r0, r5
 800636a:	f002 fa13 	bl	8008794 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3740      	adds	r7, #64	@ 0x40
 8006374:	46bd      	mov	sp, r7
 8006376:	bdb0      	pop	{r4, r5, r7, pc}

08006378 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f002 fbca 	bl	8008b2a <SDMMC_CmdGoIdleState>
 8006396:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	e072      	b.n	8006488 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f002 fbdd 	bl	8008b66 <SDMMC_CmdOperCond>
 80063ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00d      	beq.n	80063d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f002 fbb3 	bl	8008b2a <SDMMC_CmdGoIdleState>
 80063c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	e05b      	b.n	8006488 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d137      	bne.n	800644e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f002 fbdd 	bl	8008ba4 <SDMMC_CmdAppCommand>
 80063ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d02d      	beq.n	800644e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80063f6:	e047      	b.n	8006488 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f002 fbd0 	bl	8008ba4 <SDMMC_CmdAppCommand>
 8006404:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <SD_PowerON+0x98>
    {
      return errorstate;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	e03b      	b.n	8006488 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	491e      	ldr	r1, [pc, #120]	@ (8006490 <SD_PowerON+0x118>)
 8006416:	4618      	mov	r0, r3
 8006418:	f002 fbe6 	bl	8008be8 <SDMMC_CmdAppOperCommand>
 800641c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006424:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006428:	e02e      	b.n	8006488 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f002 fa4b 	bl	80088cc <SDIO_GetResponse>
 8006436:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	0fdb      	lsrs	r3, r3, #31
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <SD_PowerON+0xcc>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <SD_PowerON+0xce>
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]

    count++;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3301      	adds	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006454:	4293      	cmp	r3, r2
 8006456:	d802      	bhi.n	800645e <SD_PowerON+0xe6>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0cc      	beq.n	80063f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006464:	4293      	cmp	r3, r2
 8006466:	d902      	bls.n	800646e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800646c:	e00c      	b.n	8006488 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	645a      	str	r2, [r3, #68]	@ 0x44
 800647e:	e002      	b.n	8006486 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	c1100000 	.word	0xc1100000

08006494 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80064a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064a8:	e018      	b.n	80064dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b2:	041b      	lsls	r3, r3, #16
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f002 fc5a 	bl	8008d70 <SDMMC_CmdSendStatus>
 80064bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	e009      	b.n	80064dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f002 f9fc 	bl	80088cc <SDIO_GetResponse>
 80064d4:	4602      	mov	r2, r0
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	2300      	movs	r3, #0
 80064f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f002 f9e6 	bl	80088cc <SDIO_GetResponse>
 8006500:	4603      	mov	r3, r0
 8006502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800650a:	d102      	bne.n	8006512 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800650c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006510:	e02f      	b.n	8006572 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006512:	f107 030c 	add.w	r3, r7, #12
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f879 	bl	8006610 <SD_FindSCR>
 800651e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	e023      	b.n	8006572 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01c      	beq.n	800656e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f002 fb2f 	bl	8008ba4 <SDMMC_CmdAppCommand>
 8006546:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	e00f      	b.n	8006572 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2102      	movs	r1, #2
 8006558:	4618      	mov	r0, r3
 800655a:	f002 fb68 	bl	8008c2e <SDMMC_CmdBusWidth>
 800655e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	e003      	b.n	8006572 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800656a:	2300      	movs	r3, #0
 800656c:	e001      	b.n	8006572 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800656e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b086      	sub	sp, #24
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f99b 	bl	80088cc <SDIO_GetResponse>
 8006596:	4603      	mov	r3, r0
 8006598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065a0:	d102      	bne.n	80065a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80065a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065a6:	e02f      	b.n	8006608 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f82e 	bl	8006610 <SD_FindSCR>
 80065b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	e023      	b.n	8006608 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01c      	beq.n	8006604 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f002 fae4 	bl	8008ba4 <SDMMC_CmdAppCommand>
 80065dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	e00f      	b.n	8006608 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f002 fb1d 	bl	8008c2e <SDMMC_CmdBusWidth>
 80065f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	e003      	b.n	8006608 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006600:	2300      	movs	r3, #0
 8006602:	e001      	b.n	8006608 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006604:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b08f      	sub	sp, #60	@ 0x3c
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800661a:	f7fc f853 	bl	80026c4 <HAL_GetTick>
 800661e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006624:	2300      	movs	r3, #0
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2108      	movs	r1, #8
 8006636:	4618      	mov	r0, r3
 8006638:	f002 f987 	bl	800894a <SDMMC_CmdBlockLength>
 800663c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	e0b9      	b.n	80067bc <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f002 faa5 	bl	8008ba4 <SDMMC_CmdAppCommand>
 800665a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	e0aa      	b.n	80067bc <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800666a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800666c:	2308      	movs	r3, #8
 800666e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006670:	2330      	movs	r3, #48	@ 0x30
 8006672:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006674:	2302      	movs	r3, #2
 8006676:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006678:	2300      	movs	r3, #0
 800667a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800667c:	2301      	movs	r3, #1
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f107 0210 	add.w	r2, r7, #16
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f002 f931 	bl	80088f2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f002 faec 	bl	8008c72 <SDMMC_CmdSendSCR>
 800669a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d02a      	beq.n	80066f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	e08a      	b.n	80067bc <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00f      	beq.n	80066d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6819      	ldr	r1, [r3, #0]
 80066b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f107 0208 	add.w	r2, r7, #8
 80066c0:	18d4      	adds	r4, r2, r3
 80066c2:	4608      	mov	r0, r1
 80066c4:	f002 f891 	bl	80087ea <SDIO_ReadFIFO>
 80066c8:	4603      	mov	r3, r0
 80066ca:	6023      	str	r3, [r4, #0]
      index++;
 80066cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ce:	3301      	adds	r3, #1
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d2:	e006      	b.n	80066e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d012      	beq.n	8006708 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80066e2:	f7fb ffef 	bl	80026c4 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066f0:	d102      	bne.n	80066f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80066f6:	e061      	b.n	80067bc <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fe:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0cf      	beq.n	80066a6 <SD_FindSCR+0x96>
 8006706:	e000      	b.n	800670a <SD_FindSCR+0xfa>
      break;
 8006708:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <SD_FindSCR+0x116>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2208      	movs	r2, #8
 800672c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800672e:	2308      	movs	r3, #8
 8006730:	e044      	b.n	80067bc <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2202      	movs	r2, #2
 8006746:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006748:	2302      	movs	r3, #2
 800674a:	e037      	b.n	80067bc <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2220      	movs	r2, #32
 8006760:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006762:	2320      	movs	r3, #32
 8006764:	e02a      	b.n	80067bc <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800676e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	061a      	lsls	r2, r3, #24
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800677c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006786:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	0e1b      	lsrs	r3, r3, #24
 800678c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800678e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006790:	601a      	str	r2, [r3, #0]
    scr++;
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	3304      	adds	r3, #4
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	061a      	lsls	r2, r3, #24
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	0a1b      	lsrs	r3, r3, #8
 80067aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80067ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	373c      	adds	r7, #60	@ 0x3c
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd90      	pop	{r4, r7, pc}

080067c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d03f      	beq.n	800685e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	e033      	b.n	800684c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 fffe 	bl	80087ea <SDIO_ReadFIFO>
 80067ee:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3b01      	subs	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3b01      	subs	r3, #1
 8006818:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	0c1b      	lsrs	r3, r3, #16
 800681e:	b2da      	uxtb	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	3b01      	subs	r3, #1
 800682e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	0e1b      	lsrs	r3, r3, #24
 8006834:	b2da      	uxtb	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	701a      	strb	r2, [r3, #0]
      tmp++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3b01      	subs	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	3301      	adds	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b07      	cmp	r3, #7
 8006850:	d9c8      	bls.n	80067e4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d043      	beq.n	8006908 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e037      	b.n	80068f6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3b01      	subs	r3, #1
 8006896:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	021a      	lsls	r2, r3, #8
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	041a      	lsls	r2, r3, #16
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	061a      	lsls	r2, r3, #24
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3b01      	subs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 ff8a 	bl	8008804 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	3301      	adds	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	d9c4      	bls.n	8006886 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8006908:	bf00      	nop
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e07b      	b.n	8006a1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d108      	bne.n	800693c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006932:	d009      	beq.n	8006948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	61da      	str	r2, [r3, #28]
 800693a:	e005      	b.n	8006948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fb f96c 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069cc:	ea42 0103 	orr.w	r1, r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	f003 0104 	and.w	r1, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	f003 0210 	and.w	r2, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10e      	bne.n	8006a64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d004      	beq.n	8006a64 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
    return;
 8006a62:	e0ce      	b.n	8006c02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <HAL_SPI_IRQHandler+0x5e>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
    return;
 8006a80:	e0bf      	b.n	8006c02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <HAL_SPI_IRQHandler+0x7e>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d105      	bne.n	8006aa2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80b0 	beq.w	8006c02 <HAL_SPI_IRQHandler+0x1de>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80aa 	beq.w	8006c02 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d023      	beq.n	8006b00 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d011      	beq.n	8006ae8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	f043 0204 	orr.w	r2, r3, #4
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	e00b      	b.n	8006b00 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	693b      	ldr	r3, [r7, #16]
        return;
 8006afe:	e080      	b.n	8006c02 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d014      	beq.n	8006b34 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0e:	f043 0201 	orr.w	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00c      	beq.n	8006b58 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b42:	f043 0208 	orr.w	r2, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d04f      	beq.n	8006c00 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <HAL_SPI_IRQHandler+0x168>
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d034      	beq.n	8006bf6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0203 	bic.w	r2, r2, #3
 8006b9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d011      	beq.n	8006bc8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba8:	4a17      	ldr	r2, [pc, #92]	@ (8006c08 <HAL_SPI_IRQHandler+0x1e4>)
 8006baa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fc fd55 	bl	8003660 <HAL_DMA_Abort_IT>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d016      	beq.n	8006bfe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006c08 <HAL_SPI_IRQHandler+0x1e4>)
 8006bd6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fc fd3f 	bl	8003660 <HAL_DMA_Abort_IT>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006bf4:	e003      	b.n	8006bfe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f808 	bl	8006c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006bfc:	e000      	b.n	8006c00 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006bfe:	bf00      	nop
    return;
 8006c00:	bf00      	nop
  }
}
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	08006c21 	.word	0x08006c21

08006c0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff ffe6 	bl	8006c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e041      	b.n	8006cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb faca 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f000 fb32 	bl	80072f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e041      	b.n	8006d7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d106      	bne.n	8006d12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f839 	bl	8006d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f000 fae3 	bl	80072f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d020      	beq.n	8006dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01b      	beq.n	8006dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0202 	mvn.w	r2, #2
 8006dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa65 	bl	80072b2 <HAL_TIM_IC_CaptureCallback>
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa57 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fa68 	bl	80072c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d020      	beq.n	8006e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01b      	beq.n	8006e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0204 	mvn.w	r2, #4
 8006e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa3f 	bl	80072b2 <HAL_TIM_IC_CaptureCallback>
 8006e34:	e005      	b.n	8006e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa31 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa42 	bl	80072c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d020      	beq.n	8006e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01b      	beq.n	8006e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0208 	mvn.w	r2, #8
 8006e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa19 	bl	80072b2 <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa0b 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa1c 	bl	80072c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d020      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0210 	mvn.w	r2, #16
 8006eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f9f3 	bl	80072b2 <HAL_TIM_IC_CaptureCallback>
 8006ecc:	e005      	b.n	8006eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f9e5 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f9f6 	bl	80072c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0201 	mvn.w	r2, #1
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9c3 	bl	800728a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fd0e 	bl	8007944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9c7 	bl	80072da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00c      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0220 	mvn.w	r2, #32
 8006f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fce0 	bl	8007930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0ae      	b.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b0c      	cmp	r3, #12
 8006fa2:	f200 809f 	bhi.w	80070e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fe1 	.word	0x08006fe1
 8006fb0:	080070e5 	.word	0x080070e5
 8006fb4:	080070e5 	.word	0x080070e5
 8006fb8:	080070e5 	.word	0x080070e5
 8006fbc:	08007021 	.word	0x08007021
 8006fc0:	080070e5 	.word	0x080070e5
 8006fc4:	080070e5 	.word	0x080070e5
 8006fc8:	080070e5 	.word	0x080070e5
 8006fcc:	08007063 	.word	0x08007063
 8006fd0:	080070e5 	.word	0x080070e5
 8006fd4:	080070e5 	.word	0x080070e5
 8006fd8:	080070e5 	.word	0x080070e5
 8006fdc:	080070a3 	.word	0x080070a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fa0e 	bl	8007408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0204 	bic.w	r2, r2, #4
 800700a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6999      	ldr	r1, [r3, #24]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	619a      	str	r2, [r3, #24]
      break;
 800701e:	e064      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fa54 	bl	80074d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800703a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800704a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6999      	ldr	r1, [r3, #24]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	619a      	str	r2, [r3, #24]
      break;
 8007060:	e043      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fa9f 	bl	80075ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0208 	orr.w	r2, r2, #8
 800707c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0204 	bic.w	r2, r2, #4
 800708c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69d9      	ldr	r1, [r3, #28]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	61da      	str	r2, [r3, #28]
      break;
 80070a0:	e023      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fae9 	bl	8007680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69d9      	ldr	r1, [r3, #28]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	021a      	lsls	r2, r3, #8
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	61da      	str	r2, [r3, #28]
      break;
 80070e2:	e002      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_TIM_ConfigClockSource+0x1c>
 8007114:	2302      	movs	r3, #2
 8007116:	e0b4      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x186>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800713e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007150:	d03e      	beq.n	80071d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007156:	f200 8087 	bhi.w	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715e:	f000 8086 	beq.w	800726e <HAL_TIM_ConfigClockSource+0x172>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007166:	d87f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007168:	2b70      	cmp	r3, #112	@ 0x70
 800716a:	d01a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0xa6>
 800716c:	2b70      	cmp	r3, #112	@ 0x70
 800716e:	d87b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007170:	2b60      	cmp	r3, #96	@ 0x60
 8007172:	d050      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x11a>
 8007174:	2b60      	cmp	r3, #96	@ 0x60
 8007176:	d877      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007178:	2b50      	cmp	r3, #80	@ 0x50
 800717a:	d03c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xfa>
 800717c:	2b50      	cmp	r3, #80	@ 0x50
 800717e:	d873      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d058      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x13a>
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	d86f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007188:	2b30      	cmp	r3, #48	@ 0x30
 800718a:	d064      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 800718c:	2b30      	cmp	r3, #48	@ 0x30
 800718e:	d86b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d060      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d867      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05c      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 800719c:	2b10      	cmp	r3, #16
 800719e:	d05a      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 80071a0:	e062      	b.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b2:	f000 fb2f 	bl	8007814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
      break;
 80071ce:	e04f      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e0:	f000 fb18 	bl	8007814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071f2:	609a      	str	r2, [r3, #8]
      break;
 80071f4:	e03c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fa8c 	bl	8007720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2150      	movs	r1, #80	@ 0x50
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fae5 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8007214:	e02c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007222:	461a      	mov	r2, r3
 8007224:	f000 faab 	bl	800777e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2160      	movs	r1, #96	@ 0x60
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fad5 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8007234:	e01c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007242:	461a      	mov	r2, r3
 8007244:	f000 fa6c 	bl	8007720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2140      	movs	r1, #64	@ 0x40
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fac5 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8007254:	e00c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f000 fabc 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 8007266:	e003      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	e000      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800726e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a3a      	ldr	r2, [pc, #232]	@ (80073ec <TIM_Base_SetConfig+0xfc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00f      	beq.n	8007328 <TIM_Base_SetConfig+0x38>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730e:	d00b      	beq.n	8007328 <TIM_Base_SetConfig+0x38>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a37      	ldr	r2, [pc, #220]	@ (80073f0 <TIM_Base_SetConfig+0x100>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <TIM_Base_SetConfig+0x38>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a36      	ldr	r2, [pc, #216]	@ (80073f4 <TIM_Base_SetConfig+0x104>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_Base_SetConfig+0x38>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a35      	ldr	r2, [pc, #212]	@ (80073f8 <TIM_Base_SetConfig+0x108>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d108      	bne.n	800733a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2b      	ldr	r2, [pc, #172]	@ (80073ec <TIM_Base_SetConfig+0xfc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01b      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007348:	d017      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a28      	ldr	r2, [pc, #160]	@ (80073f0 <TIM_Base_SetConfig+0x100>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a27      	ldr	r2, [pc, #156]	@ (80073f4 <TIM_Base_SetConfig+0x104>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00f      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a26      	ldr	r2, [pc, #152]	@ (80073f8 <TIM_Base_SetConfig+0x108>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00b      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a25      	ldr	r2, [pc, #148]	@ (80073fc <TIM_Base_SetConfig+0x10c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a24      	ldr	r2, [pc, #144]	@ (8007400 <TIM_Base_SetConfig+0x110>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_Base_SetConfig+0x8a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a23      	ldr	r2, [pc, #140]	@ (8007404 <TIM_Base_SetConfig+0x114>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d108      	bne.n	800738c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a0e      	ldr	r2, [pc, #56]	@ (80073ec <TIM_Base_SetConfig+0xfc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d103      	bne.n	80073c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d105      	bne.n	80073de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	611a      	str	r2, [r3, #16]
  }
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40014000 	.word	0x40014000
 8007400:	40014400 	.word	0x40014400
 8007404:	40014800 	.word	0x40014800

08007408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f023 0201 	bic.w	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 0302 	bic.w	r3, r3, #2
 8007450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a1c      	ldr	r2, [pc, #112]	@ (80074d0 <TIM_OC1_SetConfig+0xc8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10c      	bne.n	800747e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0308 	bic.w	r3, r3, #8
 800746a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 0304 	bic.w	r3, r3, #4
 800747c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a13      	ldr	r2, [pc, #76]	@ (80074d0 <TIM_OC1_SetConfig+0xc8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d111      	bne.n	80074aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800748c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	621a      	str	r2, [r3, #32]
}
 80074c4:	bf00      	nop
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40010000 	.word	0x40010000

080074d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	f023 0210 	bic.w	r2, r3, #16
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800750a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 0320 	bic.w	r3, r3, #32
 800751e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1e      	ldr	r2, [pc, #120]	@ (80075a8 <TIM_OC2_SetConfig+0xd4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d10d      	bne.n	8007550 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800753a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	4313      	orrs	r3, r2
 8007546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a15      	ldr	r2, [pc, #84]	@ (80075a8 <TIM_OC2_SetConfig+0xd4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d113      	bne.n	8007580 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800755e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000

080075ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	@ (800767c <TIM_OC3_SetConfig+0xd0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10d      	bne.n	8007626 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <TIM_OC3_SetConfig+0xd0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d113      	bne.n	8007656 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800763c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	621a      	str	r2, [r3, #32]
}
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40010000 	.word	0x40010000

08007680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	031b      	lsls	r3, r3, #12
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a10      	ldr	r2, [pc, #64]	@ (800771c <TIM_OC4_SetConfig+0x9c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d109      	bne.n	80076f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	019b      	lsls	r3, r3, #6
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000

08007720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0201 	bic.w	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800774a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f023 030a 	bic.w	r3, r3, #10
 800775c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f023 0210 	bic.w	r2, r3, #16
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	031b      	lsls	r3, r3, #12
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f043 0307 	orr.w	r3, r3, #7
 8007800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800782e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	021a      	lsls	r2, r3, #8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	431a      	orrs	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4313      	orrs	r3, r2
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	609a      	str	r2, [r3, #8]
}
 8007848:	bf00      	nop
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007868:	2302      	movs	r3, #2
 800786a:	e050      	b.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1c      	ldr	r2, [pc, #112]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d018      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b8:	d013      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	@ (8007920 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00e      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a16      	ldr	r2, [pc, #88]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a15      	ldr	r2, [pc, #84]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d004      	beq.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a13      	ldr	r2, [pc, #76]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10c      	bne.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40014000 	.word	0x40014000

08007930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e042      	b.n	80079f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fa fd82 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	@ 0x24
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800799a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc85 	bl	80082ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0ba      	sub	sp, #232	@ 0xe8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <HAL_UART_IRQHandler+0x66>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fb69 	bl	800812e <UART_Receive_IT>
      return;
 8007a5c:	e25b      	b.n	8007f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80de 	beq.w	8007c24 <HAL_UART_IRQHandler+0x22c>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80d1 	beq.w	8007c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_UART_IRQHandler+0xae>
 8007a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9e:	f043 0201 	orr.w	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_UART_IRQHandler+0xd2>
 8007ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac2:	f043 0202 	orr.w	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xf6>
 8007ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	f043 0204 	orr.w	r2, r3, #4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d011      	beq.n	8007b1e <HAL_UART_IRQHandler+0x126>
 8007afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 81f2 	beq.w	8007f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_UART_IRQHandler+0x14e>
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 faf4 	bl	800812e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b50:	2b40      	cmp	r3, #64	@ 0x40
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <HAL_UART_IRQHandler+0x17a>
 8007b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d04f      	beq.n	8007c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f9fc 	bl	8007f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b82:	2b40      	cmp	r3, #64	@ 0x40
 8007b84:	d141      	bne.n	8007c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d9      	bne.n	8007b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d013      	beq.n	8007c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bde:	4a7e      	ldr	r2, [pc, #504]	@ (8007dd8 <HAL_UART_IRQHandler+0x3e0>)
 8007be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fb fd3a 	bl	8003660 <HAL_DMA_Abort_IT>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d016      	beq.n	8007c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e00e      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f99e 	bl	8007f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e00a      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f99a 	bl	8007f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e006      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f996 	bl	8007f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007c1e:	e175      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	bf00      	nop
    return;
 8007c22:	e173      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 814f 	bne.w	8007ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8148 	beq.w	8007ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8141 	beq.w	8007ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6a:	2b40      	cmp	r3, #64	@ 0x40
 8007c6c:	f040 80b6 	bne.w	8007ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8145 	beq.w	8007f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	f080 813e 	bcs.w	8007f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca6:	f000 8088 	beq.w	8007dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1d9      	bne.n	8007caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3314      	adds	r3, #20
 8007cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3314      	adds	r3, #20
 8007d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e1      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3314      	adds	r3, #20
 8007d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e3      	bne.n	8007d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fb fbe3 	bl	8003580 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8c1 	bl	8007f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dd6:	e09b      	b.n	8007f10 <HAL_UART_IRQHandler+0x518>
 8007dd8:	08008037 	.word	0x08008037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 808e 	beq.w	8007f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8089 	beq.w	8007f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	330c      	adds	r3, #12
 8007e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e3      	bne.n	8007e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e3      	bne.n	8007e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ea4:	61fa      	str	r2, [r7, #28]
 8007ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e3      	bne.n	8007e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f847 	bl	8007f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eca:	e023      	b.n	8007f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d009      	beq.n	8007eec <HAL_UART_IRQHandler+0x4f4>
 8007ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8ba 	bl	800805e <UART_Transmit_IT>
    return;
 8007eea:	e014      	b.n	8007f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00e      	beq.n	8007f16 <HAL_UART_IRQHandler+0x51e>
 8007ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8fa 	bl	80080fe <UART_EndTransmit_IT>
    return;
 8007f0a:	e004      	b.n	8007f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8007f0c:	bf00      	nop
 8007f0e:	e002      	b.n	8007f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f10:	bf00      	nop
 8007f12:	e000      	b.n	8007f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f14:	bf00      	nop
  }
}
 8007f16:	37e8      	adds	r7, #232	@ 0xe8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b095      	sub	sp, #84	@ 0x54
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f98:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e5      	bne.n	8007f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e5      	bne.n	8007fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d119      	bne.n	800801c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008008:	61ba      	str	r2, [r7, #24]
 800800a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6979      	ldr	r1, [r7, #20]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	613b      	str	r3, [r7, #16]
   return(result);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e5      	bne.n	8007fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800802a:	bf00      	nop
 800802c:	3754      	adds	r7, #84	@ 0x54
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ff77 	bl	8007f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b21      	cmp	r3, #33	@ 0x21
 8008070:	d13e      	bne.n	80080f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800807a:	d114      	bne.n	80080a6 <UART_Transmit_IT+0x48>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d110      	bne.n	80080a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	1c9a      	adds	r2, r3, #2
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	621a      	str	r2, [r3, #32]
 80080a4:	e008      	b.n	80080b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	1c59      	adds	r1, r3, #1
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	6211      	str	r1, [r2, #32]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4619      	mov	r1, r3
 80080c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10f      	bne.n	80080ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	e000      	b.n	80080f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080f0:	2302      	movs	r3, #2
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fefc 	bl	8007f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b08c      	sub	sp, #48	@ 0x30
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b22      	cmp	r3, #34	@ 0x22
 8008140:	f040 80ae 	bne.w	80082a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800814c:	d117      	bne.n	800817e <UART_Receive_IT+0x50>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d113      	bne.n	800817e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816c:	b29a      	uxth	r2, r3
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008176:	1c9a      	adds	r2, r3, #2
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	629a      	str	r2, [r3, #40]	@ 0x28
 800817c:	e026      	b.n	80081cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008182:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008184:	2300      	movs	r3, #0
 8008186:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008190:	d007      	beq.n	80081a2 <UART_Receive_IT+0x74>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <UART_Receive_IT+0x82>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e008      	b.n	80081c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4619      	mov	r1, r3
 80081da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d15d      	bne.n	800829c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68da      	ldr	r2, [r3, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0220 	bic.w	r2, r2, #32
 80081ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0201 	bic.w	r2, r2, #1
 800820e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008222:	2b01      	cmp	r3, #1
 8008224:	d135      	bne.n	8008292 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	613b      	str	r3, [r7, #16]
   return(result);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f023 0310 	bic.w	r3, r3, #16
 8008242:	627b      	str	r3, [r7, #36]	@ 0x24
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	330c      	adds	r3, #12
 800824a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824c:	623a      	str	r2, [r7, #32]
 800824e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	69f9      	ldr	r1, [r7, #28]
 8008252:	6a3a      	ldr	r2, [r7, #32]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	61bb      	str	r3, [r7, #24]
   return(result);
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0310 	and.w	r3, r3, #16
 800826a:	2b10      	cmp	r3, #16
 800826c:	d10a      	bne.n	8008284 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800826e:	2300      	movs	r3, #0
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff fe64 	bl	8007f58 <HAL_UARTEx_RxEventCallback>
 8008290:	e002      	b.n	8008298 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff fe4c 	bl	8007f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	e002      	b.n	80082a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3730      	adds	r7, #48	@ 0x30
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b0:	b0c0      	sub	sp, #256	@ 0x100
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c8:	68d9      	ldr	r1, [r3, #12]
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	ea40 0301 	orr.w	r3, r0, r1
 80082d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	431a      	orrs	r2, r3
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008304:	f021 010c 	bic.w	r1, r1, #12
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008312:	430b      	orrs	r3, r1
 8008314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008326:	6999      	ldr	r1, [r3, #24]
 8008328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	ea40 0301 	orr.w	r3, r0, r1
 8008332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4b8f      	ldr	r3, [pc, #572]	@ (8008578 <UART_SetConfig+0x2cc>)
 800833c:	429a      	cmp	r2, r3
 800833e:	d005      	beq.n	800834c <UART_SetConfig+0xa0>
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4b8d      	ldr	r3, [pc, #564]	@ (800857c <UART_SetConfig+0x2d0>)
 8008348:	429a      	cmp	r2, r3
 800834a:	d104      	bne.n	8008356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800834c:	f7fc fc04 	bl	8004b58 <HAL_RCC_GetPCLK2Freq>
 8008350:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008354:	e003      	b.n	800835e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008356:	f7fc fbeb 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 800835a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008368:	f040 810c 	bne.w	8008584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800836c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008370:	2200      	movs	r2, #0
 8008372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008376:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800837a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800837e:	4622      	mov	r2, r4
 8008380:	462b      	mov	r3, r5
 8008382:	1891      	adds	r1, r2, r2
 8008384:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008386:	415b      	adcs	r3, r3
 8008388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800838a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800838e:	4621      	mov	r1, r4
 8008390:	eb12 0801 	adds.w	r8, r2, r1
 8008394:	4629      	mov	r1, r5
 8008396:	eb43 0901 	adc.w	r9, r3, r1
 800839a:	f04f 0200 	mov.w	r2, #0
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ae:	4690      	mov	r8, r2
 80083b0:	4699      	mov	r9, r3
 80083b2:	4623      	mov	r3, r4
 80083b4:	eb18 0303 	adds.w	r3, r8, r3
 80083b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083bc:	462b      	mov	r3, r5
 80083be:	eb49 0303 	adc.w	r3, r9, r3
 80083c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80083d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80083da:	460b      	mov	r3, r1
 80083dc:	18db      	adds	r3, r3, r3
 80083de:	653b      	str	r3, [r7, #80]	@ 0x50
 80083e0:	4613      	mov	r3, r2
 80083e2:	eb42 0303 	adc.w	r3, r2, r3
 80083e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80083e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80083ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80083f0:	f7f8 fc52 	bl	8000c98 <__aeabi_uldivmod>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4b61      	ldr	r3, [pc, #388]	@ (8008580 <UART_SetConfig+0x2d4>)
 80083fa:	fba3 2302 	umull	r2, r3, r3, r2
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	011c      	lsls	r4, r3, #4
 8008402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008406:	2200      	movs	r2, #0
 8008408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800840c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	1891      	adds	r1, r2, r2
 800841a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800841c:	415b      	adcs	r3, r3
 800841e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008424:	4641      	mov	r1, r8
 8008426:	eb12 0a01 	adds.w	sl, r2, r1
 800842a:	4649      	mov	r1, r9
 800842c:	eb43 0b01 	adc.w	fp, r3, r1
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800843c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008444:	4692      	mov	sl, r2
 8008446:	469b      	mov	fp, r3
 8008448:	4643      	mov	r3, r8
 800844a:	eb1a 0303 	adds.w	r3, sl, r3
 800844e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008452:	464b      	mov	r3, r9
 8008454:	eb4b 0303 	adc.w	r3, fp, r3
 8008458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008468:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800846c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008470:	460b      	mov	r3, r1
 8008472:	18db      	adds	r3, r3, r3
 8008474:	643b      	str	r3, [r7, #64]	@ 0x40
 8008476:	4613      	mov	r3, r2
 8008478:	eb42 0303 	adc.w	r3, r2, r3
 800847c:	647b      	str	r3, [r7, #68]	@ 0x44
 800847e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008486:	f7f8 fc07 	bl	8000c98 <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4611      	mov	r1, r2
 8008490:	4b3b      	ldr	r3, [pc, #236]	@ (8008580 <UART_SetConfig+0x2d4>)
 8008492:	fba3 2301 	umull	r2, r3, r3, r1
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2264      	movs	r2, #100	@ 0x64
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	1acb      	subs	r3, r1, r3
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80084a6:	4b36      	ldr	r3, [pc, #216]	@ (8008580 <UART_SetConfig+0x2d4>)
 80084a8:	fba3 2302 	umull	r2, r3, r3, r2
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80084b4:	441c      	add	r4, r3
 80084b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80084c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	1891      	adds	r1, r2, r2
 80084ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80084d0:	415b      	adcs	r3, r3
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80084d8:	4641      	mov	r1, r8
 80084da:	1851      	adds	r1, r2, r1
 80084dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80084de:	4649      	mov	r1, r9
 80084e0:	414b      	adcs	r3, r1
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80084f0:	4659      	mov	r1, fp
 80084f2:	00cb      	lsls	r3, r1, #3
 80084f4:	4651      	mov	r1, sl
 80084f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084fa:	4651      	mov	r1, sl
 80084fc:	00ca      	lsls	r2, r1, #3
 80084fe:	4610      	mov	r0, r2
 8008500:	4619      	mov	r1, r3
 8008502:	4603      	mov	r3, r0
 8008504:	4642      	mov	r2, r8
 8008506:	189b      	adds	r3, r3, r2
 8008508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800850c:	464b      	mov	r3, r9
 800850e:	460a      	mov	r2, r1
 8008510:	eb42 0303 	adc.w	r3, r2, r3
 8008514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008524:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800852c:	460b      	mov	r3, r1
 800852e:	18db      	adds	r3, r3, r3
 8008530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008532:	4613      	mov	r3, r2
 8008534:	eb42 0303 	adc.w	r3, r2, r3
 8008538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800853a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800853e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008542:	f7f8 fba9 	bl	8000c98 <__aeabi_uldivmod>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4b0d      	ldr	r3, [pc, #52]	@ (8008580 <UART_SetConfig+0x2d4>)
 800854c:	fba3 1302 	umull	r1, r3, r3, r2
 8008550:	095b      	lsrs	r3, r3, #5
 8008552:	2164      	movs	r1, #100	@ 0x64
 8008554:	fb01 f303 	mul.w	r3, r1, r3
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	3332      	adds	r3, #50	@ 0x32
 800855e:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <UART_SetConfig+0x2d4>)
 8008560:	fba2 2303 	umull	r2, r3, r2, r3
 8008564:	095b      	lsrs	r3, r3, #5
 8008566:	f003 0207 	and.w	r2, r3, #7
 800856a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4422      	add	r2, r4
 8008572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008574:	e106      	b.n	8008784 <UART_SetConfig+0x4d8>
 8008576:	bf00      	nop
 8008578:	40011000 	.word	0x40011000
 800857c:	40011400 	.word	0x40011400
 8008580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008588:	2200      	movs	r2, #0
 800858a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800858e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008596:	4642      	mov	r2, r8
 8008598:	464b      	mov	r3, r9
 800859a:	1891      	adds	r1, r2, r2
 800859c:	6239      	str	r1, [r7, #32]
 800859e:	415b      	adcs	r3, r3
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085a6:	4641      	mov	r1, r8
 80085a8:	1854      	adds	r4, r2, r1
 80085aa:	4649      	mov	r1, r9
 80085ac:	eb43 0501 	adc.w	r5, r3, r1
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	00eb      	lsls	r3, r5, #3
 80085ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085be:	00e2      	lsls	r2, r4, #3
 80085c0:	4614      	mov	r4, r2
 80085c2:	461d      	mov	r5, r3
 80085c4:	4643      	mov	r3, r8
 80085c6:	18e3      	adds	r3, r4, r3
 80085c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085cc:	464b      	mov	r3, r9
 80085ce:	eb45 0303 	adc.w	r3, r5, r3
 80085d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 0300 	mov.w	r3, #0
 80085ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80085f2:	4629      	mov	r1, r5
 80085f4:	008b      	lsls	r3, r1, #2
 80085f6:	4621      	mov	r1, r4
 80085f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085fc:	4621      	mov	r1, r4
 80085fe:	008a      	lsls	r2, r1, #2
 8008600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008604:	f7f8 fb48 	bl	8000c98 <__aeabi_uldivmod>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4b60      	ldr	r3, [pc, #384]	@ (8008790 <UART_SetConfig+0x4e4>)
 800860e:	fba3 2302 	umull	r2, r3, r3, r2
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	011c      	lsls	r4, r3, #4
 8008616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008628:	4642      	mov	r2, r8
 800862a:	464b      	mov	r3, r9
 800862c:	1891      	adds	r1, r2, r2
 800862e:	61b9      	str	r1, [r7, #24]
 8008630:	415b      	adcs	r3, r3
 8008632:	61fb      	str	r3, [r7, #28]
 8008634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008638:	4641      	mov	r1, r8
 800863a:	1851      	adds	r1, r2, r1
 800863c:	6139      	str	r1, [r7, #16]
 800863e:	4649      	mov	r1, r9
 8008640:	414b      	adcs	r3, r1
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008650:	4659      	mov	r1, fp
 8008652:	00cb      	lsls	r3, r1, #3
 8008654:	4651      	mov	r1, sl
 8008656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800865a:	4651      	mov	r1, sl
 800865c:	00ca      	lsls	r2, r1, #3
 800865e:	4610      	mov	r0, r2
 8008660:	4619      	mov	r1, r3
 8008662:	4603      	mov	r3, r0
 8008664:	4642      	mov	r2, r8
 8008666:	189b      	adds	r3, r3, r2
 8008668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800866c:	464b      	mov	r3, r9
 800866e:	460a      	mov	r2, r1
 8008670:	eb42 0303 	adc.w	r3, r2, r3
 8008674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008682:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008690:	4649      	mov	r1, r9
 8008692:	008b      	lsls	r3, r1, #2
 8008694:	4641      	mov	r1, r8
 8008696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800869a:	4641      	mov	r1, r8
 800869c:	008a      	lsls	r2, r1, #2
 800869e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80086a2:	f7f8 faf9 	bl	8000c98 <__aeabi_uldivmod>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	4b38      	ldr	r3, [pc, #224]	@ (8008790 <UART_SetConfig+0x4e4>)
 80086ae:	fba3 2301 	umull	r2, r3, r3, r1
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	2264      	movs	r2, #100	@ 0x64
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	1acb      	subs	r3, r1, r3
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	3332      	adds	r3, #50	@ 0x32
 80086c0:	4a33      	ldr	r2, [pc, #204]	@ (8008790 <UART_SetConfig+0x4e4>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086cc:	441c      	add	r4, r3
 80086ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086d2:	2200      	movs	r2, #0
 80086d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80086d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80086d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80086dc:	4642      	mov	r2, r8
 80086de:	464b      	mov	r3, r9
 80086e0:	1891      	adds	r1, r2, r2
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	415b      	adcs	r3, r3
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086ec:	4641      	mov	r1, r8
 80086ee:	1851      	adds	r1, r2, r1
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	4649      	mov	r1, r9
 80086f4:	414b      	adcs	r3, r1
 80086f6:	607b      	str	r3, [r7, #4]
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008704:	4659      	mov	r1, fp
 8008706:	00cb      	lsls	r3, r1, #3
 8008708:	4651      	mov	r1, sl
 800870a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800870e:	4651      	mov	r1, sl
 8008710:	00ca      	lsls	r2, r1, #3
 8008712:	4610      	mov	r0, r2
 8008714:	4619      	mov	r1, r3
 8008716:	4603      	mov	r3, r0
 8008718:	4642      	mov	r2, r8
 800871a:	189b      	adds	r3, r3, r2
 800871c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800871e:	464b      	mov	r3, r9
 8008720:	460a      	mov	r2, r1
 8008722:	eb42 0303 	adc.w	r3, r2, r3
 8008726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	663b      	str	r3, [r7, #96]	@ 0x60
 8008732:	667a      	str	r2, [r7, #100]	@ 0x64
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008740:	4649      	mov	r1, r9
 8008742:	008b      	lsls	r3, r1, #2
 8008744:	4641      	mov	r1, r8
 8008746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800874a:	4641      	mov	r1, r8
 800874c:	008a      	lsls	r2, r1, #2
 800874e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008752:	f7f8 faa1 	bl	8000c98 <__aeabi_uldivmod>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4b0d      	ldr	r3, [pc, #52]	@ (8008790 <UART_SetConfig+0x4e4>)
 800875c:	fba3 1302 	umull	r1, r3, r3, r2
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	2164      	movs	r1, #100	@ 0x64
 8008764:	fb01 f303 	mul.w	r3, r1, r3
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	3332      	adds	r3, #50	@ 0x32
 800876e:	4a08      	ldr	r2, [pc, #32]	@ (8008790 <UART_SetConfig+0x4e4>)
 8008770:	fba2 2303 	umull	r2, r3, r2, r3
 8008774:	095b      	lsrs	r3, r3, #5
 8008776:	f003 020f 	and.w	r2, r3, #15
 800877a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4422      	add	r2, r4
 8008782:	609a      	str	r2, [r3, #8]
}
 8008784:	bf00      	nop
 8008786:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800878a:	46bd      	mov	sp, r7
 800878c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008790:	51eb851f 	.word	0x51eb851f

08008794 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008794:	b084      	sub	sp, #16
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	f107 001c 	add.w	r0, r7, #28
 80087a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80087aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80087ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80087ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80087b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80087b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80087b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80087ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80087be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80087ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	b004      	add	sp, #16
 80087e8:	4770      	bx	lr

080087ea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2203      	movs	r2, #3
 8008832:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0303 	and.w	r3, r3, #3
}
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800887c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008882:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008888:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008898:	f023 030f 	bic.w	r3, r3, #15
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	b2db      	uxtb	r3, r3
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3314      	adds	r3, #20
 80088da:	461a      	mov	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	4413      	add	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
}  
 80088e6:	4618      	mov	r0, r3
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b085      	sub	sp, #20
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008918:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800891e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008924:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008930:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800893c:	2300      	movs	r3, #0

}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b088      	sub	sp, #32
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008958:	2310      	movs	r3, #16
 800895a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800895c:	2340      	movs	r3, #64	@ 0x40
 800895e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ff74 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800897a:	2110      	movs	r1, #16
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa19 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008984:	69fb      	ldr	r3, [r7, #28]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b088      	sub	sp, #32
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800899c:	2311      	movs	r3, #17
 800899e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089a0:	2340      	movs	r3, #64	@ 0x40
 80089a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff ff52 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80089ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089be:	2111      	movs	r1, #17
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f9f7 	bl	8008db4 <SDMMC_GetCmdResp1>
 80089c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089c8:	69fb      	ldr	r3, [r7, #28]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b088      	sub	sp, #32
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80089e0:	2312      	movs	r3, #18
 80089e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089e4:	2340      	movs	r3, #64	@ 0x40
 80089e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089e8:	2300      	movs	r3, #0
 80089ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089f2:	f107 0308 	add.w	r3, r7, #8
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff ff30 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80089fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a02:	2112      	movs	r1, #18
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9d5 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b088      	sub	sp, #32
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008a24:	2318      	movs	r3, #24
 8008a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a28:	2340      	movs	r3, #64	@ 0x40
 8008a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ff0e 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a46:	2118      	movs	r1, #24
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f9b3 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008a4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a50:	69fb      	ldr	r3, [r7, #28]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b088      	sub	sp, #32
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008a68:	2319      	movs	r3, #25
 8008a6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a6c:	2340      	movs	r3, #64	@ 0x40
 8008a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff feec 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a8a:	2119      	movs	r1, #25
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f991 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a94:	69fb      	ldr	r3, [r7, #28]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008aac:	230c      	movs	r3, #12
 8008aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ab0:	2340      	movs	r3, #64	@ 0x40
 8008ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008abc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008abe:	f107 0308 	add.w	r3, r7, #8
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff feca 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008aca:	4a05      	ldr	r2, [pc, #20]	@ (8008ae0 <SDMMC_CmdStopTransfer+0x40>)
 8008acc:	210c      	movs	r1, #12
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f970 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	05f5e100 	.word	0x05f5e100

08008ae4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08a      	sub	sp, #40	@ 0x28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008af4:	2307      	movs	r3, #7
 8008af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008af8:	2340      	movs	r3, #64	@ 0x40
 8008afa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b04:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7ff fea6 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b16:	2107      	movs	r1, #7
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f94b 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008b1e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	@ 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff fe85 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fb65 	bl	8009224 <SDMMC_GetCmdError>
 8008b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b088      	sub	sp, #32
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008b6e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008b74:	2308      	movs	r3, #8
 8008b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b78:	2340      	movs	r3, #64	@ 0x40
 8008b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b86:	f107 0308 	add.w	r3, r7, #8
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff fe66 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 faf8 	bl	8009188 <SDMMC_GetCmdResp7>
 8008b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008bb2:	2337      	movs	r3, #55	@ 0x37
 8008bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bb6:	2340      	movs	r3, #64	@ 0x40
 8008bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff fe47 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bd4:	2137      	movs	r1, #55	@ 0x37
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8ec 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bde:	69fb      	ldr	r3, [r7, #28]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3720      	adds	r7, #32
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008bfe:	2329      	movs	r3, #41	@ 0x29
 8008c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c02:	2340      	movs	r3, #64	@ 0x40
 8008c04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c06:	2300      	movs	r3, #0
 8008c08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fe21 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f9ff 	bl	8009020 <SDMMC_GetCmdResp3>
 8008c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c24:	69fb      	ldr	r3, [r7, #28]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008c3c:	2306      	movs	r3, #6
 8008c3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c40:	2340      	movs	r3, #64	@ 0x40
 8008c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff fe02 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5e:	2106      	movs	r1, #6
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f8a7 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c68:	69fb      	ldr	r3, [r7, #28]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b088      	sub	sp, #32
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008c7e:	2333      	movs	r3, #51	@ 0x33
 8008c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c82:	2340      	movs	r3, #64	@ 0x40
 8008c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c90:	f107 0308 	add.w	r3, r7, #8
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fde1 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ca0:	2133      	movs	r1, #51	@ 0x33
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f886 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008caa:	69fb      	ldr	r3, [r7, #28]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3720      	adds	r7, #32
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008cc4:	23c0      	movs	r3, #192	@ 0xc0
 8008cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cd2:	f107 0308 	add.w	r3, r7, #8
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff fdc0 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f956 	bl	8008f90 <SDMMC_GetCmdResp2>
 8008ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3720      	adds	r7, #32
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008cfe:	2309      	movs	r3, #9
 8008d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008d02:	23c0      	movs	r3, #192	@ 0xc0
 8008d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d10:	f107 0308 	add.w	r3, r7, #8
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fda1 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f937 	bl	8008f90 <SDMMC_GetCmdResp2>
 8008d22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d24:	69fb      	ldr	r3, [r7, #28]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b088      	sub	sp, #32
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d40:	2340      	movs	r3, #64	@ 0x40
 8008d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d44:	2300      	movs	r3, #0
 8008d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d4e:	f107 0308 	add.w	r3, r7, #8
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fd82 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	2103      	movs	r1, #3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f99c 	bl	800909c <SDMMC_GetCmdResp6>
 8008d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d66:	69fb      	ldr	r3, [r7, #28]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3720      	adds	r7, #32
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008d7e:	230d      	movs	r3, #13
 8008d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d82:	2340      	movs	r3, #64	@ 0x40
 8008d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d90:	f107 0308 	add.w	r3, r7, #8
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fd61 	bl	800885e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da0:	210d      	movs	r1, #13
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f806 	bl	8008db4 <SDMMC_GetCmdResp1>
 8008da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008daa:	69fb      	ldr	r3, [r7, #28]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008dc2:	4b70      	ldr	r3, [pc, #448]	@ (8008f84 <SDMMC_GetCmdResp1+0x1d0>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a70      	ldr	r2, [pc, #448]	@ (8008f88 <SDMMC_GetCmdResp1+0x1d4>)
 8008dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dcc:	0a5a      	lsrs	r2, r3, #9
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	1e5a      	subs	r2, r3, #1
 8008dda:	61fa      	str	r2, [r7, #28]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008de0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008de4:	e0c9      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0ef      	beq.n	8008dd6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1ea      	bne.n	8008dd6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2204      	movs	r2, #4
 8008e10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e12:	2304      	movs	r3, #4
 8008e14:	e0b1      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0a6      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	22c5      	movs	r2, #197	@ 0xc5
 8008e30:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fd3d 	bl	80088b2 <SDIO_GetCommandResponse>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d001      	beq.n	8008e46 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e099      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008e46:	2100      	movs	r1, #0
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fd3f 	bl	80088cc <SDIO_GetResponse>
 8008e4e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	4b4e      	ldr	r3, [pc, #312]	@ (8008f8c <SDMMC_GetCmdResp1+0x1d8>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e08d      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da02      	bge.n	8008e6a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e68:	e087      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008e74:	2340      	movs	r3, #64	@ 0x40
 8008e76:	e080      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008e82:	2380      	movs	r3, #128	@ 0x80
 8008e84:	e079      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e94:	e071      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ea4:	e069      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eb4:	e061      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ec4:	e059      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ed4:	e051      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ee4:	e049      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ef0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ef4:	e041      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f04:	e039      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008f10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008f14:	e031      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008f20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008f24:	e029      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008f30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f34:	e021      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008f44:	e019      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008f50:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f54:	e011      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008f60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008f64:	e009      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008f70:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008f74:	e001      	b.n	8008f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000000 	.word	0x20000000
 8008f88:	10624dd3 	.word	0x10624dd3
 8008f8c:	fdffe008 	.word	0xfdffe008

08008f90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f98:	4b1f      	ldr	r3, [pc, #124]	@ (8009018 <SDMMC_GetCmdResp2+0x88>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800901c <SDMMC_GetCmdResp2+0x8c>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	0a5b      	lsrs	r3, r3, #9
 8008fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fa8:	fb02 f303 	mul.w	r3, r2, r3
 8008fac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	1e5a      	subs	r2, r3, #1
 8008fb2:	60fa      	str	r2, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d102      	bne.n	8008fbe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fbc:	e026      	b.n	800900c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ef      	beq.n	8008fae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1ea      	bne.n	8008fae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d004      	beq.n	8008fee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fea:	2304      	movs	r3, #4
 8008fec:	e00e      	b.n	800900c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009000:	2301      	movs	r3, #1
 8009002:	e003      	b.n	800900c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	22c5      	movs	r2, #197	@ 0xc5
 8009008:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20000000 	.word	0x20000000
 800901c:	10624dd3 	.word	0x10624dd3

08009020 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009028:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <SDMMC_GetCmdResp3+0x74>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1a      	ldr	r2, [pc, #104]	@ (8009098 <SDMMC_GetCmdResp3+0x78>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	0a5b      	lsrs	r3, r3, #9
 8009034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	1e5a      	subs	r2, r3, #1
 8009042:	60fa      	str	r2, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009048:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800904c:	e01b      	b.n	8009086 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009052:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0ef      	beq.n	800903e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1ea      	bne.n	800903e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2204      	movs	r2, #4
 8009078:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800907a:	2304      	movs	r3, #4
 800907c:	e003      	b.n	8009086 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	22c5      	movs	r2, #197	@ 0xc5
 8009082:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000000 	.word	0x20000000
 8009098:	10624dd3 	.word	0x10624dd3

0800909c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	460b      	mov	r3, r1
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090aa:	4b35      	ldr	r3, [pc, #212]	@ (8009180 <SDMMC_GetCmdResp6+0xe4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a35      	ldr	r2, [pc, #212]	@ (8009184 <SDMMC_GetCmdResp6+0xe8>)
 80090b0:	fba2 2303 	umull	r2, r3, r2, r3
 80090b4:	0a5b      	lsrs	r3, r3, #9
 80090b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	1e5a      	subs	r2, r3, #1
 80090c4:	61fa      	str	r2, [r7, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80090ce:	e052      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0ef      	beq.n	80090c0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1ea      	bne.n	80090c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d004      	beq.n	8009100 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2204      	movs	r2, #4
 80090fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090fc:	2304      	movs	r3, #4
 80090fe:	e03a      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009112:	2301      	movs	r3, #1
 8009114:	e02f      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff fbcb 	bl	80088b2 <SDIO_GetCommandResponse>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	4293      	cmp	r3, r2
 8009124:	d001      	beq.n	800912a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009126:	2301      	movs	r3, #1
 8009128:	e025      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	22c5      	movs	r2, #197	@ 0xc5
 800912e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009130:	2100      	movs	r1, #0
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f7ff fbca 	bl	80088cc <SDIO_GetResponse>
 8009138:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800914e:	2300      	movs	r3, #0
 8009150:	e011      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800915c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009160:	e009      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800916c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009170:	e001      	b.n	8009176 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009176:	4618      	mov	r0, r3
 8009178:	3720      	adds	r7, #32
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000000 	.word	0x20000000
 8009184:	10624dd3 	.word	0x10624dd3

08009188 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009190:	4b22      	ldr	r3, [pc, #136]	@ (800921c <SDMMC_GetCmdResp7+0x94>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a22      	ldr	r2, [pc, #136]	@ (8009220 <SDMMC_GetCmdResp7+0x98>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	0a5b      	lsrs	r3, r3, #9
 800919c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1e5a      	subs	r2, r3, #1
 80091aa:	60fa      	str	r2, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091b4:	e02c      	b.n	8009210 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0ef      	beq.n	80091a6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ea      	bne.n	80091a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2204      	movs	r2, #4
 80091e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091e2:	2304      	movs	r3, #4
 80091e4:	e014      	b.n	8009210 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e009      	b.n	8009210 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2240      	movs	r2, #64	@ 0x40
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800920e:	2300      	movs	r3, #0
  
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	20000000 	.word	0x20000000
 8009220:	10624dd3 	.word	0x10624dd3

08009224 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800922c:	4b11      	ldr	r3, [pc, #68]	@ (8009274 <SDMMC_GetCmdError+0x50>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a11      	ldr	r2, [pc, #68]	@ (8009278 <SDMMC_GetCmdError+0x54>)
 8009232:	fba2 2303 	umull	r2, r3, r2, r3
 8009236:	0a5b      	lsrs	r3, r3, #9
 8009238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	60fa      	str	r2, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800924c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009250:	e009      	b.n	8009266 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0f1      	beq.n	8009242 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	22c5      	movs	r2, #197	@ 0xc5
 8009262:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20000000 	.word	0x20000000
 8009278:	10624dd3 	.word	0x10624dd3

0800927c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009280:	4904      	ldr	r1, [pc, #16]	@ (8009294 <MX_FATFS_Init+0x18>)
 8009282:	4805      	ldr	r0, [pc, #20]	@ (8009298 <MX_FATFS_Init+0x1c>)
 8009284:	f000 faa0 	bl	80097c8 <FATFS_LinkDriver>
 8009288:	4603      	mov	r3, r0
 800928a:	461a      	mov	r2, r3
 800928c:	4b03      	ldr	r3, [pc, #12]	@ (800929c <MX_FATFS_Init+0x20>)
 800928e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009290:	bf00      	nop
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20000624 	.word	0x20000624
 8009298:	0800df8c 	.word	0x0800df8c
 800929c:	20000620 	.word	0x20000620

080092a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80092aa:	f000 f896 	bl	80093da <BSP_SD_IsDetected>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d001      	beq.n	80092b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e012      	b.n	80092de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80092b8:	480b      	ldr	r0, [pc, #44]	@ (80092e8 <BSP_SD_Init+0x48>)
 80092ba:	f7fb ffee 	bl	800529a <HAL_SD_Init>
 80092be:	4603      	mov	r3, r0
 80092c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80092c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80092cc:	4806      	ldr	r0, [pc, #24]	@ (80092e8 <BSP_SD_Init+0x48>)
 80092ce:	f7fc fdbd 	bl	8005e4c <HAL_SD_ConfigWideBusOperation>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80092dc:	79fb      	ldrb	r3, [r7, #7]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000314 	.word	0x20000314

080092ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	68f9      	ldr	r1, [r7, #12]
 8009302:	4806      	ldr	r0, [pc, #24]	@ (800931c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009304:	f7fc f87a 	bl	80053fc <HAL_SD_ReadBlocks_DMA>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000314 	.word	0x20000314

08009320 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	68f9      	ldr	r1, [r7, #12]
 8009336:	4806      	ldr	r0, [pc, #24]	@ (8009350 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009338:	f7fc f942 	bl	80055c0 <HAL_SD_WriteBlocks_DMA>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000314 	.word	0x20000314

08009354 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009358:	4805      	ldr	r0, [pc, #20]	@ (8009370 <BSP_SD_GetCardState+0x1c>)
 800935a:	f7fc fe11 	bl	8005f80 <HAL_SD_GetCardState>
 800935e:	4603      	mov	r3, r0
 8009360:	2b04      	cmp	r3, #4
 8009362:	bf14      	ite	ne
 8009364:	2301      	movne	r3, #1
 8009366:	2300      	moveq	r3, #0
 8009368:	b2db      	uxtb	r3, r3
}
 800936a:	4618      	mov	r0, r3
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000314 	.word	0x20000314

08009374 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4803      	ldr	r0, [pc, #12]	@ (800938c <BSP_SD_GetCardInfo+0x18>)
 8009380:	f7fc fd38 	bl	8005df4 <HAL_SD_GetCardInfo>
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000314 	.word	0x20000314

08009390 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009398:	f000 f818 	bl	80093cc <BSP_SD_AbortCallback>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80093ac:	f000 f9a8 	bl	8009700 <BSP_SD_WriteCpltCallback>
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80093c0:	f000 f9aa 	bl	8009718 <BSP_SD_ReadCpltCallback>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0

}
 80093d0:	bf00      	nop
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80093e0:	2301      	movs	r3, #1
 80093e2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80093e4:	f000 f80c 	bl	8009400 <BSP_PlatformIsDetected>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80093ee:	2300      	movs	r3, #0
 80093f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	b2db      	uxtb	r3, r3
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009406:	2301      	movs	r3, #1
 8009408:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800940a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800940e:	4806      	ldr	r0, [pc, #24]	@ (8009428 <BSP_PlatformIsDetected+0x28>)
 8009410:	f7fa fd42 	bl	8003e98 <HAL_GPIO_ReadPin>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800941a:	2300      	movs	r3, #0
 800941c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800941e:	79fb      	ldrb	r3, [r7, #7]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40020000 	.word	0x40020000

0800942c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009434:	f7f9 f946 	bl	80026c4 <HAL_GetTick>
 8009438:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800943a:	e006      	b.n	800944a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800943c:	f7ff ff8a 	bl	8009354 <BSP_SD_GetCardState>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009446:	2300      	movs	r3, #0
 8009448:	e009      	b.n	800945e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800944a:	f7f9 f93b 	bl	80026c4 <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d8f0      	bhi.n	800943c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800945a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009472:	4b0b      	ldr	r3, [pc, #44]	@ (80094a0 <SD_CheckStatus+0x38>)
 8009474:	2201      	movs	r2, #1
 8009476:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009478:	f7ff ff6c 	bl	8009354 <BSP_SD_GetCardState>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d107      	bne.n	8009492 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009482:	4b07      	ldr	r3, [pc, #28]	@ (80094a0 <SD_CheckStatus+0x38>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	b2da      	uxtb	r2, r3
 800948e:	4b04      	ldr	r3, [pc, #16]	@ (80094a0 <SD_CheckStatus+0x38>)
 8009490:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009492:	4b03      	ldr	r3, [pc, #12]	@ (80094a0 <SD_CheckStatus+0x38>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	b2db      	uxtb	r3, r3
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000009 	.word	0x20000009

080094a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80094ae:	f7ff fef7 	bl	80092a0 <BSP_SD_Init>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff ffd4 	bl	8009468 <SD_CheckStatus>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <SD_initialize+0x34>)
 80094c6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80094c8:	4b03      	ldr	r3, [pc, #12]	@ (80094d8 <SD_initialize+0x34>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	b2db      	uxtb	r3, r3
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000009 	.word	0x20000009

080094dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff ffbd 	bl	8009468 <SD_CheckStatus>
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800950c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009510:	f7ff ff8c 	bl	800942c <SD_CheckStatusWithTimeout>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	da01      	bge.n	800951e <SD_read+0x26>
  {
    return res;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	e03b      	b.n	8009596 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	68b8      	ldr	r0, [r7, #8]
 8009524:	f7ff fee2 	bl	80092ec <BSP_SD_ReadBlocks_DMA>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d132      	bne.n	8009594 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800952e:	4b1c      	ldr	r3, [pc, #112]	@ (80095a0 <SD_read+0xa8>)
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009534:	f7f9 f8c6 	bl	80026c4 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800953a:	bf00      	nop
 800953c:	4b18      	ldr	r3, [pc, #96]	@ (80095a0 <SD_read+0xa8>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d108      	bne.n	8009556 <SD_read+0x5e>
 8009544:	f7f9 f8be 	bl	80026c4 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009552:	4293      	cmp	r3, r2
 8009554:	d9f2      	bls.n	800953c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009556:	4b12      	ldr	r3, [pc, #72]	@ (80095a0 <SD_read+0xa8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	75fb      	strb	r3, [r7, #23]
 8009562:	e017      	b.n	8009594 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009564:	4b0e      	ldr	r3, [pc, #56]	@ (80095a0 <SD_read+0xa8>)
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800956a:	f7f9 f8ab 	bl	80026c4 <HAL_GetTick>
 800956e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009570:	e007      	b.n	8009582 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009572:	f7ff feef 	bl	8009354 <BSP_SD_GetCardState>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <SD_read+0x8a>
          {
            res = RES_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009580:	e008      	b.n	8009594 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009582:	f7f9 f89f 	bl	80026c4 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009590:	4293      	cmp	r3, r2
 8009592:	d9ee      	bls.n	8009572 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	2000062c 	.word	0x2000062c

080095a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80095b8:	4b24      	ldr	r3, [pc, #144]	@ (800964c <SD_write+0xa8>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80095be:	f247 5030 	movw	r0, #30000	@ 0x7530
 80095c2:	f7ff ff33 	bl	800942c <SD_CheckStatusWithTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da01      	bge.n	80095d0 <SD_write+0x2c>
  {
    return res;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	e038      	b.n	8009642 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	68b8      	ldr	r0, [r7, #8]
 80095d6:	f7ff fea3 	bl	8009320 <BSP_SD_WriteBlocks_DMA>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d12f      	bne.n	8009640 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80095e0:	f7f9 f870 	bl	80026c4 <HAL_GetTick>
 80095e4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80095e6:	bf00      	nop
 80095e8:	4b18      	ldr	r3, [pc, #96]	@ (800964c <SD_write+0xa8>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d108      	bne.n	8009602 <SD_write+0x5e>
 80095f0:	f7f9 f868 	bl	80026c4 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80095fe:	4293      	cmp	r3, r2
 8009600:	d9f2      	bls.n	80095e8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009602:	4b12      	ldr	r3, [pc, #72]	@ (800964c <SD_write+0xa8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	75fb      	strb	r3, [r7, #23]
 800960e:	e017      	b.n	8009640 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009610:	4b0e      	ldr	r3, [pc, #56]	@ (800964c <SD_write+0xa8>)
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009616:	f7f9 f855 	bl	80026c4 <HAL_GetTick>
 800961a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800961c:	e007      	b.n	800962e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800961e:	f7ff fe99 	bl	8009354 <BSP_SD_GetCardState>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <SD_write+0x8a>
          {
            res = RES_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	75fb      	strb	r3, [r7, #23]
            break;
 800962c:	e008      	b.n	8009640 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800962e:	f7f9 f849 	bl	80026c4 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	f247 522f 	movw	r2, #29999	@ 0x752f
 800963c:	4293      	cmp	r3, r2
 800963e:	d9ee      	bls.n	800961e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000628 	.word	0x20000628

08009650 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08c      	sub	sp, #48	@ 0x30
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	603a      	str	r2, [r7, #0]
 800965a:	71fb      	strb	r3, [r7, #7]
 800965c:	460b      	mov	r3, r1
 800965e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009666:	4b25      	ldr	r3, [pc, #148]	@ (80096fc <SD_ioctl+0xac>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <SD_ioctl+0x28>
 8009674:	2303      	movs	r3, #3
 8009676:	e03c      	b.n	80096f2 <SD_ioctl+0xa2>

  switch (cmd)
 8009678:	79bb      	ldrb	r3, [r7, #6]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d834      	bhi.n	80096e8 <SD_ioctl+0x98>
 800967e:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <SD_ioctl+0x34>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	08009695 	.word	0x08009695
 8009688:	0800969d 	.word	0x0800969d
 800968c:	080096b5 	.word	0x080096b5
 8009690:	080096cf 	.word	0x080096cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800969a:	e028      	b.n	80096ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800969c:	f107 030c 	add.w	r3, r7, #12
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fe67 	bl	8009374 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80096a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80096b2:	e01c      	b.n	80096ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80096b4:	f107 030c 	add.w	r3, r7, #12
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fe5b 	bl	8009374 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80096cc:	e00f      	b.n	80096ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80096ce:	f107 030c 	add.w	r3, r7, #12
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fe4e 	bl	8009374 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	0a5a      	lsrs	r2, r3, #9
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80096e6:	e002      	b.n	80096ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80096ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3730      	adds	r7, #48	@ 0x30
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000009 	.word	0x20000009

08009700 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009704:	4b03      	ldr	r3, [pc, #12]	@ (8009714 <BSP_SD_WriteCpltCallback+0x14>)
 8009706:	2201      	movs	r2, #1
 8009708:	601a      	str	r2, [r3, #0]
}
 800970a:	bf00      	nop
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	20000628 	.word	0x20000628

08009718 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800971c:	4b03      	ldr	r3, [pc, #12]	@ (800972c <BSP_SD_ReadCpltCallback+0x14>)
 800971e:	2201      	movs	r2, #1
 8009720:	601a      	str	r2, [r3, #0]
}
 8009722:	bf00      	nop
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	2000062c 	.word	0x2000062c

08009730 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800973e:	2301      	movs	r3, #1
 8009740:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009746:	4b1f      	ldr	r3, [pc, #124]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009748:	7a5b      	ldrb	r3, [r3, #9]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d131      	bne.n	80097b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009750:	4b1c      	ldr	r3, [pc, #112]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009752:	7a5b      	ldrb	r3, [r3, #9]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	461a      	mov	r2, r3
 8009758:	4b1a      	ldr	r3, [pc, #104]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 800975a:	2100      	movs	r1, #0
 800975c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800975e:	4b19      	ldr	r3, [pc, #100]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009760:	7a5b      	ldrb	r3, [r3, #9]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	4a17      	ldr	r2, [pc, #92]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800976e:	4b15      	ldr	r3, [pc, #84]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009770:	7a5b      	ldrb	r3, [r3, #9]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	461a      	mov	r2, r3
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009778:	4413      	add	r3, r2
 800977a:	79fa      	ldrb	r2, [r7, #7]
 800977c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800977e:	4b11      	ldr	r3, [pc, #68]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 8009780:	7a5b      	ldrb	r3, [r3, #9]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	b2d1      	uxtb	r1, r2
 8009788:	4a0e      	ldr	r2, [pc, #56]	@ (80097c4 <FATFS_LinkDriverEx+0x94>)
 800978a:	7251      	strb	r1, [r2, #9]
 800978c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800978e:	7dbb      	ldrb	r3, [r7, #22]
 8009790:	3330      	adds	r3, #48	@ 0x30
 8009792:	b2da      	uxtb	r2, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3301      	adds	r3, #1
 800979c:	223a      	movs	r2, #58	@ 0x3a
 800979e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	3302      	adds	r3, #2
 80097a4:	222f      	movs	r2, #47	@ 0x2f
 80097a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	3303      	adds	r3, #3
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	20000630 	.word	0x20000630

080097c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80097d2:	2200      	movs	r2, #0
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff ffaa 	bl	8009730 <FATFS_LinkDriverEx>
 80097dc:	4603      	mov	r3, r0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <__cvt>:
 80097e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097ea:	ec57 6b10 	vmov	r6, r7, d0
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	460c      	mov	r4, r1
 80097f2:	4619      	mov	r1, r3
 80097f4:	463b      	mov	r3, r7
 80097f6:	bfbb      	ittet	lt
 80097f8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80097fc:	461f      	movlt	r7, r3
 80097fe:	2300      	movge	r3, #0
 8009800:	232d      	movlt	r3, #45	@ 0x2d
 8009802:	700b      	strb	r3, [r1, #0]
 8009804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009806:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800980a:	4691      	mov	r9, r2
 800980c:	f023 0820 	bic.w	r8, r3, #32
 8009810:	bfbc      	itt	lt
 8009812:	4632      	movlt	r2, r6
 8009814:	4616      	movlt	r6, r2
 8009816:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800981a:	d005      	beq.n	8009828 <__cvt+0x42>
 800981c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009820:	d100      	bne.n	8009824 <__cvt+0x3e>
 8009822:	3401      	adds	r4, #1
 8009824:	2102      	movs	r1, #2
 8009826:	e000      	b.n	800982a <__cvt+0x44>
 8009828:	2103      	movs	r1, #3
 800982a:	ab03      	add	r3, sp, #12
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	ab02      	add	r3, sp, #8
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	ec47 6b10 	vmov	d0, r6, r7
 8009836:	4653      	mov	r3, sl
 8009838:	4622      	mov	r2, r4
 800983a:	f001 fea9 	bl	800b590 <_dtoa_r>
 800983e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009842:	4605      	mov	r5, r0
 8009844:	d119      	bne.n	800987a <__cvt+0x94>
 8009846:	f019 0f01 	tst.w	r9, #1
 800984a:	d00e      	beq.n	800986a <__cvt+0x84>
 800984c:	eb00 0904 	add.w	r9, r0, r4
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f7 f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800985c:	b108      	cbz	r0, 8009862 <__cvt+0x7c>
 800985e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009862:	2230      	movs	r2, #48	@ 0x30
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	454b      	cmp	r3, r9
 8009868:	d31e      	bcc.n	80098a8 <__cvt+0xc2>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800986e:	1b5b      	subs	r3, r3, r5
 8009870:	4628      	mov	r0, r5
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	b004      	add	sp, #16
 8009876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800987e:	eb00 0904 	add.w	r9, r0, r4
 8009882:	d1e5      	bne.n	8009850 <__cvt+0x6a>
 8009884:	7803      	ldrb	r3, [r0, #0]
 8009886:	2b30      	cmp	r3, #48	@ 0x30
 8009888:	d10a      	bne.n	80098a0 <__cvt+0xba>
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	f7f7 f921 	bl	8000ad8 <__aeabi_dcmpeq>
 8009896:	b918      	cbnz	r0, 80098a0 <__cvt+0xba>
 8009898:	f1c4 0401 	rsb	r4, r4, #1
 800989c:	f8ca 4000 	str.w	r4, [sl]
 80098a0:	f8da 3000 	ldr.w	r3, [sl]
 80098a4:	4499      	add	r9, r3
 80098a6:	e7d3      	b.n	8009850 <__cvt+0x6a>
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	9103      	str	r1, [sp, #12]
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	e7d9      	b.n	8009864 <__cvt+0x7e>

080098b0 <__exponent>:
 80098b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b2:	2900      	cmp	r1, #0
 80098b4:	bfba      	itte	lt
 80098b6:	4249      	neglt	r1, r1
 80098b8:	232d      	movlt	r3, #45	@ 0x2d
 80098ba:	232b      	movge	r3, #43	@ 0x2b
 80098bc:	2909      	cmp	r1, #9
 80098be:	7002      	strb	r2, [r0, #0]
 80098c0:	7043      	strb	r3, [r0, #1]
 80098c2:	dd29      	ble.n	8009918 <__exponent+0x68>
 80098c4:	f10d 0307 	add.w	r3, sp, #7
 80098c8:	461d      	mov	r5, r3
 80098ca:	270a      	movs	r7, #10
 80098cc:	461a      	mov	r2, r3
 80098ce:	fbb1 f6f7 	udiv	r6, r1, r7
 80098d2:	fb07 1416 	mls	r4, r7, r6, r1
 80098d6:	3430      	adds	r4, #48	@ 0x30
 80098d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098dc:	460c      	mov	r4, r1
 80098de:	2c63      	cmp	r4, #99	@ 0x63
 80098e0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80098e4:	4631      	mov	r1, r6
 80098e6:	dcf1      	bgt.n	80098cc <__exponent+0x1c>
 80098e8:	3130      	adds	r1, #48	@ 0x30
 80098ea:	1e94      	subs	r4, r2, #2
 80098ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098f0:	1c41      	adds	r1, r0, #1
 80098f2:	4623      	mov	r3, r4
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	d30a      	bcc.n	800990e <__exponent+0x5e>
 80098f8:	f10d 0309 	add.w	r3, sp, #9
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	42ac      	cmp	r4, r5
 8009900:	bf88      	it	hi
 8009902:	2300      	movhi	r3, #0
 8009904:	3302      	adds	r3, #2
 8009906:	4403      	add	r3, r0
 8009908:	1a18      	subs	r0, r3, r0
 800990a:	b003      	add	sp, #12
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009912:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009916:	e7ed      	b.n	80098f4 <__exponent+0x44>
 8009918:	2330      	movs	r3, #48	@ 0x30
 800991a:	3130      	adds	r1, #48	@ 0x30
 800991c:	7083      	strb	r3, [r0, #2]
 800991e:	70c1      	strb	r1, [r0, #3]
 8009920:	1d03      	adds	r3, r0, #4
 8009922:	e7f1      	b.n	8009908 <__exponent+0x58>

08009924 <_printf_float>:
 8009924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009928:	b08d      	sub	sp, #52	@ 0x34
 800992a:	460c      	mov	r4, r1
 800992c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009930:	4616      	mov	r6, r2
 8009932:	461f      	mov	r7, r3
 8009934:	4605      	mov	r5, r0
 8009936:	f001 fd53 	bl	800b3e0 <_localeconv_r>
 800993a:	6803      	ldr	r3, [r0, #0]
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	4618      	mov	r0, r3
 8009940:	f7f6 fc9e 	bl	8000280 <strlen>
 8009944:	2300      	movs	r3, #0
 8009946:	930a      	str	r3, [sp, #40]	@ 0x28
 8009948:	f8d8 3000 	ldr.w	r3, [r8]
 800994c:	9005      	str	r0, [sp, #20]
 800994e:	3307      	adds	r3, #7
 8009950:	f023 0307 	bic.w	r3, r3, #7
 8009954:	f103 0208 	add.w	r2, r3, #8
 8009958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800995c:	f8d4 b000 	ldr.w	fp, [r4]
 8009960:	f8c8 2000 	str.w	r2, [r8]
 8009964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800996c:	9307      	str	r3, [sp, #28]
 800996e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800997a:	4b9c      	ldr	r3, [pc, #624]	@ (8009bec <_printf_float+0x2c8>)
 800997c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009980:	f7f7 f8dc 	bl	8000b3c <__aeabi_dcmpun>
 8009984:	bb70      	cbnz	r0, 80099e4 <_printf_float+0xc0>
 8009986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800998a:	4b98      	ldr	r3, [pc, #608]	@ (8009bec <_printf_float+0x2c8>)
 800998c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009990:	f7f7 f8b6 	bl	8000b00 <__aeabi_dcmple>
 8009994:	bb30      	cbnz	r0, 80099e4 <_printf_float+0xc0>
 8009996:	2200      	movs	r2, #0
 8009998:	2300      	movs	r3, #0
 800999a:	4640      	mov	r0, r8
 800999c:	4649      	mov	r1, r9
 800999e:	f7f7 f8a5 	bl	8000aec <__aeabi_dcmplt>
 80099a2:	b110      	cbz	r0, 80099aa <_printf_float+0x86>
 80099a4:	232d      	movs	r3, #45	@ 0x2d
 80099a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099aa:	4a91      	ldr	r2, [pc, #580]	@ (8009bf0 <_printf_float+0x2cc>)
 80099ac:	4b91      	ldr	r3, [pc, #580]	@ (8009bf4 <_printf_float+0x2d0>)
 80099ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099b2:	bf94      	ite	ls
 80099b4:	4690      	movls	r8, r2
 80099b6:	4698      	movhi	r8, r3
 80099b8:	2303      	movs	r3, #3
 80099ba:	6123      	str	r3, [r4, #16]
 80099bc:	f02b 0304 	bic.w	r3, fp, #4
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	f04f 0900 	mov.w	r9, #0
 80099c6:	9700      	str	r7, [sp, #0]
 80099c8:	4633      	mov	r3, r6
 80099ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099cc:	4621      	mov	r1, r4
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 f9d2 	bl	8009d78 <_printf_common>
 80099d4:	3001      	adds	r0, #1
 80099d6:	f040 808d 	bne.w	8009af4 <_printf_float+0x1d0>
 80099da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099de:	b00d      	add	sp, #52	@ 0x34
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e4:	4642      	mov	r2, r8
 80099e6:	464b      	mov	r3, r9
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f7 f8a6 	bl	8000b3c <__aeabi_dcmpun>
 80099f0:	b140      	cbz	r0, 8009a04 <_printf_float+0xe0>
 80099f2:	464b      	mov	r3, r9
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfbc      	itt	lt
 80099f8:	232d      	movlt	r3, #45	@ 0x2d
 80099fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099fe:	4a7e      	ldr	r2, [pc, #504]	@ (8009bf8 <_printf_float+0x2d4>)
 8009a00:	4b7e      	ldr	r3, [pc, #504]	@ (8009bfc <_printf_float+0x2d8>)
 8009a02:	e7d4      	b.n	80099ae <_printf_float+0x8a>
 8009a04:	6863      	ldr	r3, [r4, #4]
 8009a06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a0a:	9206      	str	r2, [sp, #24]
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	d13b      	bne.n	8009a88 <_printf_float+0x164>
 8009a10:	2306      	movs	r3, #6
 8009a12:	6063      	str	r3, [r4, #4]
 8009a14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a18:	2300      	movs	r3, #0
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	9303      	str	r3, [sp, #12]
 8009a1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a24:	ab09      	add	r3, sp, #36	@ 0x24
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	6861      	ldr	r1, [r4, #4]
 8009a2a:	ec49 8b10 	vmov	d0, r8, r9
 8009a2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7ff fed7 	bl	80097e6 <__cvt>
 8009a38:	9b06      	ldr	r3, [sp, #24]
 8009a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a3c:	2b47      	cmp	r3, #71	@ 0x47
 8009a3e:	4680      	mov	r8, r0
 8009a40:	d129      	bne.n	8009a96 <_printf_float+0x172>
 8009a42:	1cc8      	adds	r0, r1, #3
 8009a44:	db02      	blt.n	8009a4c <_printf_float+0x128>
 8009a46:	6863      	ldr	r3, [r4, #4]
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	dd41      	ble.n	8009ad0 <_printf_float+0x1ac>
 8009a4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a50:	fa5f fa8a 	uxtb.w	sl, sl
 8009a54:	3901      	subs	r1, #1
 8009a56:	4652      	mov	r2, sl
 8009a58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a5e:	f7ff ff27 	bl	80098b0 <__exponent>
 8009a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a64:	1813      	adds	r3, r2, r0
 8009a66:	2a01      	cmp	r2, #1
 8009a68:	4681      	mov	r9, r0
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	dc02      	bgt.n	8009a74 <_printf_float+0x150>
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	07d2      	lsls	r2, r2, #31
 8009a72:	d501      	bpl.n	8009a78 <_printf_float+0x154>
 8009a74:	3301      	adds	r3, #1
 8009a76:	6123      	str	r3, [r4, #16]
 8009a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0a2      	beq.n	80099c6 <_printf_float+0xa2>
 8009a80:	232d      	movs	r3, #45	@ 0x2d
 8009a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a86:	e79e      	b.n	80099c6 <_printf_float+0xa2>
 8009a88:	9a06      	ldr	r2, [sp, #24]
 8009a8a:	2a47      	cmp	r2, #71	@ 0x47
 8009a8c:	d1c2      	bne.n	8009a14 <_printf_float+0xf0>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1c0      	bne.n	8009a14 <_printf_float+0xf0>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7bd      	b.n	8009a12 <_printf_float+0xee>
 8009a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a9a:	d9db      	bls.n	8009a54 <_printf_float+0x130>
 8009a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009aa0:	d118      	bne.n	8009ad4 <_printf_float+0x1b0>
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	6863      	ldr	r3, [r4, #4]
 8009aa6:	dd0b      	ble.n	8009ac0 <_printf_float+0x19c>
 8009aa8:	6121      	str	r1, [r4, #16]
 8009aaa:	b913      	cbnz	r3, 8009ab2 <_printf_float+0x18e>
 8009aac:	6822      	ldr	r2, [r4, #0]
 8009aae:	07d0      	lsls	r0, r2, #31
 8009ab0:	d502      	bpl.n	8009ab8 <_printf_float+0x194>
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	440b      	add	r3, r1
 8009ab6:	6123      	str	r3, [r4, #16]
 8009ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009aba:	f04f 0900 	mov.w	r9, #0
 8009abe:	e7db      	b.n	8009a78 <_printf_float+0x154>
 8009ac0:	b913      	cbnz	r3, 8009ac8 <_printf_float+0x1a4>
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	07d2      	lsls	r2, r2, #31
 8009ac6:	d501      	bpl.n	8009acc <_printf_float+0x1a8>
 8009ac8:	3302      	adds	r3, #2
 8009aca:	e7f4      	b.n	8009ab6 <_printf_float+0x192>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e7f2      	b.n	8009ab6 <_printf_float+0x192>
 8009ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	db05      	blt.n	8009ae6 <_printf_float+0x1c2>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	6121      	str	r1, [r4, #16]
 8009ade:	07d8      	lsls	r0, r3, #31
 8009ae0:	d5ea      	bpl.n	8009ab8 <_printf_float+0x194>
 8009ae2:	1c4b      	adds	r3, r1, #1
 8009ae4:	e7e7      	b.n	8009ab6 <_printf_float+0x192>
 8009ae6:	2900      	cmp	r1, #0
 8009ae8:	bfd4      	ite	le
 8009aea:	f1c1 0202 	rsble	r2, r1, #2
 8009aee:	2201      	movgt	r2, #1
 8009af0:	4413      	add	r3, r2
 8009af2:	e7e0      	b.n	8009ab6 <_printf_float+0x192>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	055a      	lsls	r2, r3, #21
 8009af8:	d407      	bmi.n	8009b0a <_printf_float+0x1e6>
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	4642      	mov	r2, r8
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	d12b      	bne.n	8009b60 <_printf_float+0x23c>
 8009b08:	e767      	b.n	80099da <_printf_float+0xb6>
 8009b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b0e:	f240 80dd 	bls.w	8009ccc <_printf_float+0x3a8>
 8009b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f7f6 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d033      	beq.n	8009b8a <_printf_float+0x266>
 8009b22:	4a37      	ldr	r2, [pc, #220]	@ (8009c00 <_printf_float+0x2dc>)
 8009b24:	2301      	movs	r3, #1
 8009b26:	4631      	mov	r1, r6
 8009b28:	4628      	mov	r0, r5
 8009b2a:	47b8      	blx	r7
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	f43f af54 	beq.w	80099da <_printf_float+0xb6>
 8009b32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b36:	4543      	cmp	r3, r8
 8009b38:	db02      	blt.n	8009b40 <_printf_float+0x21c>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	07d8      	lsls	r0, r3, #31
 8009b3e:	d50f      	bpl.n	8009b60 <_printf_float+0x23c>
 8009b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f af45 	beq.w	80099da <_printf_float+0xb6>
 8009b50:	f04f 0900 	mov.w	r9, #0
 8009b54:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009b58:	f104 0a1a 	add.w	sl, r4, #26
 8009b5c:	45c8      	cmp	r8, r9
 8009b5e:	dc09      	bgt.n	8009b74 <_printf_float+0x250>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	079b      	lsls	r3, r3, #30
 8009b64:	f100 8103 	bmi.w	8009d6e <_printf_float+0x44a>
 8009b68:	68e0      	ldr	r0, [r4, #12]
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b6c:	4298      	cmp	r0, r3
 8009b6e:	bfb8      	it	lt
 8009b70:	4618      	movlt	r0, r3
 8009b72:	e734      	b.n	80099de <_printf_float+0xba>
 8009b74:	2301      	movs	r3, #1
 8009b76:	4652      	mov	r2, sl
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f af2b 	beq.w	80099da <_printf_float+0xb6>
 8009b84:	f109 0901 	add.w	r9, r9, #1
 8009b88:	e7e8      	b.n	8009b5c <_printf_float+0x238>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dc39      	bgt.n	8009c04 <_printf_float+0x2e0>
 8009b90:	4a1b      	ldr	r2, [pc, #108]	@ (8009c00 <_printf_float+0x2dc>)
 8009b92:	2301      	movs	r3, #1
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af1d 	beq.w	80099da <_printf_float+0xb6>
 8009ba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8009ba8:	d102      	bne.n	8009bb0 <_printf_float+0x28c>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	07d9      	lsls	r1, r3, #31
 8009bae:	d5d7      	bpl.n	8009b60 <_printf_float+0x23c>
 8009bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	47b8      	blx	r7
 8009bba:	3001      	adds	r0, #1
 8009bbc:	f43f af0d 	beq.w	80099da <_printf_float+0xb6>
 8009bc0:	f04f 0a00 	mov.w	sl, #0
 8009bc4:	f104 0b1a 	add.w	fp, r4, #26
 8009bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bca:	425b      	negs	r3, r3
 8009bcc:	4553      	cmp	r3, sl
 8009bce:	dc01      	bgt.n	8009bd4 <_printf_float+0x2b0>
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	e793      	b.n	8009afc <_printf_float+0x1d8>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	465a      	mov	r2, fp
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f aefb 	beq.w	80099da <_printf_float+0xb6>
 8009be4:	f10a 0a01 	add.w	sl, sl, #1
 8009be8:	e7ee      	b.n	8009bc8 <_printf_float+0x2a4>
 8009bea:	bf00      	nop
 8009bec:	7fefffff 	.word	0x7fefffff
 8009bf0:	0800dfa0 	.word	0x0800dfa0
 8009bf4:	0800dfa4 	.word	0x0800dfa4
 8009bf8:	0800dfa8 	.word	0x0800dfa8
 8009bfc:	0800dfac 	.word	0x0800dfac
 8009c00:	0800dfb0 	.word	0x0800dfb0
 8009c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c0a:	4553      	cmp	r3, sl
 8009c0c:	bfa8      	it	ge
 8009c0e:	4653      	movge	r3, sl
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	4699      	mov	r9, r3
 8009c14:	dc36      	bgt.n	8009c84 <_printf_float+0x360>
 8009c16:	f04f 0b00 	mov.w	fp, #0
 8009c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c1e:	f104 021a 	add.w	r2, r4, #26
 8009c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c24:	9306      	str	r3, [sp, #24]
 8009c26:	eba3 0309 	sub.w	r3, r3, r9
 8009c2a:	455b      	cmp	r3, fp
 8009c2c:	dc31      	bgt.n	8009c92 <_printf_float+0x36e>
 8009c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c30:	459a      	cmp	sl, r3
 8009c32:	dc3a      	bgt.n	8009caa <_printf_float+0x386>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d437      	bmi.n	8009caa <_printf_float+0x386>
 8009c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8009c40:	9b06      	ldr	r3, [sp, #24]
 8009c42:	ebaa 0303 	sub.w	r3, sl, r3
 8009c46:	4599      	cmp	r9, r3
 8009c48:	bfa8      	it	ge
 8009c4a:	4699      	movge	r9, r3
 8009c4c:	f1b9 0f00 	cmp.w	r9, #0
 8009c50:	dc33      	bgt.n	8009cba <_printf_float+0x396>
 8009c52:	f04f 0800 	mov.w	r8, #0
 8009c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c5a:	f104 0b1a 	add.w	fp, r4, #26
 8009c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c60:	ebaa 0303 	sub.w	r3, sl, r3
 8009c64:	eba3 0309 	sub.w	r3, r3, r9
 8009c68:	4543      	cmp	r3, r8
 8009c6a:	f77f af79 	ble.w	8009b60 <_printf_float+0x23c>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	465a      	mov	r2, fp
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f aeae 	beq.w	80099da <_printf_float+0xb6>
 8009c7e:	f108 0801 	add.w	r8, r8, #1
 8009c82:	e7ec      	b.n	8009c5e <_printf_float+0x33a>
 8009c84:	4642      	mov	r2, r8
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b8      	blx	r7
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d1c2      	bne.n	8009c16 <_printf_float+0x2f2>
 8009c90:	e6a3      	b.n	80099da <_printf_float+0xb6>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	9206      	str	r2, [sp, #24]
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	f43f ae9c 	beq.w	80099da <_printf_float+0xb6>
 8009ca2:	9a06      	ldr	r2, [sp, #24]
 8009ca4:	f10b 0b01 	add.w	fp, fp, #1
 8009ca8:	e7bb      	b.n	8009c22 <_printf_float+0x2fe>
 8009caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	47b8      	blx	r7
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d1c0      	bne.n	8009c3a <_printf_float+0x316>
 8009cb8:	e68f      	b.n	80099da <_printf_float+0xb6>
 8009cba:	9a06      	ldr	r2, [sp, #24]
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	4442      	add	r2, r8
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d1c3      	bne.n	8009c52 <_printf_float+0x32e>
 8009cca:	e686      	b.n	80099da <_printf_float+0xb6>
 8009ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cd0:	f1ba 0f01 	cmp.w	sl, #1
 8009cd4:	dc01      	bgt.n	8009cda <_printf_float+0x3b6>
 8009cd6:	07db      	lsls	r3, r3, #31
 8009cd8:	d536      	bpl.n	8009d48 <_printf_float+0x424>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4642      	mov	r2, r8
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f ae78 	beq.w	80099da <_printf_float+0xb6>
 8009cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f ae70 	beq.w	80099da <_printf_float+0xb6>
 8009cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2300      	movs	r3, #0
 8009d02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009d06:	f7f6 fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d0a:	b9c0      	cbnz	r0, 8009d3e <_printf_float+0x41a>
 8009d0c:	4653      	mov	r3, sl
 8009d0e:	f108 0201 	add.w	r2, r8, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d10c      	bne.n	8009d36 <_printf_float+0x412>
 8009d1c:	e65d      	b.n	80099da <_printf_float+0xb6>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	465a      	mov	r2, fp
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f43f ae56 	beq.w	80099da <_printf_float+0xb6>
 8009d2e:	f108 0801 	add.w	r8, r8, #1
 8009d32:	45d0      	cmp	r8, sl
 8009d34:	dbf3      	blt.n	8009d1e <_printf_float+0x3fa>
 8009d36:	464b      	mov	r3, r9
 8009d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d3c:	e6df      	b.n	8009afe <_printf_float+0x1da>
 8009d3e:	f04f 0800 	mov.w	r8, #0
 8009d42:	f104 0b1a 	add.w	fp, r4, #26
 8009d46:	e7f4      	b.n	8009d32 <_printf_float+0x40e>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4642      	mov	r2, r8
 8009d4c:	e7e1      	b.n	8009d12 <_printf_float+0x3ee>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	464a      	mov	r2, r9
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f ae3e 	beq.w	80099da <_printf_float+0xb6>
 8009d5e:	f108 0801 	add.w	r8, r8, #1
 8009d62:	68e3      	ldr	r3, [r4, #12]
 8009d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d66:	1a5b      	subs	r3, r3, r1
 8009d68:	4543      	cmp	r3, r8
 8009d6a:	dcf0      	bgt.n	8009d4e <_printf_float+0x42a>
 8009d6c:	e6fc      	b.n	8009b68 <_printf_float+0x244>
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	f104 0919 	add.w	r9, r4, #25
 8009d76:	e7f4      	b.n	8009d62 <_printf_float+0x43e>

08009d78 <_printf_common>:
 8009d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d7c:	4616      	mov	r6, r2
 8009d7e:	4698      	mov	r8, r3
 8009d80:	688a      	ldr	r2, [r1, #8]
 8009d82:	690b      	ldr	r3, [r1, #16]
 8009d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	bfb8      	it	lt
 8009d8c:	4613      	movlt	r3, r2
 8009d8e:	6033      	str	r3, [r6, #0]
 8009d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d94:	4607      	mov	r7, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b10a      	cbz	r2, 8009d9e <_printf_common+0x26>
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	0699      	lsls	r1, r3, #26
 8009da2:	bf42      	ittt	mi
 8009da4:	6833      	ldrmi	r3, [r6, #0]
 8009da6:	3302      	addmi	r3, #2
 8009da8:	6033      	strmi	r3, [r6, #0]
 8009daa:	6825      	ldr	r5, [r4, #0]
 8009dac:	f015 0506 	ands.w	r5, r5, #6
 8009db0:	d106      	bne.n	8009dc0 <_printf_common+0x48>
 8009db2:	f104 0a19 	add.w	sl, r4, #25
 8009db6:	68e3      	ldr	r3, [r4, #12]
 8009db8:	6832      	ldr	r2, [r6, #0]
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	dc26      	bgt.n	8009e0e <_printf_common+0x96>
 8009dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dc4:	6822      	ldr	r2, [r4, #0]
 8009dc6:	3b00      	subs	r3, #0
 8009dc8:	bf18      	it	ne
 8009dca:	2301      	movne	r3, #1
 8009dcc:	0692      	lsls	r2, r2, #26
 8009dce:	d42b      	bmi.n	8009e28 <_printf_common+0xb0>
 8009dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	47c8      	blx	r9
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d01e      	beq.n	8009e1c <_printf_common+0xa4>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	f003 0306 	and.w	r3, r3, #6
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	bf02      	ittt	eq
 8009dea:	68e5      	ldreq	r5, [r4, #12]
 8009dec:	6833      	ldreq	r3, [r6, #0]
 8009dee:	1aed      	subeq	r5, r5, r3
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	bf0c      	ite	eq
 8009df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df8:	2500      	movne	r5, #0
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	bfc4      	itt	gt
 8009dfe:	1a9b      	subgt	r3, r3, r2
 8009e00:	18ed      	addgt	r5, r5, r3
 8009e02:	2600      	movs	r6, #0
 8009e04:	341a      	adds	r4, #26
 8009e06:	42b5      	cmp	r5, r6
 8009e08:	d11a      	bne.n	8009e40 <_printf_common+0xc8>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	e008      	b.n	8009e20 <_printf_common+0xa8>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4652      	mov	r2, sl
 8009e12:	4641      	mov	r1, r8
 8009e14:	4638      	mov	r0, r7
 8009e16:	47c8      	blx	r9
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d103      	bne.n	8009e24 <_printf_common+0xac>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e24:	3501      	adds	r5, #1
 8009e26:	e7c6      	b.n	8009db6 <_printf_common+0x3e>
 8009e28:	18e1      	adds	r1, r4, r3
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	2030      	movs	r0, #48	@ 0x30
 8009e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e32:	4422      	add	r2, r4
 8009e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	e7c7      	b.n	8009dd0 <_printf_common+0x58>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4622      	mov	r2, r4
 8009e44:	4641      	mov	r1, r8
 8009e46:	4638      	mov	r0, r7
 8009e48:	47c8      	blx	r9
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d0e6      	beq.n	8009e1c <_printf_common+0xa4>
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7d9      	b.n	8009e06 <_printf_common+0x8e>
	...

08009e54 <_printf_i>:
 8009e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	7e0f      	ldrb	r7, [r1, #24]
 8009e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e5c:	2f78      	cmp	r7, #120	@ 0x78
 8009e5e:	4691      	mov	r9, r2
 8009e60:	4680      	mov	r8, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	469a      	mov	sl, r3
 8009e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e6a:	d807      	bhi.n	8009e7c <_printf_i+0x28>
 8009e6c:	2f62      	cmp	r7, #98	@ 0x62
 8009e6e:	d80a      	bhi.n	8009e86 <_printf_i+0x32>
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	f000 80d2 	beq.w	800a01a <_printf_i+0x1c6>
 8009e76:	2f58      	cmp	r7, #88	@ 0x58
 8009e78:	f000 80b9 	beq.w	8009fee <_printf_i+0x19a>
 8009e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e84:	e03a      	b.n	8009efc <_printf_i+0xa8>
 8009e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e8a:	2b15      	cmp	r3, #21
 8009e8c:	d8f6      	bhi.n	8009e7c <_printf_i+0x28>
 8009e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8009e94 <_printf_i+0x40>)
 8009e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e94:	08009eed 	.word	0x08009eed
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009e7d 	.word	0x08009e7d
 8009ea0:	08009e7d 	.word	0x08009e7d
 8009ea4:	08009e7d 	.word	0x08009e7d
 8009ea8:	08009e7d 	.word	0x08009e7d
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009e7d 	.word	0x08009e7d
 8009eb4:	08009e7d 	.word	0x08009e7d
 8009eb8:	08009e7d 	.word	0x08009e7d
 8009ebc:	08009e7d 	.word	0x08009e7d
 8009ec0:	0800a001 	.word	0x0800a001
 8009ec4:	08009f2b 	.word	0x08009f2b
 8009ec8:	08009fbb 	.word	0x08009fbb
 8009ecc:	08009e7d 	.word	0x08009e7d
 8009ed0:	08009e7d 	.word	0x08009e7d
 8009ed4:	0800a023 	.word	0x0800a023
 8009ed8:	08009e7d 	.word	0x08009e7d
 8009edc:	08009f2b 	.word	0x08009f2b
 8009ee0:	08009e7d 	.word	0x08009e7d
 8009ee4:	08009e7d 	.word	0x08009e7d
 8009ee8:	08009fc3 	.word	0x08009fc3
 8009eec:	6833      	ldr	r3, [r6, #0]
 8009eee:	1d1a      	adds	r2, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6032      	str	r2, [r6, #0]
 8009ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009efc:	2301      	movs	r3, #1
 8009efe:	e09d      	b.n	800a03c <_printf_i+0x1e8>
 8009f00:	6833      	ldr	r3, [r6, #0]
 8009f02:	6820      	ldr	r0, [r4, #0]
 8009f04:	1d19      	adds	r1, r3, #4
 8009f06:	6031      	str	r1, [r6, #0]
 8009f08:	0606      	lsls	r6, r0, #24
 8009f0a:	d501      	bpl.n	8009f10 <_printf_i+0xbc>
 8009f0c:	681d      	ldr	r5, [r3, #0]
 8009f0e:	e003      	b.n	8009f18 <_printf_i+0xc4>
 8009f10:	0645      	lsls	r5, r0, #25
 8009f12:	d5fb      	bpl.n	8009f0c <_printf_i+0xb8>
 8009f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	da03      	bge.n	8009f24 <_printf_i+0xd0>
 8009f1c:	232d      	movs	r3, #45	@ 0x2d
 8009f1e:	426d      	negs	r5, r5
 8009f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f24:	4859      	ldr	r0, [pc, #356]	@ (800a08c <_printf_i+0x238>)
 8009f26:	230a      	movs	r3, #10
 8009f28:	e011      	b.n	8009f4e <_printf_i+0xfa>
 8009f2a:	6821      	ldr	r1, [r4, #0]
 8009f2c:	6833      	ldr	r3, [r6, #0]
 8009f2e:	0608      	lsls	r0, r1, #24
 8009f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f34:	d402      	bmi.n	8009f3c <_printf_i+0xe8>
 8009f36:	0649      	lsls	r1, r1, #25
 8009f38:	bf48      	it	mi
 8009f3a:	b2ad      	uxthmi	r5, r5
 8009f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f3e:	4853      	ldr	r0, [pc, #332]	@ (800a08c <_printf_i+0x238>)
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	bf14      	ite	ne
 8009f44:	230a      	movne	r3, #10
 8009f46:	2308      	moveq	r3, #8
 8009f48:	2100      	movs	r1, #0
 8009f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f4e:	6866      	ldr	r6, [r4, #4]
 8009f50:	60a6      	str	r6, [r4, #8]
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	bfa2      	ittt	ge
 8009f56:	6821      	ldrge	r1, [r4, #0]
 8009f58:	f021 0104 	bicge.w	r1, r1, #4
 8009f5c:	6021      	strge	r1, [r4, #0]
 8009f5e:	b90d      	cbnz	r5, 8009f64 <_printf_i+0x110>
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	d04b      	beq.n	8009ffc <_printf_i+0x1a8>
 8009f64:	4616      	mov	r6, r2
 8009f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8009f6e:	5dc7      	ldrb	r7, [r0, r7]
 8009f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f74:	462f      	mov	r7, r5
 8009f76:	42bb      	cmp	r3, r7
 8009f78:	460d      	mov	r5, r1
 8009f7a:	d9f4      	bls.n	8009f66 <_printf_i+0x112>
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d10b      	bne.n	8009f98 <_printf_i+0x144>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	07df      	lsls	r7, r3, #31
 8009f84:	d508      	bpl.n	8009f98 <_printf_i+0x144>
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	6861      	ldr	r1, [r4, #4]
 8009f8a:	4299      	cmp	r1, r3
 8009f8c:	bfde      	ittt	le
 8009f8e:	2330      	movle	r3, #48	@ 0x30
 8009f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f94:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f98:	1b92      	subs	r2, r2, r6
 8009f9a:	6122      	str	r2, [r4, #16]
 8009f9c:	f8cd a000 	str.w	sl, [sp]
 8009fa0:	464b      	mov	r3, r9
 8009fa2:	aa03      	add	r2, sp, #12
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	f7ff fee6 	bl	8009d78 <_printf_common>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d14a      	bne.n	800a046 <_printf_i+0x1f2>
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fb4:	b004      	add	sp, #16
 8009fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	f043 0320 	orr.w	r3, r3, #32
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	4833      	ldr	r0, [pc, #204]	@ (800a090 <_printf_i+0x23c>)
 8009fc4:	2778      	movs	r7, #120	@ 0x78
 8009fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	6831      	ldr	r1, [r6, #0]
 8009fce:	061f      	lsls	r7, r3, #24
 8009fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fd4:	d402      	bmi.n	8009fdc <_printf_i+0x188>
 8009fd6:	065f      	lsls	r7, r3, #25
 8009fd8:	bf48      	it	mi
 8009fda:	b2ad      	uxthmi	r5, r5
 8009fdc:	6031      	str	r1, [r6, #0]
 8009fde:	07d9      	lsls	r1, r3, #31
 8009fe0:	bf44      	itt	mi
 8009fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe6:	6023      	strmi	r3, [r4, #0]
 8009fe8:	b11d      	cbz	r5, 8009ff2 <_printf_i+0x19e>
 8009fea:	2310      	movs	r3, #16
 8009fec:	e7ac      	b.n	8009f48 <_printf_i+0xf4>
 8009fee:	4827      	ldr	r0, [pc, #156]	@ (800a08c <_printf_i+0x238>)
 8009ff0:	e7e9      	b.n	8009fc6 <_printf_i+0x172>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	f023 0320 	bic.w	r3, r3, #32
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	e7f6      	b.n	8009fea <_printf_i+0x196>
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	e7bd      	b.n	8009f7c <_printf_i+0x128>
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	6825      	ldr	r5, [r4, #0]
 800a004:	6961      	ldr	r1, [r4, #20]
 800a006:	1d18      	adds	r0, r3, #4
 800a008:	6030      	str	r0, [r6, #0]
 800a00a:	062e      	lsls	r6, r5, #24
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	d501      	bpl.n	800a014 <_printf_i+0x1c0>
 800a010:	6019      	str	r1, [r3, #0]
 800a012:	e002      	b.n	800a01a <_printf_i+0x1c6>
 800a014:	0668      	lsls	r0, r5, #25
 800a016:	d5fb      	bpl.n	800a010 <_printf_i+0x1bc>
 800a018:	8019      	strh	r1, [r3, #0]
 800a01a:	2300      	movs	r3, #0
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	4616      	mov	r6, r2
 800a020:	e7bc      	b.n	8009f9c <_printf_i+0x148>
 800a022:	6833      	ldr	r3, [r6, #0]
 800a024:	1d1a      	adds	r2, r3, #4
 800a026:	6032      	str	r2, [r6, #0]
 800a028:	681e      	ldr	r6, [r3, #0]
 800a02a:	6862      	ldr	r2, [r4, #4]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4630      	mov	r0, r6
 800a030:	f7f6 f8d6 	bl	80001e0 <memchr>
 800a034:	b108      	cbz	r0, 800a03a <_printf_i+0x1e6>
 800a036:	1b80      	subs	r0, r0, r6
 800a038:	6060      	str	r0, [r4, #4]
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	6123      	str	r3, [r4, #16]
 800a03e:	2300      	movs	r3, #0
 800a040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a044:	e7aa      	b.n	8009f9c <_printf_i+0x148>
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	4632      	mov	r2, r6
 800a04a:	4649      	mov	r1, r9
 800a04c:	4640      	mov	r0, r8
 800a04e:	47d0      	blx	sl
 800a050:	3001      	adds	r0, #1
 800a052:	d0ad      	beq.n	8009fb0 <_printf_i+0x15c>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	079b      	lsls	r3, r3, #30
 800a058:	d413      	bmi.n	800a082 <_printf_i+0x22e>
 800a05a:	68e0      	ldr	r0, [r4, #12]
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	4298      	cmp	r0, r3
 800a060:	bfb8      	it	lt
 800a062:	4618      	movlt	r0, r3
 800a064:	e7a6      	b.n	8009fb4 <_printf_i+0x160>
 800a066:	2301      	movs	r3, #1
 800a068:	4632      	mov	r2, r6
 800a06a:	4649      	mov	r1, r9
 800a06c:	4640      	mov	r0, r8
 800a06e:	47d0      	blx	sl
 800a070:	3001      	adds	r0, #1
 800a072:	d09d      	beq.n	8009fb0 <_printf_i+0x15c>
 800a074:	3501      	adds	r5, #1
 800a076:	68e3      	ldr	r3, [r4, #12]
 800a078:	9903      	ldr	r1, [sp, #12]
 800a07a:	1a5b      	subs	r3, r3, r1
 800a07c:	42ab      	cmp	r3, r5
 800a07e:	dcf2      	bgt.n	800a066 <_printf_i+0x212>
 800a080:	e7eb      	b.n	800a05a <_printf_i+0x206>
 800a082:	2500      	movs	r5, #0
 800a084:	f104 0619 	add.w	r6, r4, #25
 800a088:	e7f5      	b.n	800a076 <_printf_i+0x222>
 800a08a:	bf00      	nop
 800a08c:	0800dfb2 	.word	0x0800dfb2
 800a090:	0800dfc3 	.word	0x0800dfc3

0800a094 <_scanf_float>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	b087      	sub	sp, #28
 800a09a:	4617      	mov	r7, r2
 800a09c:	9303      	str	r3, [sp, #12]
 800a09e:	688b      	ldr	r3, [r1, #8]
 800a0a0:	1e5a      	subs	r2, r3, #1
 800a0a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a0a6:	bf81      	itttt	hi
 800a0a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800a0b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0b4:	608b      	strhi	r3, [r1, #8]
 800a0b6:	680b      	ldr	r3, [r1, #0]
 800a0b8:	460a      	mov	r2, r1
 800a0ba:	f04f 0500 	mov.w	r5, #0
 800a0be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a0c2:	f842 3b1c 	str.w	r3, [r2], #28
 800a0c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	bf98      	it	ls
 800a0d0:	f04f 0b00 	movls.w	fp, #0
 800a0d4:	9201      	str	r2, [sp, #4]
 800a0d6:	4616      	mov	r6, r2
 800a0d8:	46aa      	mov	sl, r5
 800a0da:	46a9      	mov	r9, r5
 800a0dc:	9502      	str	r5, [sp, #8]
 800a0de:	68a2      	ldr	r2, [r4, #8]
 800a0e0:	b152      	cbz	r2, 800a0f8 <_scanf_float+0x64>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b4e      	cmp	r3, #78	@ 0x4e
 800a0e8:	d864      	bhi.n	800a1b4 <_scanf_float+0x120>
 800a0ea:	2b40      	cmp	r3, #64	@ 0x40
 800a0ec:	d83c      	bhi.n	800a168 <_scanf_float+0xd4>
 800a0ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a0f2:	b2c8      	uxtb	r0, r1
 800a0f4:	280e      	cmp	r0, #14
 800a0f6:	d93a      	bls.n	800a16e <_scanf_float+0xda>
 800a0f8:	f1b9 0f00 	cmp.w	r9, #0
 800a0fc:	d003      	beq.n	800a106 <_scanf_float+0x72>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a10a:	f1ba 0f01 	cmp.w	sl, #1
 800a10e:	f200 8117 	bhi.w	800a340 <_scanf_float+0x2ac>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	429e      	cmp	r6, r3
 800a116:	f200 8108 	bhi.w	800a32a <_scanf_float+0x296>
 800a11a:	2001      	movs	r0, #1
 800a11c:	b007      	add	sp, #28
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a126:	2a0d      	cmp	r2, #13
 800a128:	d8e6      	bhi.n	800a0f8 <_scanf_float+0x64>
 800a12a:	a101      	add	r1, pc, #4	@ (adr r1, 800a130 <_scanf_float+0x9c>)
 800a12c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a130:	0800a277 	.word	0x0800a277
 800a134:	0800a0f9 	.word	0x0800a0f9
 800a138:	0800a0f9 	.word	0x0800a0f9
 800a13c:	0800a0f9 	.word	0x0800a0f9
 800a140:	0800a2d7 	.word	0x0800a2d7
 800a144:	0800a2af 	.word	0x0800a2af
 800a148:	0800a0f9 	.word	0x0800a0f9
 800a14c:	0800a0f9 	.word	0x0800a0f9
 800a150:	0800a285 	.word	0x0800a285
 800a154:	0800a0f9 	.word	0x0800a0f9
 800a158:	0800a0f9 	.word	0x0800a0f9
 800a15c:	0800a0f9 	.word	0x0800a0f9
 800a160:	0800a0f9 	.word	0x0800a0f9
 800a164:	0800a23d 	.word	0x0800a23d
 800a168:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a16c:	e7db      	b.n	800a126 <_scanf_float+0x92>
 800a16e:	290e      	cmp	r1, #14
 800a170:	d8c2      	bhi.n	800a0f8 <_scanf_float+0x64>
 800a172:	a001      	add	r0, pc, #4	@ (adr r0, 800a178 <_scanf_float+0xe4>)
 800a174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a178:	0800a22d 	.word	0x0800a22d
 800a17c:	0800a0f9 	.word	0x0800a0f9
 800a180:	0800a22d 	.word	0x0800a22d
 800a184:	0800a2c3 	.word	0x0800a2c3
 800a188:	0800a0f9 	.word	0x0800a0f9
 800a18c:	0800a1d5 	.word	0x0800a1d5
 800a190:	0800a213 	.word	0x0800a213
 800a194:	0800a213 	.word	0x0800a213
 800a198:	0800a213 	.word	0x0800a213
 800a19c:	0800a213 	.word	0x0800a213
 800a1a0:	0800a213 	.word	0x0800a213
 800a1a4:	0800a213 	.word	0x0800a213
 800a1a8:	0800a213 	.word	0x0800a213
 800a1ac:	0800a213 	.word	0x0800a213
 800a1b0:	0800a213 	.word	0x0800a213
 800a1b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1b6:	d809      	bhi.n	800a1cc <_scanf_float+0x138>
 800a1b8:	2b60      	cmp	r3, #96	@ 0x60
 800a1ba:	d8b2      	bhi.n	800a122 <_scanf_float+0x8e>
 800a1bc:	2b54      	cmp	r3, #84	@ 0x54
 800a1be:	d07b      	beq.n	800a2b8 <_scanf_float+0x224>
 800a1c0:	2b59      	cmp	r3, #89	@ 0x59
 800a1c2:	d199      	bne.n	800a0f8 <_scanf_float+0x64>
 800a1c4:	2d07      	cmp	r5, #7
 800a1c6:	d197      	bne.n	800a0f8 <_scanf_float+0x64>
 800a1c8:	2508      	movs	r5, #8
 800a1ca:	e02c      	b.n	800a226 <_scanf_float+0x192>
 800a1cc:	2b74      	cmp	r3, #116	@ 0x74
 800a1ce:	d073      	beq.n	800a2b8 <_scanf_float+0x224>
 800a1d0:	2b79      	cmp	r3, #121	@ 0x79
 800a1d2:	e7f6      	b.n	800a1c2 <_scanf_float+0x12e>
 800a1d4:	6821      	ldr	r1, [r4, #0]
 800a1d6:	05c8      	lsls	r0, r1, #23
 800a1d8:	d51b      	bpl.n	800a212 <_scanf_float+0x17e>
 800a1da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a1de:	6021      	str	r1, [r4, #0]
 800a1e0:	f109 0901 	add.w	r9, r9, #1
 800a1e4:	f1bb 0f00 	cmp.w	fp, #0
 800a1e8:	d003      	beq.n	800a1f2 <_scanf_float+0x15e>
 800a1ea:	3201      	adds	r2, #1
 800a1ec:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a1f0:	60a2      	str	r2, [r4, #8]
 800a1f2:	68a3      	ldr	r3, [r4, #8]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	60a3      	str	r3, [r4, #8]
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3b01      	subs	r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	607b      	str	r3, [r7, #4]
 800a206:	f340 8087 	ble.w	800a318 <_scanf_float+0x284>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	3301      	adds	r3, #1
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	e765      	b.n	800a0de <_scanf_float+0x4a>
 800a212:	eb1a 0105 	adds.w	r1, sl, r5
 800a216:	f47f af6f 	bne.w	800a0f8 <_scanf_float+0x64>
 800a21a:	6822      	ldr	r2, [r4, #0]
 800a21c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	460d      	mov	r5, r1
 800a224:	468a      	mov	sl, r1
 800a226:	f806 3b01 	strb.w	r3, [r6], #1
 800a22a:	e7e2      	b.n	800a1f2 <_scanf_float+0x15e>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	0610      	lsls	r0, r2, #24
 800a230:	f57f af62 	bpl.w	800a0f8 <_scanf_float+0x64>
 800a234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a238:	6022      	str	r2, [r4, #0]
 800a23a:	e7f4      	b.n	800a226 <_scanf_float+0x192>
 800a23c:	f1ba 0f00 	cmp.w	sl, #0
 800a240:	d10e      	bne.n	800a260 <_scanf_float+0x1cc>
 800a242:	f1b9 0f00 	cmp.w	r9, #0
 800a246:	d10e      	bne.n	800a266 <_scanf_float+0x1d2>
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a24e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a252:	d108      	bne.n	800a266 <_scanf_float+0x1d2>
 800a254:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a258:	6022      	str	r2, [r4, #0]
 800a25a:	f04f 0a01 	mov.w	sl, #1
 800a25e:	e7e2      	b.n	800a226 <_scanf_float+0x192>
 800a260:	f1ba 0f02 	cmp.w	sl, #2
 800a264:	d055      	beq.n	800a312 <_scanf_float+0x27e>
 800a266:	2d01      	cmp	r5, #1
 800a268:	d002      	beq.n	800a270 <_scanf_float+0x1dc>
 800a26a:	2d04      	cmp	r5, #4
 800a26c:	f47f af44 	bne.w	800a0f8 <_scanf_float+0x64>
 800a270:	3501      	adds	r5, #1
 800a272:	b2ed      	uxtb	r5, r5
 800a274:	e7d7      	b.n	800a226 <_scanf_float+0x192>
 800a276:	f1ba 0f01 	cmp.w	sl, #1
 800a27a:	f47f af3d 	bne.w	800a0f8 <_scanf_float+0x64>
 800a27e:	f04f 0a02 	mov.w	sl, #2
 800a282:	e7d0      	b.n	800a226 <_scanf_float+0x192>
 800a284:	b97d      	cbnz	r5, 800a2a6 <_scanf_float+0x212>
 800a286:	f1b9 0f00 	cmp.w	r9, #0
 800a28a:	f47f af38 	bne.w	800a0fe <_scanf_float+0x6a>
 800a28e:	6822      	ldr	r2, [r4, #0]
 800a290:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a294:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a298:	f040 8108 	bne.w	800a4ac <_scanf_float+0x418>
 800a29c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2a0:	6022      	str	r2, [r4, #0]
 800a2a2:	2501      	movs	r5, #1
 800a2a4:	e7bf      	b.n	800a226 <_scanf_float+0x192>
 800a2a6:	2d03      	cmp	r5, #3
 800a2a8:	d0e2      	beq.n	800a270 <_scanf_float+0x1dc>
 800a2aa:	2d05      	cmp	r5, #5
 800a2ac:	e7de      	b.n	800a26c <_scanf_float+0x1d8>
 800a2ae:	2d02      	cmp	r5, #2
 800a2b0:	f47f af22 	bne.w	800a0f8 <_scanf_float+0x64>
 800a2b4:	2503      	movs	r5, #3
 800a2b6:	e7b6      	b.n	800a226 <_scanf_float+0x192>
 800a2b8:	2d06      	cmp	r5, #6
 800a2ba:	f47f af1d 	bne.w	800a0f8 <_scanf_float+0x64>
 800a2be:	2507      	movs	r5, #7
 800a2c0:	e7b1      	b.n	800a226 <_scanf_float+0x192>
 800a2c2:	6822      	ldr	r2, [r4, #0]
 800a2c4:	0591      	lsls	r1, r2, #22
 800a2c6:	f57f af17 	bpl.w	800a0f8 <_scanf_float+0x64>
 800a2ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2d4:	e7a7      	b.n	800a226 <_scanf_float+0x192>
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a2dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a2e0:	d006      	beq.n	800a2f0 <_scanf_float+0x25c>
 800a2e2:	0550      	lsls	r0, r2, #21
 800a2e4:	f57f af08 	bpl.w	800a0f8 <_scanf_float+0x64>
 800a2e8:	f1b9 0f00 	cmp.w	r9, #0
 800a2ec:	f000 80de 	beq.w	800a4ac <_scanf_float+0x418>
 800a2f0:	0591      	lsls	r1, r2, #22
 800a2f2:	bf58      	it	pl
 800a2f4:	9902      	ldrpl	r1, [sp, #8]
 800a2f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2fa:	bf58      	it	pl
 800a2fc:	eba9 0101 	subpl.w	r1, r9, r1
 800a300:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a304:	bf58      	it	pl
 800a306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a30a:	6022      	str	r2, [r4, #0]
 800a30c:	f04f 0900 	mov.w	r9, #0
 800a310:	e789      	b.n	800a226 <_scanf_float+0x192>
 800a312:	f04f 0a03 	mov.w	sl, #3
 800a316:	e786      	b.n	800a226 <_scanf_float+0x192>
 800a318:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a31c:	4639      	mov	r1, r7
 800a31e:	4640      	mov	r0, r8
 800a320:	4798      	blx	r3
 800a322:	2800      	cmp	r0, #0
 800a324:	f43f aedb 	beq.w	800a0de <_scanf_float+0x4a>
 800a328:	e6e6      	b.n	800a0f8 <_scanf_float+0x64>
 800a32a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a32e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a332:	463a      	mov	r2, r7
 800a334:	4640      	mov	r0, r8
 800a336:	4798      	blx	r3
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	e6e8      	b.n	800a112 <_scanf_float+0x7e>
 800a340:	1e6b      	subs	r3, r5, #1
 800a342:	2b06      	cmp	r3, #6
 800a344:	d824      	bhi.n	800a390 <_scanf_float+0x2fc>
 800a346:	2d02      	cmp	r5, #2
 800a348:	d836      	bhi.n	800a3b8 <_scanf_float+0x324>
 800a34a:	9b01      	ldr	r3, [sp, #4]
 800a34c:	429e      	cmp	r6, r3
 800a34e:	f67f aee4 	bls.w	800a11a <_scanf_float+0x86>
 800a352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a35a:	463a      	mov	r2, r7
 800a35c:	4640      	mov	r0, r8
 800a35e:	4798      	blx	r3
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	3b01      	subs	r3, #1
 800a364:	6123      	str	r3, [r4, #16]
 800a366:	e7f0      	b.n	800a34a <_scanf_float+0x2b6>
 800a368:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a36c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a370:	463a      	mov	r2, r7
 800a372:	4640      	mov	r0, r8
 800a374:	4798      	blx	r3
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	3b01      	subs	r3, #1
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a380:	fa5f fa8a 	uxtb.w	sl, sl
 800a384:	f1ba 0f02 	cmp.w	sl, #2
 800a388:	d1ee      	bne.n	800a368 <_scanf_float+0x2d4>
 800a38a:	3d03      	subs	r5, #3
 800a38c:	b2ed      	uxtb	r5, r5
 800a38e:	1b76      	subs	r6, r6, r5
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	05da      	lsls	r2, r3, #23
 800a394:	d530      	bpl.n	800a3f8 <_scanf_float+0x364>
 800a396:	055b      	lsls	r3, r3, #21
 800a398:	d511      	bpl.n	800a3be <_scanf_float+0x32a>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	429e      	cmp	r6, r3
 800a39e:	f67f aebc 	bls.w	800a11a <_scanf_float+0x86>
 800a3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3aa:	463a      	mov	r2, r7
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	4798      	blx	r3
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	6123      	str	r3, [r4, #16]
 800a3b6:	e7f0      	b.n	800a39a <_scanf_float+0x306>
 800a3b8:	46aa      	mov	sl, r5
 800a3ba:	46b3      	mov	fp, r6
 800a3bc:	e7de      	b.n	800a37c <_scanf_float+0x2e8>
 800a3be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	2965      	cmp	r1, #101	@ 0x65
 800a3c6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a3ca:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	d00c      	beq.n	800a3ec <_scanf_float+0x358>
 800a3d2:	2945      	cmp	r1, #69	@ 0x45
 800a3d4:	d00a      	beq.n	800a3ec <_scanf_float+0x358>
 800a3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3da:	463a      	mov	r2, r7
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4798      	blx	r3
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	1eb5      	subs	r5, r6, #2
 800a3ea:	6123      	str	r3, [r4, #16]
 800a3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3f0:	463a      	mov	r2, r7
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4798      	blx	r3
 800a3f6:	462e      	mov	r6, r5
 800a3f8:	6822      	ldr	r2, [r4, #0]
 800a3fa:	f012 0210 	ands.w	r2, r2, #16
 800a3fe:	d001      	beq.n	800a404 <_scanf_float+0x370>
 800a400:	2000      	movs	r0, #0
 800a402:	e68b      	b.n	800a11c <_scanf_float+0x88>
 800a404:	7032      	strb	r2, [r6, #0]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a40c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a410:	d11c      	bne.n	800a44c <_scanf_float+0x3b8>
 800a412:	9b02      	ldr	r3, [sp, #8]
 800a414:	454b      	cmp	r3, r9
 800a416:	eba3 0209 	sub.w	r2, r3, r9
 800a41a:	d123      	bne.n	800a464 <_scanf_float+0x3d0>
 800a41c:	9901      	ldr	r1, [sp, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	4640      	mov	r0, r8
 800a422:	f000 ff11 	bl	800b248 <_strtod_r>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	6821      	ldr	r1, [r4, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f011 0f02 	tst.w	r1, #2
 800a430:	ec57 6b10 	vmov	r6, r7, d0
 800a434:	f103 0204 	add.w	r2, r3, #4
 800a438:	d01f      	beq.n	800a47a <_scanf_float+0x3e6>
 800a43a:	9903      	ldr	r1, [sp, #12]
 800a43c:	600a      	str	r2, [r1, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	e9c3 6700 	strd	r6, r7, [r3]
 800a444:	68e3      	ldr	r3, [r4, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60e3      	str	r3, [r4, #12]
 800a44a:	e7d9      	b.n	800a400 <_scanf_float+0x36c>
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0e4      	beq.n	800a41c <_scanf_float+0x388>
 800a452:	9905      	ldr	r1, [sp, #20]
 800a454:	230a      	movs	r3, #10
 800a456:	3101      	adds	r1, #1
 800a458:	4640      	mov	r0, r8
 800a45a:	f000 ff75 	bl	800b348 <_strtol_r>
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	9e05      	ldr	r6, [sp, #20]
 800a462:	1ac2      	subs	r2, r0, r3
 800a464:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a468:	429e      	cmp	r6, r3
 800a46a:	bf28      	it	cs
 800a46c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a470:	4910      	ldr	r1, [pc, #64]	@ (800a4b4 <_scanf_float+0x420>)
 800a472:	4630      	mov	r0, r6
 800a474:	f000 f822 	bl	800a4bc <siprintf>
 800a478:	e7d0      	b.n	800a41c <_scanf_float+0x388>
 800a47a:	f011 0f04 	tst.w	r1, #4
 800a47e:	9903      	ldr	r1, [sp, #12]
 800a480:	600a      	str	r2, [r1, #0]
 800a482:	d1dc      	bne.n	800a43e <_scanf_float+0x3aa>
 800a484:	681d      	ldr	r5, [r3, #0]
 800a486:	4632      	mov	r2, r6
 800a488:	463b      	mov	r3, r7
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f6 fb55 	bl	8000b3c <__aeabi_dcmpun>
 800a492:	b128      	cbz	r0, 800a4a0 <_scanf_float+0x40c>
 800a494:	4808      	ldr	r0, [pc, #32]	@ (800a4b8 <_scanf_float+0x424>)
 800a496:	f000 ffeb 	bl	800b470 <nanf>
 800a49a:	ed85 0a00 	vstr	s0, [r5]
 800a49e:	e7d1      	b.n	800a444 <_scanf_float+0x3b0>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fba8 	bl	8000bf8 <__aeabi_d2f>
 800a4a8:	6028      	str	r0, [r5, #0]
 800a4aa:	e7cb      	b.n	800a444 <_scanf_float+0x3b0>
 800a4ac:	f04f 0900 	mov.w	r9, #0
 800a4b0:	e629      	b.n	800a106 <_scanf_float+0x72>
 800a4b2:	bf00      	nop
 800a4b4:	0800dfd4 	.word	0x0800dfd4
 800a4b8:	0800e3cb 	.word	0x0800e3cb

0800a4bc <siprintf>:
 800a4bc:	b40e      	push	{r1, r2, r3}
 800a4be:	b500      	push	{lr}
 800a4c0:	b09c      	sub	sp, #112	@ 0x70
 800a4c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a4c4:	9002      	str	r0, [sp, #8]
 800a4c6:	9006      	str	r0, [sp, #24]
 800a4c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4cc:	4809      	ldr	r0, [pc, #36]	@ (800a4f4 <siprintf+0x38>)
 800a4ce:	9107      	str	r1, [sp, #28]
 800a4d0:	9104      	str	r1, [sp, #16]
 800a4d2:	4909      	ldr	r1, [pc, #36]	@ (800a4f8 <siprintf+0x3c>)
 800a4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d8:	9105      	str	r1, [sp, #20]
 800a4da:	6800      	ldr	r0, [r0, #0]
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	a902      	add	r1, sp, #8
 800a4e0:	f002 f9ae 	bl	800c840 <_svfiprintf_r>
 800a4e4:	9b02      	ldr	r3, [sp, #8]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	b01c      	add	sp, #112	@ 0x70
 800a4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4f0:	b003      	add	sp, #12
 800a4f2:	4770      	bx	lr
 800a4f4:	20000184 	.word	0x20000184
 800a4f8:	ffff0208 	.word	0xffff0208

0800a4fc <std>:
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	b510      	push	{r4, lr}
 800a500:	4604      	mov	r4, r0
 800a502:	e9c0 3300 	strd	r3, r3, [r0]
 800a506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a50a:	6083      	str	r3, [r0, #8]
 800a50c:	8181      	strh	r1, [r0, #12]
 800a50e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a510:	81c2      	strh	r2, [r0, #14]
 800a512:	6183      	str	r3, [r0, #24]
 800a514:	4619      	mov	r1, r3
 800a516:	2208      	movs	r2, #8
 800a518:	305c      	adds	r0, #92	@ 0x5c
 800a51a:	f000 ff59 	bl	800b3d0 <memset>
 800a51e:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <std+0x58>)
 800a520:	6263      	str	r3, [r4, #36]	@ 0x24
 800a522:	4b0d      	ldr	r3, [pc, #52]	@ (800a558 <std+0x5c>)
 800a524:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a526:	4b0d      	ldr	r3, [pc, #52]	@ (800a55c <std+0x60>)
 800a528:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a52a:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <std+0x64>)
 800a52c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a52e:	4b0d      	ldr	r3, [pc, #52]	@ (800a564 <std+0x68>)
 800a530:	6224      	str	r4, [r4, #32]
 800a532:	429c      	cmp	r4, r3
 800a534:	d006      	beq.n	800a544 <std+0x48>
 800a536:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a53a:	4294      	cmp	r4, r2
 800a53c:	d002      	beq.n	800a544 <std+0x48>
 800a53e:	33d0      	adds	r3, #208	@ 0xd0
 800a540:	429c      	cmp	r4, r3
 800a542:	d105      	bne.n	800a550 <std+0x54>
 800a544:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f000 bf76 	b.w	800b43c <__retarget_lock_init_recursive>
 800a550:	bd10      	pop	{r4, pc}
 800a552:	bf00      	nop
 800a554:	0800d909 	.word	0x0800d909
 800a558:	0800d92b 	.word	0x0800d92b
 800a55c:	0800d963 	.word	0x0800d963
 800a560:	0800d987 	.word	0x0800d987
 800a564:	2000063c 	.word	0x2000063c

0800a568 <stdio_exit_handler>:
 800a568:	4a02      	ldr	r2, [pc, #8]	@ (800a574 <stdio_exit_handler+0xc>)
 800a56a:	4903      	ldr	r1, [pc, #12]	@ (800a578 <stdio_exit_handler+0x10>)
 800a56c:	4803      	ldr	r0, [pc, #12]	@ (800a57c <stdio_exit_handler+0x14>)
 800a56e:	f000 beed 	b.w	800b34c <_fwalk_sglue>
 800a572:	bf00      	nop
 800a574:	2000000c 	.word	0x2000000c
 800a578:	0800cf3d 	.word	0x0800cf3d
 800a57c:	20000188 	.word	0x20000188

0800a580 <cleanup_stdio>:
 800a580:	6841      	ldr	r1, [r0, #4]
 800a582:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <cleanup_stdio+0x34>)
 800a584:	4299      	cmp	r1, r3
 800a586:	b510      	push	{r4, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	d001      	beq.n	800a590 <cleanup_stdio+0x10>
 800a58c:	f002 fcd6 	bl	800cf3c <_fflush_r>
 800a590:	68a1      	ldr	r1, [r4, #8]
 800a592:	4b09      	ldr	r3, [pc, #36]	@ (800a5b8 <cleanup_stdio+0x38>)
 800a594:	4299      	cmp	r1, r3
 800a596:	d002      	beq.n	800a59e <cleanup_stdio+0x1e>
 800a598:	4620      	mov	r0, r4
 800a59a:	f002 fccf 	bl	800cf3c <_fflush_r>
 800a59e:	68e1      	ldr	r1, [r4, #12]
 800a5a0:	4b06      	ldr	r3, [pc, #24]	@ (800a5bc <cleanup_stdio+0x3c>)
 800a5a2:	4299      	cmp	r1, r3
 800a5a4:	d004      	beq.n	800a5b0 <cleanup_stdio+0x30>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ac:	f002 bcc6 	b.w	800cf3c <_fflush_r>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000063c 	.word	0x2000063c
 800a5b8:	200006a4 	.word	0x200006a4
 800a5bc:	2000070c 	.word	0x2000070c

0800a5c0 <global_stdio_init.part.0>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <global_stdio_init.part.0+0x30>)
 800a5c4:	4c0b      	ldr	r4, [pc, #44]	@ (800a5f4 <global_stdio_init.part.0+0x34>)
 800a5c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a5f8 <global_stdio_init.part.0+0x38>)
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2104      	movs	r1, #4
 800a5d0:	f7ff ff94 	bl	800a4fc <std>
 800a5d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5d8:	2201      	movs	r2, #1
 800a5da:	2109      	movs	r1, #9
 800a5dc:	f7ff ff8e 	bl	800a4fc <std>
 800a5e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ea:	2112      	movs	r1, #18
 800a5ec:	f7ff bf86 	b.w	800a4fc <std>
 800a5f0:	20000774 	.word	0x20000774
 800a5f4:	2000063c 	.word	0x2000063c
 800a5f8:	0800a569 	.word	0x0800a569

0800a5fc <__sfp_lock_acquire>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	@ (800a604 <__sfp_lock_acquire+0x8>)
 800a5fe:	f000 bf1e 	b.w	800b43e <__retarget_lock_acquire_recursive>
 800a602:	bf00      	nop
 800a604:	20000779 	.word	0x20000779

0800a608 <__sfp_lock_release>:
 800a608:	4801      	ldr	r0, [pc, #4]	@ (800a610 <__sfp_lock_release+0x8>)
 800a60a:	f000 bf19 	b.w	800b440 <__retarget_lock_release_recursive>
 800a60e:	bf00      	nop
 800a610:	20000779 	.word	0x20000779

0800a614 <__sinit>:
 800a614:	b510      	push	{r4, lr}
 800a616:	4604      	mov	r4, r0
 800a618:	f7ff fff0 	bl	800a5fc <__sfp_lock_acquire>
 800a61c:	6a23      	ldr	r3, [r4, #32]
 800a61e:	b11b      	cbz	r3, 800a628 <__sinit+0x14>
 800a620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a624:	f7ff bff0 	b.w	800a608 <__sfp_lock_release>
 800a628:	4b04      	ldr	r3, [pc, #16]	@ (800a63c <__sinit+0x28>)
 800a62a:	6223      	str	r3, [r4, #32]
 800a62c:	4b04      	ldr	r3, [pc, #16]	@ (800a640 <__sinit+0x2c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1f5      	bne.n	800a620 <__sinit+0xc>
 800a634:	f7ff ffc4 	bl	800a5c0 <global_stdio_init.part.0>
 800a638:	e7f2      	b.n	800a620 <__sinit+0xc>
 800a63a:	bf00      	nop
 800a63c:	0800a581 	.word	0x0800a581
 800a640:	20000774 	.word	0x20000774

0800a644 <sulp>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4604      	mov	r4, r0
 800a648:	460d      	mov	r5, r1
 800a64a:	ec45 4b10 	vmov	d0, r4, r5
 800a64e:	4616      	mov	r6, r2
 800a650:	f003 f81c 	bl	800d68c <__ulp>
 800a654:	ec51 0b10 	vmov	r0, r1, d0
 800a658:	b17e      	cbz	r6, 800a67a <sulp+0x36>
 800a65a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a65e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a662:	2b00      	cmp	r3, #0
 800a664:	dd09      	ble.n	800a67a <sulp+0x36>
 800a666:	051b      	lsls	r3, r3, #20
 800a668:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a66c:	2400      	movs	r4, #0
 800a66e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a672:	4622      	mov	r2, r4
 800a674:	462b      	mov	r3, r5
 800a676:	f7f5 ffc7 	bl	8000608 <__aeabi_dmul>
 800a67a:	ec41 0b10 	vmov	d0, r0, r1
 800a67e:	bd70      	pop	{r4, r5, r6, pc}

0800a680 <_strtod_l>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	b09f      	sub	sp, #124	@ 0x7c
 800a686:	460c      	mov	r4, r1
 800a688:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a68a:	2200      	movs	r2, #0
 800a68c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a68e:	9005      	str	r0, [sp, #20]
 800a690:	f04f 0a00 	mov.w	sl, #0
 800a694:	f04f 0b00 	mov.w	fp, #0
 800a698:	460a      	mov	r2, r1
 800a69a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a69c:	7811      	ldrb	r1, [r2, #0]
 800a69e:	292b      	cmp	r1, #43	@ 0x2b
 800a6a0:	d04a      	beq.n	800a738 <_strtod_l+0xb8>
 800a6a2:	d838      	bhi.n	800a716 <_strtod_l+0x96>
 800a6a4:	290d      	cmp	r1, #13
 800a6a6:	d832      	bhi.n	800a70e <_strtod_l+0x8e>
 800a6a8:	2908      	cmp	r1, #8
 800a6aa:	d832      	bhi.n	800a712 <_strtod_l+0x92>
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	d03b      	beq.n	800a728 <_strtod_l+0xa8>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a6b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a6b6:	782a      	ldrb	r2, [r5, #0]
 800a6b8:	2a30      	cmp	r2, #48	@ 0x30
 800a6ba:	f040 80b3 	bne.w	800a824 <_strtod_l+0x1a4>
 800a6be:	786a      	ldrb	r2, [r5, #1]
 800a6c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6c4:	2a58      	cmp	r2, #88	@ 0x58
 800a6c6:	d16e      	bne.n	800a7a6 <_strtod_l+0x126>
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	4a8e      	ldr	r2, [pc, #568]	@ (800a90c <_strtod_l+0x28c>)
 800a6d4:	9805      	ldr	r0, [sp, #20]
 800a6d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6d8:	a919      	add	r1, sp, #100	@ 0x64
 800a6da:	f001 fd85 	bl	800c1e8 <__gethex>
 800a6de:	f010 060f 	ands.w	r6, r0, #15
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	d005      	beq.n	800a6f2 <_strtod_l+0x72>
 800a6e6:	2e06      	cmp	r6, #6
 800a6e8:	d128      	bne.n	800a73c <_strtod_l+0xbc>
 800a6ea:	3501      	adds	r5, #1
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 858e 	bne.w	800b216 <_strtod_l+0xb96>
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6fc:	b1cb      	cbz	r3, 800a732 <_strtod_l+0xb2>
 800a6fe:	4652      	mov	r2, sl
 800a700:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a704:	ec43 2b10 	vmov	d0, r2, r3
 800a708:	b01f      	add	sp, #124	@ 0x7c
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	2920      	cmp	r1, #32
 800a710:	d1ce      	bne.n	800a6b0 <_strtod_l+0x30>
 800a712:	3201      	adds	r2, #1
 800a714:	e7c1      	b.n	800a69a <_strtod_l+0x1a>
 800a716:	292d      	cmp	r1, #45	@ 0x2d
 800a718:	d1ca      	bne.n	800a6b0 <_strtod_l+0x30>
 800a71a:	2101      	movs	r1, #1
 800a71c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a71e:	1c51      	adds	r1, r2, #1
 800a720:	9119      	str	r1, [sp, #100]	@ 0x64
 800a722:	7852      	ldrb	r2, [r2, #1]
 800a724:	2a00      	cmp	r2, #0
 800a726:	d1c5      	bne.n	800a6b4 <_strtod_l+0x34>
 800a728:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a72a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 8570 	bne.w	800b212 <_strtod_l+0xb92>
 800a732:	4652      	mov	r2, sl
 800a734:	465b      	mov	r3, fp
 800a736:	e7e5      	b.n	800a704 <_strtod_l+0x84>
 800a738:	2100      	movs	r1, #0
 800a73a:	e7ef      	b.n	800a71c <_strtod_l+0x9c>
 800a73c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a73e:	b13a      	cbz	r2, 800a750 <_strtod_l+0xd0>
 800a740:	2135      	movs	r1, #53	@ 0x35
 800a742:	a81c      	add	r0, sp, #112	@ 0x70
 800a744:	f003 f89c 	bl	800d880 <__copybits>
 800a748:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a74a:	9805      	ldr	r0, [sp, #20]
 800a74c:	f002 fc6a 	bl	800d024 <_Bfree>
 800a750:	3e01      	subs	r6, #1
 800a752:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a754:	2e04      	cmp	r6, #4
 800a756:	d806      	bhi.n	800a766 <_strtod_l+0xe6>
 800a758:	e8df f006 	tbb	[pc, r6]
 800a75c:	201d0314 	.word	0x201d0314
 800a760:	14          	.byte	0x14
 800a761:	00          	.byte	0x00
 800a762:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a766:	05e1      	lsls	r1, r4, #23
 800a768:	bf48      	it	mi
 800a76a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a76e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a772:	0d1b      	lsrs	r3, r3, #20
 800a774:	051b      	lsls	r3, r3, #20
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1bb      	bne.n	800a6f2 <_strtod_l+0x72>
 800a77a:	f000 fe35 	bl	800b3e8 <__errno>
 800a77e:	2322      	movs	r3, #34	@ 0x22
 800a780:	6003      	str	r3, [r0, #0]
 800a782:	e7b6      	b.n	800a6f2 <_strtod_l+0x72>
 800a784:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a788:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a78c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a790:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a794:	e7e7      	b.n	800a766 <_strtod_l+0xe6>
 800a796:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a914 <_strtod_l+0x294>
 800a79a:	e7e4      	b.n	800a766 <_strtod_l+0xe6>
 800a79c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a7a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a7a4:	e7df      	b.n	800a766 <_strtod_l+0xe6>
 800a7a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	2b30      	cmp	r3, #48	@ 0x30
 800a7b0:	d0f9      	beq.n	800a7a6 <_strtod_l+0x126>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d09d      	beq.n	800a6f2 <_strtod_l+0x72>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9308      	str	r3, [sp, #32]
 800a7c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7c4:	461f      	mov	r7, r3
 800a7c6:	220a      	movs	r2, #10
 800a7c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a7ca:	7805      	ldrb	r5, [r0, #0]
 800a7cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7d0:	b2d9      	uxtb	r1, r3
 800a7d2:	2909      	cmp	r1, #9
 800a7d4:	d928      	bls.n	800a828 <_strtod_l+0x1a8>
 800a7d6:	494e      	ldr	r1, [pc, #312]	@ (800a910 <_strtod_l+0x290>)
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f000 fde7 	bl	800b3ac <strncmp>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d032      	beq.n	800a848 <_strtod_l+0x1c8>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	463d      	mov	r5, r7
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2a65      	cmp	r2, #101	@ 0x65
 800a7ee:	d001      	beq.n	800a7f4 <_strtod_l+0x174>
 800a7f0:	2a45      	cmp	r2, #69	@ 0x45
 800a7f2:	d114      	bne.n	800a81e <_strtod_l+0x19e>
 800a7f4:	b91d      	cbnz	r5, 800a7fe <_strtod_l+0x17e>
 800a7f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7f8:	4302      	orrs	r2, r0
 800a7fa:	d095      	beq.n	800a728 <_strtod_l+0xa8>
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a800:	1c62      	adds	r2, r4, #1
 800a802:	9219      	str	r2, [sp, #100]	@ 0x64
 800a804:	7862      	ldrb	r2, [r4, #1]
 800a806:	2a2b      	cmp	r2, #43	@ 0x2b
 800a808:	d077      	beq.n	800a8fa <_strtod_l+0x27a>
 800a80a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a80c:	d07b      	beq.n	800a906 <_strtod_l+0x286>
 800a80e:	f04f 0c00 	mov.w	ip, #0
 800a812:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a816:	2909      	cmp	r1, #9
 800a818:	f240 8082 	bls.w	800a920 <_strtod_l+0x2a0>
 800a81c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a81e:	f04f 0800 	mov.w	r8, #0
 800a822:	e0a2      	b.n	800a96a <_strtod_l+0x2ea>
 800a824:	2300      	movs	r3, #0
 800a826:	e7c7      	b.n	800a7b8 <_strtod_l+0x138>
 800a828:	2f08      	cmp	r7, #8
 800a82a:	bfd5      	itete	le
 800a82c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a82e:	9908      	ldrgt	r1, [sp, #32]
 800a830:	fb02 3301 	mlale	r3, r2, r1, r3
 800a834:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a838:	f100 0001 	add.w	r0, r0, #1
 800a83c:	bfd4      	ite	le
 800a83e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a840:	9308      	strgt	r3, [sp, #32]
 800a842:	3701      	adds	r7, #1
 800a844:	9019      	str	r0, [sp, #100]	@ 0x64
 800a846:	e7bf      	b.n	800a7c8 <_strtod_l+0x148>
 800a848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a84e:	785a      	ldrb	r2, [r3, #1]
 800a850:	b37f      	cbz	r7, 800a8b2 <_strtod_l+0x232>
 800a852:	4681      	mov	r9, r0
 800a854:	463d      	mov	r5, r7
 800a856:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a85a:	2b09      	cmp	r3, #9
 800a85c:	d912      	bls.n	800a884 <_strtod_l+0x204>
 800a85e:	2301      	movs	r3, #1
 800a860:	e7c4      	b.n	800a7ec <_strtod_l+0x16c>
 800a862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	9219      	str	r2, [sp, #100]	@ 0x64
 800a868:	785a      	ldrb	r2, [r3, #1]
 800a86a:	3001      	adds	r0, #1
 800a86c:	2a30      	cmp	r2, #48	@ 0x30
 800a86e:	d0f8      	beq.n	800a862 <_strtod_l+0x1e2>
 800a870:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a874:	2b08      	cmp	r3, #8
 800a876:	f200 84d3 	bhi.w	800b220 <_strtod_l+0xba0>
 800a87a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a87c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a87e:	4681      	mov	r9, r0
 800a880:	2000      	movs	r0, #0
 800a882:	4605      	mov	r5, r0
 800a884:	3a30      	subs	r2, #48	@ 0x30
 800a886:	f100 0301 	add.w	r3, r0, #1
 800a88a:	d02a      	beq.n	800a8e2 <_strtod_l+0x262>
 800a88c:	4499      	add	r9, r3
 800a88e:	eb00 0c05 	add.w	ip, r0, r5
 800a892:	462b      	mov	r3, r5
 800a894:	210a      	movs	r1, #10
 800a896:	4563      	cmp	r3, ip
 800a898:	d10d      	bne.n	800a8b6 <_strtod_l+0x236>
 800a89a:	1c69      	adds	r1, r5, #1
 800a89c:	4401      	add	r1, r0
 800a89e:	4428      	add	r0, r5
 800a8a0:	2808      	cmp	r0, #8
 800a8a2:	dc16      	bgt.n	800a8d2 <_strtod_l+0x252>
 800a8a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8a6:	230a      	movs	r3, #10
 800a8a8:	fb03 2300 	mla	r3, r3, r0, r2
 800a8ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e018      	b.n	800a8e4 <_strtod_l+0x264>
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	e7da      	b.n	800a86c <_strtod_l+0x1ec>
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	f103 0301 	add.w	r3, r3, #1
 800a8bc:	dc03      	bgt.n	800a8c6 <_strtod_l+0x246>
 800a8be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a8c0:	434e      	muls	r6, r1
 800a8c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a8c4:	e7e7      	b.n	800a896 <_strtod_l+0x216>
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	bfde      	ittt	le
 800a8ca:	9e08      	ldrle	r6, [sp, #32]
 800a8cc:	434e      	mulle	r6, r1
 800a8ce:	9608      	strle	r6, [sp, #32]
 800a8d0:	e7e1      	b.n	800a896 <_strtod_l+0x216>
 800a8d2:	280f      	cmp	r0, #15
 800a8d4:	dceb      	bgt.n	800a8ae <_strtod_l+0x22e>
 800a8d6:	9808      	ldr	r0, [sp, #32]
 800a8d8:	230a      	movs	r3, #10
 800a8da:	fb03 2300 	mla	r3, r3, r0, r2
 800a8de:	9308      	str	r3, [sp, #32]
 800a8e0:	e7e5      	b.n	800a8ae <_strtod_l+0x22e>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8e6:	1c50      	adds	r0, r2, #1
 800a8e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a8ea:	7852      	ldrb	r2, [r2, #1]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	e7b1      	b.n	800a856 <_strtod_l+0x1d6>
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e77d      	b.n	800a7f6 <_strtod_l+0x176>
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	1ca2      	adds	r2, r4, #2
 800a900:	9219      	str	r2, [sp, #100]	@ 0x64
 800a902:	78a2      	ldrb	r2, [r4, #2]
 800a904:	e785      	b.n	800a812 <_strtod_l+0x192>
 800a906:	f04f 0c01 	mov.w	ip, #1
 800a90a:	e7f8      	b.n	800a8fe <_strtod_l+0x27e>
 800a90c:	0800dff0 	.word	0x0800dff0
 800a910:	0800dfd9 	.word	0x0800dfd9
 800a914:	7ff00000 	.word	0x7ff00000
 800a918:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a91a:	1c51      	adds	r1, r2, #1
 800a91c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a91e:	7852      	ldrb	r2, [r2, #1]
 800a920:	2a30      	cmp	r2, #48	@ 0x30
 800a922:	d0f9      	beq.n	800a918 <_strtod_l+0x298>
 800a924:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a928:	2908      	cmp	r1, #8
 800a92a:	f63f af78 	bhi.w	800a81e <_strtod_l+0x19e>
 800a92e:	3a30      	subs	r2, #48	@ 0x30
 800a930:	920e      	str	r2, [sp, #56]	@ 0x38
 800a932:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a934:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a936:	f04f 080a 	mov.w	r8, #10
 800a93a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a93c:	1c56      	adds	r6, r2, #1
 800a93e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a940:	7852      	ldrb	r2, [r2, #1]
 800a942:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a946:	f1be 0f09 	cmp.w	lr, #9
 800a94a:	d939      	bls.n	800a9c0 <_strtod_l+0x340>
 800a94c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a94e:	1a76      	subs	r6, r6, r1
 800a950:	2e08      	cmp	r6, #8
 800a952:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a956:	dc03      	bgt.n	800a960 <_strtod_l+0x2e0>
 800a958:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a95a:	4588      	cmp	r8, r1
 800a95c:	bfa8      	it	ge
 800a95e:	4688      	movge	r8, r1
 800a960:	f1bc 0f00 	cmp.w	ip, #0
 800a964:	d001      	beq.n	800a96a <_strtod_l+0x2ea>
 800a966:	f1c8 0800 	rsb	r8, r8, #0
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	d14e      	bne.n	800aa0c <_strtod_l+0x38c>
 800a96e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a970:	4308      	orrs	r0, r1
 800a972:	f47f aebe 	bne.w	800a6f2 <_strtod_l+0x72>
 800a976:	2b00      	cmp	r3, #0
 800a978:	f47f aed6 	bne.w	800a728 <_strtod_l+0xa8>
 800a97c:	2a69      	cmp	r2, #105	@ 0x69
 800a97e:	d028      	beq.n	800a9d2 <_strtod_l+0x352>
 800a980:	dc25      	bgt.n	800a9ce <_strtod_l+0x34e>
 800a982:	2a49      	cmp	r2, #73	@ 0x49
 800a984:	d025      	beq.n	800a9d2 <_strtod_l+0x352>
 800a986:	2a4e      	cmp	r2, #78	@ 0x4e
 800a988:	f47f aece 	bne.w	800a728 <_strtod_l+0xa8>
 800a98c:	499b      	ldr	r1, [pc, #620]	@ (800abfc <_strtod_l+0x57c>)
 800a98e:	a819      	add	r0, sp, #100	@ 0x64
 800a990:	f001 fe4c 	bl	800c62c <__match>
 800a994:	2800      	cmp	r0, #0
 800a996:	f43f aec7 	beq.w	800a728 <_strtod_l+0xa8>
 800a99a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2b28      	cmp	r3, #40	@ 0x28
 800a9a0:	d12e      	bne.n	800aa00 <_strtod_l+0x380>
 800a9a2:	4997      	ldr	r1, [pc, #604]	@ (800ac00 <_strtod_l+0x580>)
 800a9a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9a6:	a819      	add	r0, sp, #100	@ 0x64
 800a9a8:	f001 fe54 	bl	800c654 <__hexnan>
 800a9ac:	2805      	cmp	r0, #5
 800a9ae:	d127      	bne.n	800aa00 <_strtod_l+0x380>
 800a9b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a9b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a9ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a9be:	e698      	b.n	800a6f2 <_strtod_l+0x72>
 800a9c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9c2:	fb08 2101 	mla	r1, r8, r1, r2
 800a9c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a9ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9cc:	e7b5      	b.n	800a93a <_strtod_l+0x2ba>
 800a9ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9d0:	e7da      	b.n	800a988 <_strtod_l+0x308>
 800a9d2:	498c      	ldr	r1, [pc, #560]	@ (800ac04 <_strtod_l+0x584>)
 800a9d4:	a819      	add	r0, sp, #100	@ 0x64
 800a9d6:	f001 fe29 	bl	800c62c <__match>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f aea4 	beq.w	800a728 <_strtod_l+0xa8>
 800a9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9e2:	4989      	ldr	r1, [pc, #548]	@ (800ac08 <_strtod_l+0x588>)
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	a819      	add	r0, sp, #100	@ 0x64
 800a9e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9ea:	f001 fe1f 	bl	800c62c <__match>
 800a9ee:	b910      	cbnz	r0, 800a9f6 <_strtod_l+0x376>
 800a9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ac18 <_strtod_l+0x598>
 800a9fa:	f04f 0a00 	mov.w	sl, #0
 800a9fe:	e678      	b.n	800a6f2 <_strtod_l+0x72>
 800aa00:	4882      	ldr	r0, [pc, #520]	@ (800ac0c <_strtod_l+0x58c>)
 800aa02:	f000 fd2d 	bl	800b460 <nan>
 800aa06:	ec5b ab10 	vmov	sl, fp, d0
 800aa0a:	e672      	b.n	800a6f2 <_strtod_l+0x72>
 800aa0c:	eba8 0309 	sub.w	r3, r8, r9
 800aa10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	bf08      	it	eq
 800aa18:	462f      	moveq	r7, r5
 800aa1a:	2d10      	cmp	r5, #16
 800aa1c:	462c      	mov	r4, r5
 800aa1e:	bfa8      	it	ge
 800aa20:	2410      	movge	r4, #16
 800aa22:	f7f5 fd77 	bl	8000514 <__aeabi_ui2d>
 800aa26:	2d09      	cmp	r5, #9
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	dc13      	bgt.n	800aa56 <_strtod_l+0x3d6>
 800aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f43f ae5e 	beq.w	800a6f2 <_strtod_l+0x72>
 800aa36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa38:	dd78      	ble.n	800ab2c <_strtod_l+0x4ac>
 800aa3a:	2b16      	cmp	r3, #22
 800aa3c:	dc5f      	bgt.n	800aafe <_strtod_l+0x47e>
 800aa3e:	4974      	ldr	r1, [pc, #464]	@ (800ac10 <_strtod_l+0x590>)
 800aa40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa48:	4652      	mov	r2, sl
 800aa4a:	465b      	mov	r3, fp
 800aa4c:	f7f5 fddc 	bl	8000608 <__aeabi_dmul>
 800aa50:	4682      	mov	sl, r0
 800aa52:	468b      	mov	fp, r1
 800aa54:	e64d      	b.n	800a6f2 <_strtod_l+0x72>
 800aa56:	4b6e      	ldr	r3, [pc, #440]	@ (800ac10 <_strtod_l+0x590>)
 800aa58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa60:	f7f5 fdd2 	bl	8000608 <__aeabi_dmul>
 800aa64:	4682      	mov	sl, r0
 800aa66:	9808      	ldr	r0, [sp, #32]
 800aa68:	468b      	mov	fp, r1
 800aa6a:	f7f5 fd53 	bl	8000514 <__aeabi_ui2d>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4650      	mov	r0, sl
 800aa74:	4659      	mov	r1, fp
 800aa76:	f7f5 fc11 	bl	800029c <__adddf3>
 800aa7a:	2d0f      	cmp	r5, #15
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	468b      	mov	fp, r1
 800aa80:	ddd5      	ble.n	800aa2e <_strtod_l+0x3ae>
 800aa82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa84:	1b2c      	subs	r4, r5, r4
 800aa86:	441c      	add	r4, r3
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	f340 8096 	ble.w	800abba <_strtod_l+0x53a>
 800aa8e:	f014 030f 	ands.w	r3, r4, #15
 800aa92:	d00a      	beq.n	800aaaa <_strtod_l+0x42a>
 800aa94:	495e      	ldr	r1, [pc, #376]	@ (800ac10 <_strtod_l+0x590>)
 800aa96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa2:	f7f5 fdb1 	bl	8000608 <__aeabi_dmul>
 800aaa6:	4682      	mov	sl, r0
 800aaa8:	468b      	mov	fp, r1
 800aaaa:	f034 040f 	bics.w	r4, r4, #15
 800aaae:	d073      	beq.n	800ab98 <_strtod_l+0x518>
 800aab0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aab4:	dd48      	ble.n	800ab48 <_strtod_l+0x4c8>
 800aab6:	2400      	movs	r4, #0
 800aab8:	46a0      	mov	r8, r4
 800aaba:	940a      	str	r4, [sp, #40]	@ 0x28
 800aabc:	46a1      	mov	r9, r4
 800aabe:	9a05      	ldr	r2, [sp, #20]
 800aac0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac18 <_strtod_l+0x598>
 800aac4:	2322      	movs	r3, #34	@ 0x22
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	f04f 0a00 	mov.w	sl, #0
 800aacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f43f ae0f 	beq.w	800a6f2 <_strtod_l+0x72>
 800aad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aad6:	9805      	ldr	r0, [sp, #20]
 800aad8:	f002 faa4 	bl	800d024 <_Bfree>
 800aadc:	9805      	ldr	r0, [sp, #20]
 800aade:	4649      	mov	r1, r9
 800aae0:	f002 faa0 	bl	800d024 <_Bfree>
 800aae4:	9805      	ldr	r0, [sp, #20]
 800aae6:	4641      	mov	r1, r8
 800aae8:	f002 fa9c 	bl	800d024 <_Bfree>
 800aaec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	f002 fa98 	bl	800d024 <_Bfree>
 800aaf4:	9805      	ldr	r0, [sp, #20]
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	f002 fa94 	bl	800d024 <_Bfree>
 800aafc:	e5f9      	b.n	800a6f2 <_strtod_l+0x72>
 800aafe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ab04:	4293      	cmp	r3, r2
 800ab06:	dbbc      	blt.n	800aa82 <_strtod_l+0x402>
 800ab08:	4c41      	ldr	r4, [pc, #260]	@ (800ac10 <_strtod_l+0x590>)
 800ab0a:	f1c5 050f 	rsb	r5, r5, #15
 800ab0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab1a:	f7f5 fd75 	bl	8000608 <__aeabi_dmul>
 800ab1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab20:	1b5d      	subs	r5, r3, r5
 800ab22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab2a:	e78f      	b.n	800aa4c <_strtod_l+0x3cc>
 800ab2c:	3316      	adds	r3, #22
 800ab2e:	dba8      	blt.n	800aa82 <_strtod_l+0x402>
 800ab30:	4b37      	ldr	r3, [pc, #220]	@ (800ac10 <_strtod_l+0x590>)
 800ab32:	eba9 0808 	sub.w	r8, r9, r8
 800ab36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab3e:	4650      	mov	r0, sl
 800ab40:	4659      	mov	r1, fp
 800ab42:	f7f5 fe8b 	bl	800085c <__aeabi_ddiv>
 800ab46:	e783      	b.n	800aa50 <_strtod_l+0x3d0>
 800ab48:	4b32      	ldr	r3, [pc, #200]	@ (800ac14 <_strtod_l+0x594>)
 800ab4a:	9308      	str	r3, [sp, #32]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	1124      	asrs	r4, r4, #4
 800ab50:	4650      	mov	r0, sl
 800ab52:	4659      	mov	r1, fp
 800ab54:	461e      	mov	r6, r3
 800ab56:	2c01      	cmp	r4, #1
 800ab58:	dc21      	bgt.n	800ab9e <_strtod_l+0x51e>
 800ab5a:	b10b      	cbz	r3, 800ab60 <_strtod_l+0x4e0>
 800ab5c:	4682      	mov	sl, r0
 800ab5e:	468b      	mov	fp, r1
 800ab60:	492c      	ldr	r1, [pc, #176]	@ (800ac14 <_strtod_l+0x594>)
 800ab62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab72:	f7f5 fd49 	bl	8000608 <__aeabi_dmul>
 800ab76:	4b28      	ldr	r3, [pc, #160]	@ (800ac18 <_strtod_l+0x598>)
 800ab78:	460a      	mov	r2, r1
 800ab7a:	400b      	ands	r3, r1
 800ab7c:	4927      	ldr	r1, [pc, #156]	@ (800ac1c <_strtod_l+0x59c>)
 800ab7e:	428b      	cmp	r3, r1
 800ab80:	4682      	mov	sl, r0
 800ab82:	d898      	bhi.n	800aab6 <_strtod_l+0x436>
 800ab84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf86      	itte	hi
 800ab8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ac20 <_strtod_l+0x5a0>
 800ab90:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ab94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab98:	2300      	movs	r3, #0
 800ab9a:	9308      	str	r3, [sp, #32]
 800ab9c:	e07a      	b.n	800ac94 <_strtod_l+0x614>
 800ab9e:	07e2      	lsls	r2, r4, #31
 800aba0:	d505      	bpl.n	800abae <_strtod_l+0x52e>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fd2e 	bl	8000608 <__aeabi_dmul>
 800abac:	2301      	movs	r3, #1
 800abae:	9a08      	ldr	r2, [sp, #32]
 800abb0:	3208      	adds	r2, #8
 800abb2:	3601      	adds	r6, #1
 800abb4:	1064      	asrs	r4, r4, #1
 800abb6:	9208      	str	r2, [sp, #32]
 800abb8:	e7cd      	b.n	800ab56 <_strtod_l+0x4d6>
 800abba:	d0ed      	beq.n	800ab98 <_strtod_l+0x518>
 800abbc:	4264      	negs	r4, r4
 800abbe:	f014 020f 	ands.w	r2, r4, #15
 800abc2:	d00a      	beq.n	800abda <_strtod_l+0x55a>
 800abc4:	4b12      	ldr	r3, [pc, #72]	@ (800ac10 <_strtod_l+0x590>)
 800abc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abca:	4650      	mov	r0, sl
 800abcc:	4659      	mov	r1, fp
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fe43 	bl	800085c <__aeabi_ddiv>
 800abd6:	4682      	mov	sl, r0
 800abd8:	468b      	mov	fp, r1
 800abda:	1124      	asrs	r4, r4, #4
 800abdc:	d0dc      	beq.n	800ab98 <_strtod_l+0x518>
 800abde:	2c1f      	cmp	r4, #31
 800abe0:	dd20      	ble.n	800ac24 <_strtod_l+0x5a4>
 800abe2:	2400      	movs	r4, #0
 800abe4:	46a0      	mov	r8, r4
 800abe6:	940a      	str	r4, [sp, #40]	@ 0x28
 800abe8:	46a1      	mov	r9, r4
 800abea:	9a05      	ldr	r2, [sp, #20]
 800abec:	2322      	movs	r3, #34	@ 0x22
 800abee:	f04f 0a00 	mov.w	sl, #0
 800abf2:	f04f 0b00 	mov.w	fp, #0
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	e768      	b.n	800aacc <_strtod_l+0x44c>
 800abfa:	bf00      	nop
 800abfc:	0800dfad 	.word	0x0800dfad
 800ac00:	0800dfdc 	.word	0x0800dfdc
 800ac04:	0800dfa5 	.word	0x0800dfa5
 800ac08:	0800e13c 	.word	0x0800e13c
 800ac0c:	0800e3cb 	.word	0x0800e3cb
 800ac10:	0800e2c8 	.word	0x0800e2c8
 800ac14:	0800e2a0 	.word	0x0800e2a0
 800ac18:	7ff00000 	.word	0x7ff00000
 800ac1c:	7ca00000 	.word	0x7ca00000
 800ac20:	7fefffff 	.word	0x7fefffff
 800ac24:	f014 0310 	ands.w	r3, r4, #16
 800ac28:	bf18      	it	ne
 800ac2a:	236a      	movne	r3, #106	@ 0x6a
 800ac2c:	4ea9      	ldr	r6, [pc, #676]	@ (800aed4 <_strtod_l+0x854>)
 800ac2e:	9308      	str	r3, [sp, #32]
 800ac30:	4650      	mov	r0, sl
 800ac32:	4659      	mov	r1, fp
 800ac34:	2300      	movs	r3, #0
 800ac36:	07e2      	lsls	r2, r4, #31
 800ac38:	d504      	bpl.n	800ac44 <_strtod_l+0x5c4>
 800ac3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac3e:	f7f5 fce3 	bl	8000608 <__aeabi_dmul>
 800ac42:	2301      	movs	r3, #1
 800ac44:	1064      	asrs	r4, r4, #1
 800ac46:	f106 0608 	add.w	r6, r6, #8
 800ac4a:	d1f4      	bne.n	800ac36 <_strtod_l+0x5b6>
 800ac4c:	b10b      	cbz	r3, 800ac52 <_strtod_l+0x5d2>
 800ac4e:	4682      	mov	sl, r0
 800ac50:	468b      	mov	fp, r1
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	b1b3      	cbz	r3, 800ac84 <_strtod_l+0x604>
 800ac56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	4659      	mov	r1, fp
 800ac62:	dd0f      	ble.n	800ac84 <_strtod_l+0x604>
 800ac64:	2b1f      	cmp	r3, #31
 800ac66:	dd55      	ble.n	800ad14 <_strtod_l+0x694>
 800ac68:	2b34      	cmp	r3, #52	@ 0x34
 800ac6a:	bfde      	ittt	le
 800ac6c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ac70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac74:	4093      	lslle	r3, r2
 800ac76:	f04f 0a00 	mov.w	sl, #0
 800ac7a:	bfcc      	ite	gt
 800ac7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac80:	ea03 0b01 	andle.w	fp, r3, r1
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	f7f5 ff24 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d1a6      	bne.n	800abe2 <_strtod_l+0x562>
 800ac94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac9a:	9805      	ldr	r0, [sp, #20]
 800ac9c:	462b      	mov	r3, r5
 800ac9e:	463a      	mov	r2, r7
 800aca0:	f002 fa28 	bl	800d0f4 <__s2b>
 800aca4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f43f af05 	beq.w	800aab6 <_strtod_l+0x436>
 800acac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acae:	2a00      	cmp	r2, #0
 800acb0:	eba9 0308 	sub.w	r3, r9, r8
 800acb4:	bfa8      	it	ge
 800acb6:	2300      	movge	r3, #0
 800acb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800acba:	2400      	movs	r4, #0
 800acbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800acc0:	9316      	str	r3, [sp, #88]	@ 0x58
 800acc2:	46a0      	mov	r8, r4
 800acc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc6:	9805      	ldr	r0, [sp, #20]
 800acc8:	6859      	ldr	r1, [r3, #4]
 800acca:	f002 f96b 	bl	800cfa4 <_Balloc>
 800acce:	4681      	mov	r9, r0
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f43f aef4 	beq.w	800aabe <_strtod_l+0x43e>
 800acd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd8:	691a      	ldr	r2, [r3, #16]
 800acda:	3202      	adds	r2, #2
 800acdc:	f103 010c 	add.w	r1, r3, #12
 800ace0:	0092      	lsls	r2, r2, #2
 800ace2:	300c      	adds	r0, #12
 800ace4:	f000 fbad 	bl	800b442 <memcpy>
 800ace8:	ec4b ab10 	vmov	d0, sl, fp
 800acec:	9805      	ldr	r0, [sp, #20]
 800acee:	aa1c      	add	r2, sp, #112	@ 0x70
 800acf0:	a91b      	add	r1, sp, #108	@ 0x6c
 800acf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800acf6:	f002 fd39 	bl	800d76c <__d2b>
 800acfa:	901a      	str	r0, [sp, #104]	@ 0x68
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f43f aede 	beq.w	800aabe <_strtod_l+0x43e>
 800ad02:	9805      	ldr	r0, [sp, #20]
 800ad04:	2101      	movs	r1, #1
 800ad06:	f002 fa8b 	bl	800d220 <__i2b>
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	b948      	cbnz	r0, 800ad22 <_strtod_l+0x6a2>
 800ad0e:	f04f 0800 	mov.w	r8, #0
 800ad12:	e6d4      	b.n	800aabe <_strtod_l+0x43e>
 800ad14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad18:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1c:	ea03 0a0a 	and.w	sl, r3, sl
 800ad20:	e7b0      	b.n	800ac84 <_strtod_l+0x604>
 800ad22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad26:	2d00      	cmp	r5, #0
 800ad28:	bfab      	itete	ge
 800ad2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad32:	bfac      	ite	ge
 800ad34:	18ef      	addge	r7, r5, r3
 800ad36:	1b5e      	sublt	r6, r3, r5
 800ad38:	9b08      	ldr	r3, [sp, #32]
 800ad3a:	1aed      	subs	r5, r5, r3
 800ad3c:	4415      	add	r5, r2
 800ad3e:	4b66      	ldr	r3, [pc, #408]	@ (800aed8 <_strtod_l+0x858>)
 800ad40:	3d01      	subs	r5, #1
 800ad42:	429d      	cmp	r5, r3
 800ad44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad48:	da50      	bge.n	800adec <_strtod_l+0x76c>
 800ad4a:	1b5b      	subs	r3, r3, r5
 800ad4c:	2b1f      	cmp	r3, #31
 800ad4e:	eba2 0203 	sub.w	r2, r2, r3
 800ad52:	f04f 0101 	mov.w	r1, #1
 800ad56:	dc3d      	bgt.n	800add4 <_strtod_l+0x754>
 800ad58:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad62:	18bd      	adds	r5, r7, r2
 800ad64:	9b08      	ldr	r3, [sp, #32]
 800ad66:	42af      	cmp	r7, r5
 800ad68:	4416      	add	r6, r2
 800ad6a:	441e      	add	r6, r3
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	bfa8      	it	ge
 800ad70:	462b      	movge	r3, r5
 800ad72:	42b3      	cmp	r3, r6
 800ad74:	bfa8      	it	ge
 800ad76:	4633      	movge	r3, r6
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfc2      	ittt	gt
 800ad7c:	1aed      	subgt	r5, r5, r3
 800ad7e:	1af6      	subgt	r6, r6, r3
 800ad80:	1aff      	subgt	r7, r7, r3
 800ad82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dd16      	ble.n	800adb6 <_strtod_l+0x736>
 800ad88:	4641      	mov	r1, r8
 800ad8a:	9805      	ldr	r0, [sp, #20]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f002 fb07 	bl	800d3a0 <__pow5mult>
 800ad92:	4680      	mov	r8, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d0ba      	beq.n	800ad0e <_strtod_l+0x68e>
 800ad98:	4601      	mov	r1, r0
 800ad9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad9c:	9805      	ldr	r0, [sp, #20]
 800ad9e:	f002 fa55 	bl	800d24c <__multiply>
 800ada2:	900e      	str	r0, [sp, #56]	@ 0x38
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f43f ae8a 	beq.w	800aabe <_strtod_l+0x43e>
 800adaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	f002 f939 	bl	800d024 <_Bfree>
 800adb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	dc1d      	bgt.n	800adf6 <_strtod_l+0x776>
 800adba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd23      	ble.n	800ae08 <_strtod_l+0x788>
 800adc0:	4649      	mov	r1, r9
 800adc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800adc4:	9805      	ldr	r0, [sp, #20]
 800adc6:	f002 faeb 	bl	800d3a0 <__pow5mult>
 800adca:	4681      	mov	r9, r0
 800adcc:	b9e0      	cbnz	r0, 800ae08 <_strtod_l+0x788>
 800adce:	f04f 0900 	mov.w	r9, #0
 800add2:	e674      	b.n	800aabe <_strtod_l+0x43e>
 800add4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800add8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800addc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ade0:	35e2      	adds	r5, #226	@ 0xe2
 800ade2:	fa01 f305 	lsl.w	r3, r1, r5
 800ade6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ade8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800adea:	e7ba      	b.n	800ad62 <_strtod_l+0x6e2>
 800adec:	2300      	movs	r3, #0
 800adee:	9310      	str	r3, [sp, #64]	@ 0x40
 800adf0:	2301      	movs	r3, #1
 800adf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adf4:	e7b5      	b.n	800ad62 <_strtod_l+0x6e2>
 800adf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adf8:	9805      	ldr	r0, [sp, #20]
 800adfa:	462a      	mov	r2, r5
 800adfc:	f002 fb2a 	bl	800d454 <__lshift>
 800ae00:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d1d9      	bne.n	800adba <_strtod_l+0x73a>
 800ae06:	e65a      	b.n	800aabe <_strtod_l+0x43e>
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	dd07      	ble.n	800ae1c <_strtod_l+0x79c>
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	9805      	ldr	r0, [sp, #20]
 800ae10:	4632      	mov	r2, r6
 800ae12:	f002 fb1f 	bl	800d454 <__lshift>
 800ae16:	4681      	mov	r9, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d0d8      	beq.n	800adce <_strtod_l+0x74e>
 800ae1c:	2f00      	cmp	r7, #0
 800ae1e:	dd08      	ble.n	800ae32 <_strtod_l+0x7b2>
 800ae20:	4641      	mov	r1, r8
 800ae22:	9805      	ldr	r0, [sp, #20]
 800ae24:	463a      	mov	r2, r7
 800ae26:	f002 fb15 	bl	800d454 <__lshift>
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f43f ae46 	beq.w	800aabe <_strtod_l+0x43e>
 800ae32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae34:	9805      	ldr	r0, [sp, #20]
 800ae36:	464a      	mov	r2, r9
 800ae38:	f002 fb94 	bl	800d564 <__mdiff>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f43f ae3d 	beq.w	800aabe <_strtod_l+0x43e>
 800ae44:	68c3      	ldr	r3, [r0, #12]
 800ae46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60c3      	str	r3, [r0, #12]
 800ae4c:	4641      	mov	r1, r8
 800ae4e:	f002 fb6d 	bl	800d52c <__mcmp>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	da46      	bge.n	800aee4 <_strtod_l+0x864>
 800ae56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae58:	ea53 030a 	orrs.w	r3, r3, sl
 800ae5c:	d16c      	bne.n	800af38 <_strtod_l+0x8b8>
 800ae5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d168      	bne.n	800af38 <_strtod_l+0x8b8>
 800ae66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae6a:	0d1b      	lsrs	r3, r3, #20
 800ae6c:	051b      	lsls	r3, r3, #20
 800ae6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae72:	d961      	bls.n	800af38 <_strtod_l+0x8b8>
 800ae74:	6963      	ldr	r3, [r4, #20]
 800ae76:	b913      	cbnz	r3, 800ae7e <_strtod_l+0x7fe>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	dd5c      	ble.n	800af38 <_strtod_l+0x8b8>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	2201      	movs	r2, #1
 800ae82:	9805      	ldr	r0, [sp, #20]
 800ae84:	f002 fae6 	bl	800d454 <__lshift>
 800ae88:	4641      	mov	r1, r8
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	f002 fb4e 	bl	800d52c <__mcmp>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	dd51      	ble.n	800af38 <_strtod_l+0x8b8>
 800ae94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae98:	9a08      	ldr	r2, [sp, #32]
 800ae9a:	0d1b      	lsrs	r3, r3, #20
 800ae9c:	051b      	lsls	r3, r3, #20
 800ae9e:	2a00      	cmp	r2, #0
 800aea0:	d06b      	beq.n	800af7a <_strtod_l+0x8fa>
 800aea2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aea6:	d868      	bhi.n	800af7a <_strtod_l+0x8fa>
 800aea8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aeac:	f67f ae9d 	bls.w	800abea <_strtod_l+0x56a>
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <_strtod_l+0x85c>)
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f7f5 fba6 	bl	8000608 <__aeabi_dmul>
 800aebc:	4b08      	ldr	r3, [pc, #32]	@ (800aee0 <_strtod_l+0x860>)
 800aebe:	400b      	ands	r3, r1
 800aec0:	4682      	mov	sl, r0
 800aec2:	468b      	mov	fp, r1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f47f ae05 	bne.w	800aad4 <_strtod_l+0x454>
 800aeca:	9a05      	ldr	r2, [sp, #20]
 800aecc:	2322      	movs	r3, #34	@ 0x22
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	e600      	b.n	800aad4 <_strtod_l+0x454>
 800aed2:	bf00      	nop
 800aed4:	0800e008 	.word	0x0800e008
 800aed8:	fffffc02 	.word	0xfffffc02
 800aedc:	39500000 	.word	0x39500000
 800aee0:	7ff00000 	.word	0x7ff00000
 800aee4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aee8:	d165      	bne.n	800afb6 <_strtod_l+0x936>
 800aeea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aeec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aef0:	b35a      	cbz	r2, 800af4a <_strtod_l+0x8ca>
 800aef2:	4a9f      	ldr	r2, [pc, #636]	@ (800b170 <_strtod_l+0xaf0>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d12b      	bne.n	800af50 <_strtod_l+0x8d0>
 800aef8:	9b08      	ldr	r3, [sp, #32]
 800aefa:	4651      	mov	r1, sl
 800aefc:	b303      	cbz	r3, 800af40 <_strtod_l+0x8c0>
 800aefe:	4b9d      	ldr	r3, [pc, #628]	@ (800b174 <_strtod_l+0xaf4>)
 800af00:	465a      	mov	r2, fp
 800af02:	4013      	ands	r3, r2
 800af04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af0c:	d81b      	bhi.n	800af46 <_strtod_l+0x8c6>
 800af0e:	0d1b      	lsrs	r3, r3, #20
 800af10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af14:	fa02 f303 	lsl.w	r3, r2, r3
 800af18:	4299      	cmp	r1, r3
 800af1a:	d119      	bne.n	800af50 <_strtod_l+0x8d0>
 800af1c:	4b96      	ldr	r3, [pc, #600]	@ (800b178 <_strtod_l+0xaf8>)
 800af1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af20:	429a      	cmp	r2, r3
 800af22:	d102      	bne.n	800af2a <_strtod_l+0x8aa>
 800af24:	3101      	adds	r1, #1
 800af26:	f43f adca 	beq.w	800aabe <_strtod_l+0x43e>
 800af2a:	4b92      	ldr	r3, [pc, #584]	@ (800b174 <_strtod_l+0xaf4>)
 800af2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af2e:	401a      	ands	r2, r3
 800af30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af34:	f04f 0a00 	mov.w	sl, #0
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1b8      	bne.n	800aeb0 <_strtod_l+0x830>
 800af3e:	e5c9      	b.n	800aad4 <_strtod_l+0x454>
 800af40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af44:	e7e8      	b.n	800af18 <_strtod_l+0x898>
 800af46:	4613      	mov	r3, r2
 800af48:	e7e6      	b.n	800af18 <_strtod_l+0x898>
 800af4a:	ea53 030a 	orrs.w	r3, r3, sl
 800af4e:	d0a1      	beq.n	800ae94 <_strtod_l+0x814>
 800af50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af52:	b1db      	cbz	r3, 800af8c <_strtod_l+0x90c>
 800af54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af56:	4213      	tst	r3, r2
 800af58:	d0ee      	beq.n	800af38 <_strtod_l+0x8b8>
 800af5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5c:	9a08      	ldr	r2, [sp, #32]
 800af5e:	4650      	mov	r0, sl
 800af60:	4659      	mov	r1, fp
 800af62:	b1bb      	cbz	r3, 800af94 <_strtod_l+0x914>
 800af64:	f7ff fb6e 	bl	800a644 <sulp>
 800af68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af6c:	ec53 2b10 	vmov	r2, r3, d0
 800af70:	f7f5 f994 	bl	800029c <__adddf3>
 800af74:	4682      	mov	sl, r0
 800af76:	468b      	mov	fp, r1
 800af78:	e7de      	b.n	800af38 <_strtod_l+0x8b8>
 800af7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800af8a:	e7d5      	b.n	800af38 <_strtod_l+0x8b8>
 800af8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af8e:	ea13 0f0a 	tst.w	r3, sl
 800af92:	e7e1      	b.n	800af58 <_strtod_l+0x8d8>
 800af94:	f7ff fb56 	bl	800a644 <sulp>
 800af98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af9c:	ec53 2b10 	vmov	r2, r3, d0
 800afa0:	f7f5 f97a 	bl	8000298 <__aeabi_dsub>
 800afa4:	2200      	movs	r2, #0
 800afa6:	2300      	movs	r3, #0
 800afa8:	4682      	mov	sl, r0
 800afaa:	468b      	mov	fp, r1
 800afac:	f7f5 fd94 	bl	8000ad8 <__aeabi_dcmpeq>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0c1      	beq.n	800af38 <_strtod_l+0x8b8>
 800afb4:	e619      	b.n	800abea <_strtod_l+0x56a>
 800afb6:	4641      	mov	r1, r8
 800afb8:	4620      	mov	r0, r4
 800afba:	f002 fc2f 	bl	800d81c <__ratio>
 800afbe:	ec57 6b10 	vmov	r6, r7, d0
 800afc2:	2200      	movs	r2, #0
 800afc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fd98 	bl	8000b00 <__aeabi_dcmple>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d06f      	beq.n	800b0b4 <_strtod_l+0xa34>
 800afd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d17a      	bne.n	800b0d0 <_strtod_l+0xa50>
 800afda:	f1ba 0f00 	cmp.w	sl, #0
 800afde:	d158      	bne.n	800b092 <_strtod_l+0xa12>
 800afe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d15a      	bne.n	800b0a0 <_strtod_l+0xa20>
 800afea:	4b64      	ldr	r3, [pc, #400]	@ (800b17c <_strtod_l+0xafc>)
 800afec:	2200      	movs	r2, #0
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fd7b 	bl	8000aec <__aeabi_dcmplt>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d159      	bne.n	800b0ae <_strtod_l+0xa2e>
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	4b60      	ldr	r3, [pc, #384]	@ (800b180 <_strtod_l+0xb00>)
 800b000:	2200      	movs	r2, #0
 800b002:	f7f5 fb01 	bl	8000608 <__aeabi_dmul>
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b00e:	9606      	str	r6, [sp, #24]
 800b010:	9307      	str	r3, [sp, #28]
 800b012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b016:	4d57      	ldr	r5, [pc, #348]	@ (800b174 <_strtod_l+0xaf4>)
 800b018:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b01c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b01e:	401d      	ands	r5, r3
 800b020:	4b58      	ldr	r3, [pc, #352]	@ (800b184 <_strtod_l+0xb04>)
 800b022:	429d      	cmp	r5, r3
 800b024:	f040 80b2 	bne.w	800b18c <_strtod_l+0xb0c>
 800b028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b02a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b02e:	ec4b ab10 	vmov	d0, sl, fp
 800b032:	f002 fb2b 	bl	800d68c <__ulp>
 800b036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b03a:	ec51 0b10 	vmov	r0, r1, d0
 800b03e:	f7f5 fae3 	bl	8000608 <__aeabi_dmul>
 800b042:	4652      	mov	r2, sl
 800b044:	465b      	mov	r3, fp
 800b046:	f7f5 f929 	bl	800029c <__adddf3>
 800b04a:	460b      	mov	r3, r1
 800b04c:	4949      	ldr	r1, [pc, #292]	@ (800b174 <_strtod_l+0xaf4>)
 800b04e:	4a4e      	ldr	r2, [pc, #312]	@ (800b188 <_strtod_l+0xb08>)
 800b050:	4019      	ands	r1, r3
 800b052:	4291      	cmp	r1, r2
 800b054:	4682      	mov	sl, r0
 800b056:	d942      	bls.n	800b0de <_strtod_l+0xa5e>
 800b058:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b05a:	4b47      	ldr	r3, [pc, #284]	@ (800b178 <_strtod_l+0xaf8>)
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d103      	bne.n	800b068 <_strtod_l+0x9e8>
 800b060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b062:	3301      	adds	r3, #1
 800b064:	f43f ad2b 	beq.w	800aabe <_strtod_l+0x43e>
 800b068:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b178 <_strtod_l+0xaf8>
 800b06c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b070:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b072:	9805      	ldr	r0, [sp, #20]
 800b074:	f001 ffd6 	bl	800d024 <_Bfree>
 800b078:	9805      	ldr	r0, [sp, #20]
 800b07a:	4649      	mov	r1, r9
 800b07c:	f001 ffd2 	bl	800d024 <_Bfree>
 800b080:	9805      	ldr	r0, [sp, #20]
 800b082:	4641      	mov	r1, r8
 800b084:	f001 ffce 	bl	800d024 <_Bfree>
 800b088:	9805      	ldr	r0, [sp, #20]
 800b08a:	4621      	mov	r1, r4
 800b08c:	f001 ffca 	bl	800d024 <_Bfree>
 800b090:	e618      	b.n	800acc4 <_strtod_l+0x644>
 800b092:	f1ba 0f01 	cmp.w	sl, #1
 800b096:	d103      	bne.n	800b0a0 <_strtod_l+0xa20>
 800b098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f43f ada5 	beq.w	800abea <_strtod_l+0x56a>
 800b0a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b150 <_strtod_l+0xad0>
 800b0a4:	4f35      	ldr	r7, [pc, #212]	@ (800b17c <_strtod_l+0xafc>)
 800b0a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	e7b1      	b.n	800b012 <_strtod_l+0x992>
 800b0ae:	4f34      	ldr	r7, [pc, #208]	@ (800b180 <_strtod_l+0xb00>)
 800b0b0:	2600      	movs	r6, #0
 800b0b2:	e7aa      	b.n	800b00a <_strtod_l+0x98a>
 800b0b4:	4b32      	ldr	r3, [pc, #200]	@ (800b180 <_strtod_l+0xb00>)
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 faa4 	bl	8000608 <__aeabi_dmul>
 800b0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d09f      	beq.n	800b00a <_strtod_l+0x98a>
 800b0ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b0ce:	e7a0      	b.n	800b012 <_strtod_l+0x992>
 800b0d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b158 <_strtod_l+0xad8>
 800b0d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0d8:	ec57 6b17 	vmov	r6, r7, d7
 800b0dc:	e799      	b.n	800b012 <_strtod_l+0x992>
 800b0de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1c1      	bne.n	800b070 <_strtod_l+0x9f0>
 800b0ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0f0:	0d1b      	lsrs	r3, r3, #20
 800b0f2:	051b      	lsls	r3, r3, #20
 800b0f4:	429d      	cmp	r5, r3
 800b0f6:	d1bb      	bne.n	800b070 <_strtod_l+0x9f0>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	f7f5 fde4 	bl	8000cc8 <__aeabi_d2lz>
 800b100:	f7f5 fa54 	bl	80005ac <__aeabi_l2d>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4630      	mov	r0, r6
 800b10a:	4639      	mov	r1, r7
 800b10c:	f7f5 f8c4 	bl	8000298 <__aeabi_dsub>
 800b110:	460b      	mov	r3, r1
 800b112:	4602      	mov	r2, r0
 800b114:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b118:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11e:	ea46 060a 	orr.w	r6, r6, sl
 800b122:	431e      	orrs	r6, r3
 800b124:	d06f      	beq.n	800b206 <_strtod_l+0xb86>
 800b126:	a30e      	add	r3, pc, #56	@ (adr r3, 800b160 <_strtod_l+0xae0>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f7f5 fcde 	bl	8000aec <__aeabi_dcmplt>
 800b130:	2800      	cmp	r0, #0
 800b132:	f47f accf 	bne.w	800aad4 <_strtod_l+0x454>
 800b136:	a30c      	add	r3, pc, #48	@ (adr r3, 800b168 <_strtod_l+0xae8>)
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b140:	f7f5 fcf2 	bl	8000b28 <__aeabi_dcmpgt>
 800b144:	2800      	cmp	r0, #0
 800b146:	d093      	beq.n	800b070 <_strtod_l+0x9f0>
 800b148:	e4c4      	b.n	800aad4 <_strtod_l+0x454>
 800b14a:	bf00      	nop
 800b14c:	f3af 8000 	nop.w
 800b150:	00000000 	.word	0x00000000
 800b154:	bff00000 	.word	0xbff00000
 800b158:	00000000 	.word	0x00000000
 800b15c:	3ff00000 	.word	0x3ff00000
 800b160:	94a03595 	.word	0x94a03595
 800b164:	3fdfffff 	.word	0x3fdfffff
 800b168:	35afe535 	.word	0x35afe535
 800b16c:	3fe00000 	.word	0x3fe00000
 800b170:	000fffff 	.word	0x000fffff
 800b174:	7ff00000 	.word	0x7ff00000
 800b178:	7fefffff 	.word	0x7fefffff
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	3fe00000 	.word	0x3fe00000
 800b184:	7fe00000 	.word	0x7fe00000
 800b188:	7c9fffff 	.word	0x7c9fffff
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	b323      	cbz	r3, 800b1da <_strtod_l+0xb5a>
 800b190:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b194:	d821      	bhi.n	800b1da <_strtod_l+0xb5a>
 800b196:	a328      	add	r3, pc, #160	@ (adr r3, 800b238 <_strtod_l+0xbb8>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	f7f5 fcae 	bl	8000b00 <__aeabi_dcmple>
 800b1a4:	b1a0      	cbz	r0, 800b1d0 <_strtod_l+0xb50>
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f7f5 fd05 	bl	8000bb8 <__aeabi_d2uiz>
 800b1ae:	2801      	cmp	r0, #1
 800b1b0:	bf38      	it	cc
 800b1b2:	2001      	movcc	r0, #1
 800b1b4:	f7f5 f9ae 	bl	8000514 <__aeabi_ui2d>
 800b1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	460f      	mov	r7, r1
 800b1be:	b9fb      	cbnz	r3, 800b200 <_strtod_l+0xb80>
 800b1c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b1c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b1cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b1d6:	1b5b      	subs	r3, r3, r5
 800b1d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b1e2:	f002 fa53 	bl	800d68c <__ulp>
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	ec53 2b10 	vmov	r2, r3, d0
 800b1ec:	4659      	mov	r1, fp
 800b1ee:	f7f5 fa0b 	bl	8000608 <__aeabi_dmul>
 800b1f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1f6:	f7f5 f851 	bl	800029c <__adddf3>
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	e770      	b.n	800b0e2 <_strtod_l+0xa62>
 800b200:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b204:	e7e0      	b.n	800b1c8 <_strtod_l+0xb48>
 800b206:	a30e      	add	r3, pc, #56	@ (adr r3, 800b240 <_strtod_l+0xbc0>)
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f7f5 fc6e 	bl	8000aec <__aeabi_dcmplt>
 800b210:	e798      	b.n	800b144 <_strtod_l+0xac4>
 800b212:	2300      	movs	r3, #0
 800b214:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b216:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	f7ff ba6d 	b.w	800a6fa <_strtod_l+0x7a>
 800b220:	2a65      	cmp	r2, #101	@ 0x65
 800b222:	f43f ab66 	beq.w	800a8f2 <_strtod_l+0x272>
 800b226:	2a45      	cmp	r2, #69	@ 0x45
 800b228:	f43f ab63 	beq.w	800a8f2 <_strtod_l+0x272>
 800b22c:	2301      	movs	r3, #1
 800b22e:	f7ff bb9e 	b.w	800a96e <_strtod_l+0x2ee>
 800b232:	bf00      	nop
 800b234:	f3af 8000 	nop.w
 800b238:	ffc00000 	.word	0xffc00000
 800b23c:	41dfffff 	.word	0x41dfffff
 800b240:	94a03595 	.word	0x94a03595
 800b244:	3fcfffff 	.word	0x3fcfffff

0800b248 <_strtod_r>:
 800b248:	4b01      	ldr	r3, [pc, #4]	@ (800b250 <_strtod_r+0x8>)
 800b24a:	f7ff ba19 	b.w	800a680 <_strtod_l>
 800b24e:	bf00      	nop
 800b250:	20000018 	.word	0x20000018

0800b254 <_strtol_l.constprop.0>:
 800b254:	2b24      	cmp	r3, #36	@ 0x24
 800b256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25a:	4686      	mov	lr, r0
 800b25c:	4690      	mov	r8, r2
 800b25e:	d801      	bhi.n	800b264 <_strtol_l.constprop.0+0x10>
 800b260:	2b01      	cmp	r3, #1
 800b262:	d106      	bne.n	800b272 <_strtol_l.constprop.0+0x1e>
 800b264:	f000 f8c0 	bl	800b3e8 <__errno>
 800b268:	2316      	movs	r3, #22
 800b26a:	6003      	str	r3, [r0, #0]
 800b26c:	2000      	movs	r0, #0
 800b26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b272:	4834      	ldr	r0, [pc, #208]	@ (800b344 <_strtol_l.constprop.0+0xf0>)
 800b274:	460d      	mov	r5, r1
 800b276:	462a      	mov	r2, r5
 800b278:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b27c:	5d06      	ldrb	r6, [r0, r4]
 800b27e:	f016 0608 	ands.w	r6, r6, #8
 800b282:	d1f8      	bne.n	800b276 <_strtol_l.constprop.0+0x22>
 800b284:	2c2d      	cmp	r4, #45	@ 0x2d
 800b286:	d12d      	bne.n	800b2e4 <_strtol_l.constprop.0+0x90>
 800b288:	782c      	ldrb	r4, [r5, #0]
 800b28a:	2601      	movs	r6, #1
 800b28c:	1c95      	adds	r5, r2, #2
 800b28e:	f033 0210 	bics.w	r2, r3, #16
 800b292:	d109      	bne.n	800b2a8 <_strtol_l.constprop.0+0x54>
 800b294:	2c30      	cmp	r4, #48	@ 0x30
 800b296:	d12a      	bne.n	800b2ee <_strtol_l.constprop.0+0x9a>
 800b298:	782a      	ldrb	r2, [r5, #0]
 800b29a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b29e:	2a58      	cmp	r2, #88	@ 0x58
 800b2a0:	d125      	bne.n	800b2ee <_strtol_l.constprop.0+0x9a>
 800b2a2:	786c      	ldrb	r4, [r5, #1]
 800b2a4:	2310      	movs	r3, #16
 800b2a6:	3502      	adds	r5, #2
 800b2a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	fbbc f9f3 	udiv	r9, ip, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2c0:	2f09      	cmp	r7, #9
 800b2c2:	d81b      	bhi.n	800b2fc <_strtol_l.constprop.0+0xa8>
 800b2c4:	463c      	mov	r4, r7
 800b2c6:	42a3      	cmp	r3, r4
 800b2c8:	dd27      	ble.n	800b31a <_strtol_l.constprop.0+0xc6>
 800b2ca:	1c57      	adds	r7, r2, #1
 800b2cc:	d007      	beq.n	800b2de <_strtol_l.constprop.0+0x8a>
 800b2ce:	4581      	cmp	r9, r0
 800b2d0:	d320      	bcc.n	800b314 <_strtol_l.constprop.0+0xc0>
 800b2d2:	d101      	bne.n	800b2d8 <_strtol_l.constprop.0+0x84>
 800b2d4:	45a2      	cmp	sl, r4
 800b2d6:	db1d      	blt.n	800b314 <_strtol_l.constprop.0+0xc0>
 800b2d8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2e2:	e7eb      	b.n	800b2bc <_strtol_l.constprop.0+0x68>
 800b2e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2e6:	bf04      	itt	eq
 800b2e8:	782c      	ldrbeq	r4, [r5, #0]
 800b2ea:	1c95      	addeq	r5, r2, #2
 800b2ec:	e7cf      	b.n	800b28e <_strtol_l.constprop.0+0x3a>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1da      	bne.n	800b2a8 <_strtol_l.constprop.0+0x54>
 800b2f2:	2c30      	cmp	r4, #48	@ 0x30
 800b2f4:	bf0c      	ite	eq
 800b2f6:	2308      	moveq	r3, #8
 800b2f8:	230a      	movne	r3, #10
 800b2fa:	e7d5      	b.n	800b2a8 <_strtol_l.constprop.0+0x54>
 800b2fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b300:	2f19      	cmp	r7, #25
 800b302:	d801      	bhi.n	800b308 <_strtol_l.constprop.0+0xb4>
 800b304:	3c37      	subs	r4, #55	@ 0x37
 800b306:	e7de      	b.n	800b2c6 <_strtol_l.constprop.0+0x72>
 800b308:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b30c:	2f19      	cmp	r7, #25
 800b30e:	d804      	bhi.n	800b31a <_strtol_l.constprop.0+0xc6>
 800b310:	3c57      	subs	r4, #87	@ 0x57
 800b312:	e7d8      	b.n	800b2c6 <_strtol_l.constprop.0+0x72>
 800b314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b318:	e7e1      	b.n	800b2de <_strtol_l.constprop.0+0x8a>
 800b31a:	1c53      	adds	r3, r2, #1
 800b31c:	d108      	bne.n	800b330 <_strtol_l.constprop.0+0xdc>
 800b31e:	2322      	movs	r3, #34	@ 0x22
 800b320:	f8ce 3000 	str.w	r3, [lr]
 800b324:	4660      	mov	r0, ip
 800b326:	f1b8 0f00 	cmp.w	r8, #0
 800b32a:	d0a0      	beq.n	800b26e <_strtol_l.constprop.0+0x1a>
 800b32c:	1e69      	subs	r1, r5, #1
 800b32e:	e006      	b.n	800b33e <_strtol_l.constprop.0+0xea>
 800b330:	b106      	cbz	r6, 800b334 <_strtol_l.constprop.0+0xe0>
 800b332:	4240      	negs	r0, r0
 800b334:	f1b8 0f00 	cmp.w	r8, #0
 800b338:	d099      	beq.n	800b26e <_strtol_l.constprop.0+0x1a>
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d1f6      	bne.n	800b32c <_strtol_l.constprop.0+0xd8>
 800b33e:	f8c8 1000 	str.w	r1, [r8]
 800b342:	e794      	b.n	800b26e <_strtol_l.constprop.0+0x1a>
 800b344:	0800e039 	.word	0x0800e039

0800b348 <_strtol_r>:
 800b348:	f7ff bf84 	b.w	800b254 <_strtol_l.constprop.0>

0800b34c <_fwalk_sglue>:
 800b34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b350:	4607      	mov	r7, r0
 800b352:	4688      	mov	r8, r1
 800b354:	4614      	mov	r4, r2
 800b356:	2600      	movs	r6, #0
 800b358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b35c:	f1b9 0901 	subs.w	r9, r9, #1
 800b360:	d505      	bpl.n	800b36e <_fwalk_sglue+0x22>
 800b362:	6824      	ldr	r4, [r4, #0]
 800b364:	2c00      	cmp	r4, #0
 800b366:	d1f7      	bne.n	800b358 <_fwalk_sglue+0xc>
 800b368:	4630      	mov	r0, r6
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d907      	bls.n	800b384 <_fwalk_sglue+0x38>
 800b374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b378:	3301      	adds	r3, #1
 800b37a:	d003      	beq.n	800b384 <_fwalk_sglue+0x38>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4638      	mov	r0, r7
 800b380:	47c0      	blx	r8
 800b382:	4306      	orrs	r6, r0
 800b384:	3568      	adds	r5, #104	@ 0x68
 800b386:	e7e9      	b.n	800b35c <_fwalk_sglue+0x10>

0800b388 <iprintf>:
 800b388:	b40f      	push	{r0, r1, r2, r3}
 800b38a:	b507      	push	{r0, r1, r2, lr}
 800b38c:	4906      	ldr	r1, [pc, #24]	@ (800b3a8 <iprintf+0x20>)
 800b38e:	ab04      	add	r3, sp, #16
 800b390:	6808      	ldr	r0, [r1, #0]
 800b392:	f853 2b04 	ldr.w	r2, [r3], #4
 800b396:	6881      	ldr	r1, [r0, #8]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	f001 fb77 	bl	800ca8c <_vfiprintf_r>
 800b39e:	b003      	add	sp, #12
 800b3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a4:	b004      	add	sp, #16
 800b3a6:	4770      	bx	lr
 800b3a8:	20000184 	.word	0x20000184

0800b3ac <strncmp>:
 800b3ac:	b510      	push	{r4, lr}
 800b3ae:	b16a      	cbz	r2, 800b3cc <strncmp+0x20>
 800b3b0:	3901      	subs	r1, #1
 800b3b2:	1884      	adds	r4, r0, r2
 800b3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d103      	bne.n	800b3c8 <strncmp+0x1c>
 800b3c0:	42a0      	cmp	r0, r4
 800b3c2:	d001      	beq.n	800b3c8 <strncmp+0x1c>
 800b3c4:	2a00      	cmp	r2, #0
 800b3c6:	d1f5      	bne.n	800b3b4 <strncmp+0x8>
 800b3c8:	1ad0      	subs	r0, r2, r3
 800b3ca:	bd10      	pop	{r4, pc}
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	e7fc      	b.n	800b3ca <strncmp+0x1e>

0800b3d0 <memset>:
 800b3d0:	4402      	add	r2, r0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d100      	bne.n	800b3da <memset+0xa>
 800b3d8:	4770      	bx	lr
 800b3da:	f803 1b01 	strb.w	r1, [r3], #1
 800b3de:	e7f9      	b.n	800b3d4 <memset+0x4>

0800b3e0 <_localeconv_r>:
 800b3e0:	4800      	ldr	r0, [pc, #0]	@ (800b3e4 <_localeconv_r+0x4>)
 800b3e2:	4770      	bx	lr
 800b3e4:	20000108 	.word	0x20000108

0800b3e8 <__errno>:
 800b3e8:	4b01      	ldr	r3, [pc, #4]	@ (800b3f0 <__errno+0x8>)
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	20000184 	.word	0x20000184

0800b3f4 <__libc_init_array>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b42c <__libc_init_array+0x38>)
 800b3f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b430 <__libc_init_array+0x3c>)
 800b3fa:	1b64      	subs	r4, r4, r5
 800b3fc:	10a4      	asrs	r4, r4, #2
 800b3fe:	2600      	movs	r6, #0
 800b400:	42a6      	cmp	r6, r4
 800b402:	d109      	bne.n	800b418 <__libc_init_array+0x24>
 800b404:	4d0b      	ldr	r5, [pc, #44]	@ (800b434 <__libc_init_array+0x40>)
 800b406:	4c0c      	ldr	r4, [pc, #48]	@ (800b438 <__libc_init_array+0x44>)
 800b408:	f002 fd68 	bl	800dedc <_init>
 800b40c:	1b64      	subs	r4, r4, r5
 800b40e:	10a4      	asrs	r4, r4, #2
 800b410:	2600      	movs	r6, #0
 800b412:	42a6      	cmp	r6, r4
 800b414:	d105      	bne.n	800b422 <__libc_init_array+0x2e>
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41c:	4798      	blx	r3
 800b41e:	3601      	adds	r6, #1
 800b420:	e7ee      	b.n	800b400 <__libc_init_array+0xc>
 800b422:	f855 3b04 	ldr.w	r3, [r5], #4
 800b426:	4798      	blx	r3
 800b428:	3601      	adds	r6, #1
 800b42a:	e7f2      	b.n	800b412 <__libc_init_array+0x1e>
 800b42c:	0800e3d4 	.word	0x0800e3d4
 800b430:	0800e3d4 	.word	0x0800e3d4
 800b434:	0800e3d4 	.word	0x0800e3d4
 800b438:	0800e3d8 	.word	0x0800e3d8

0800b43c <__retarget_lock_init_recursive>:
 800b43c:	4770      	bx	lr

0800b43e <__retarget_lock_acquire_recursive>:
 800b43e:	4770      	bx	lr

0800b440 <__retarget_lock_release_recursive>:
 800b440:	4770      	bx	lr

0800b442 <memcpy>:
 800b442:	440a      	add	r2, r1
 800b444:	4291      	cmp	r1, r2
 800b446:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b44a:	d100      	bne.n	800b44e <memcpy+0xc>
 800b44c:	4770      	bx	lr
 800b44e:	b510      	push	{r4, lr}
 800b450:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b454:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b458:	4291      	cmp	r1, r2
 800b45a:	d1f9      	bne.n	800b450 <memcpy+0xe>
 800b45c:	bd10      	pop	{r4, pc}
	...

0800b460 <nan>:
 800b460:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b468 <nan+0x8>
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	00000000 	.word	0x00000000
 800b46c:	7ff80000 	.word	0x7ff80000

0800b470 <nanf>:
 800b470:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b478 <nanf+0x8>
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	7fc00000 	.word	0x7fc00000

0800b47c <quorem>:
 800b47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	6903      	ldr	r3, [r0, #16]
 800b482:	690c      	ldr	r4, [r1, #16]
 800b484:	42a3      	cmp	r3, r4
 800b486:	4607      	mov	r7, r0
 800b488:	db7e      	blt.n	800b588 <quorem+0x10c>
 800b48a:	3c01      	subs	r4, #1
 800b48c:	f101 0814 	add.w	r8, r1, #20
 800b490:	00a3      	lsls	r3, r4, #2
 800b492:	f100 0514 	add.w	r5, r0, #20
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4b2:	d32e      	bcc.n	800b512 <quorem+0x96>
 800b4b4:	f04f 0a00 	mov.w	sl, #0
 800b4b8:	46c4      	mov	ip, r8
 800b4ba:	46ae      	mov	lr, r5
 800b4bc:	46d3      	mov	fp, sl
 800b4be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4c2:	b298      	uxth	r0, r3
 800b4c4:	fb06 a000 	mla	r0, r6, r0, sl
 800b4c8:	0c02      	lsrs	r2, r0, #16
 800b4ca:	0c1b      	lsrs	r3, r3, #16
 800b4cc:	fb06 2303 	mla	r3, r6, r3, r2
 800b4d0:	f8de 2000 	ldr.w	r2, [lr]
 800b4d4:	b280      	uxth	r0, r0
 800b4d6:	b292      	uxth	r2, r2
 800b4d8:	1a12      	subs	r2, r2, r0
 800b4da:	445a      	add	r2, fp
 800b4dc:	f8de 0000 	ldr.w	r0, [lr]
 800b4e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b4ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b4ee:	b292      	uxth	r2, r2
 800b4f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b4f4:	45e1      	cmp	r9, ip
 800b4f6:	f84e 2b04 	str.w	r2, [lr], #4
 800b4fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b4fe:	d2de      	bcs.n	800b4be <quorem+0x42>
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	58eb      	ldr	r3, [r5, r3]
 800b504:	b92b      	cbnz	r3, 800b512 <quorem+0x96>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	3b04      	subs	r3, #4
 800b50a:	429d      	cmp	r5, r3
 800b50c:	461a      	mov	r2, r3
 800b50e:	d32f      	bcc.n	800b570 <quorem+0xf4>
 800b510:	613c      	str	r4, [r7, #16]
 800b512:	4638      	mov	r0, r7
 800b514:	f002 f80a 	bl	800d52c <__mcmp>
 800b518:	2800      	cmp	r0, #0
 800b51a:	db25      	blt.n	800b568 <quorem+0xec>
 800b51c:	4629      	mov	r1, r5
 800b51e:	2000      	movs	r0, #0
 800b520:	f858 2b04 	ldr.w	r2, [r8], #4
 800b524:	f8d1 c000 	ldr.w	ip, [r1]
 800b528:	fa1f fe82 	uxth.w	lr, r2
 800b52c:	fa1f f38c 	uxth.w	r3, ip
 800b530:	eba3 030e 	sub.w	r3, r3, lr
 800b534:	4403      	add	r3, r0
 800b536:	0c12      	lsrs	r2, r2, #16
 800b538:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b53c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b540:	b29b      	uxth	r3, r3
 800b542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b546:	45c1      	cmp	r9, r8
 800b548:	f841 3b04 	str.w	r3, [r1], #4
 800b54c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b550:	d2e6      	bcs.n	800b520 <quorem+0xa4>
 800b552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b55a:	b922      	cbnz	r2, 800b566 <quorem+0xea>
 800b55c:	3b04      	subs	r3, #4
 800b55e:	429d      	cmp	r5, r3
 800b560:	461a      	mov	r2, r3
 800b562:	d30b      	bcc.n	800b57c <quorem+0x100>
 800b564:	613c      	str	r4, [r7, #16]
 800b566:	3601      	adds	r6, #1
 800b568:	4630      	mov	r0, r6
 800b56a:	b003      	add	sp, #12
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	6812      	ldr	r2, [r2, #0]
 800b572:	3b04      	subs	r3, #4
 800b574:	2a00      	cmp	r2, #0
 800b576:	d1cb      	bne.n	800b510 <quorem+0x94>
 800b578:	3c01      	subs	r4, #1
 800b57a:	e7c6      	b.n	800b50a <quorem+0x8e>
 800b57c:	6812      	ldr	r2, [r2, #0]
 800b57e:	3b04      	subs	r3, #4
 800b580:	2a00      	cmp	r2, #0
 800b582:	d1ef      	bne.n	800b564 <quorem+0xe8>
 800b584:	3c01      	subs	r4, #1
 800b586:	e7ea      	b.n	800b55e <quorem+0xe2>
 800b588:	2000      	movs	r0, #0
 800b58a:	e7ee      	b.n	800b56a <quorem+0xee>
 800b58c:	0000      	movs	r0, r0
	...

0800b590 <_dtoa_r>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	69c7      	ldr	r7, [r0, #28]
 800b596:	b099      	sub	sp, #100	@ 0x64
 800b598:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b59c:	ec55 4b10 	vmov	r4, r5, d0
 800b5a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b5a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5a4:	4683      	mov	fp, r0
 800b5a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5aa:	b97f      	cbnz	r7, 800b5cc <_dtoa_r+0x3c>
 800b5ac:	2010      	movs	r0, #16
 800b5ae:	f001 fb85 	bl	800ccbc <malloc>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b5b8:	b920      	cbnz	r0, 800b5c4 <_dtoa_r+0x34>
 800b5ba:	4ba7      	ldr	r3, [pc, #668]	@ (800b858 <_dtoa_r+0x2c8>)
 800b5bc:	21ef      	movs	r1, #239	@ 0xef
 800b5be:	48a7      	ldr	r0, [pc, #668]	@ (800b85c <_dtoa_r+0x2cc>)
 800b5c0:	f002 fbaa 	bl	800dd18 <__assert_func>
 800b5c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b5c8:	6007      	str	r7, [r0, #0]
 800b5ca:	60c7      	str	r7, [r0, #12]
 800b5cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5d0:	6819      	ldr	r1, [r3, #0]
 800b5d2:	b159      	cbz	r1, 800b5ec <_dtoa_r+0x5c>
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	604a      	str	r2, [r1, #4]
 800b5d8:	2301      	movs	r3, #1
 800b5da:	4093      	lsls	r3, r2
 800b5dc:	608b      	str	r3, [r1, #8]
 800b5de:	4658      	mov	r0, fp
 800b5e0:	f001 fd20 	bl	800d024 <_Bfree>
 800b5e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	1e2b      	subs	r3, r5, #0
 800b5ee:	bfb9      	ittee	lt
 800b5f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b5f4:	9303      	strlt	r3, [sp, #12]
 800b5f6:	2300      	movge	r3, #0
 800b5f8:	6033      	strge	r3, [r6, #0]
 800b5fa:	9f03      	ldr	r7, [sp, #12]
 800b5fc:	4b98      	ldr	r3, [pc, #608]	@ (800b860 <_dtoa_r+0x2d0>)
 800b5fe:	bfbc      	itt	lt
 800b600:	2201      	movlt	r2, #1
 800b602:	6032      	strlt	r2, [r6, #0]
 800b604:	43bb      	bics	r3, r7
 800b606:	d112      	bne.n	800b62e <_dtoa_r+0x9e>
 800b608:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b60a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b614:	4323      	orrs	r3, r4
 800b616:	f000 854d 	beq.w	800c0b4 <_dtoa_r+0xb24>
 800b61a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b61c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b874 <_dtoa_r+0x2e4>
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 854f 	beq.w	800c0c4 <_dtoa_r+0xb34>
 800b626:	f10a 0303 	add.w	r3, sl, #3
 800b62a:	f000 bd49 	b.w	800c0c0 <_dtoa_r+0xb30>
 800b62e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b632:	2200      	movs	r2, #0
 800b634:	ec51 0b17 	vmov	r0, r1, d7
 800b638:	2300      	movs	r3, #0
 800b63a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b63e:	f7f5 fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b642:	4680      	mov	r8, r0
 800b644:	b158      	cbz	r0, 800b65e <_dtoa_r+0xce>
 800b646:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b648:	2301      	movs	r3, #1
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b64e:	b113      	cbz	r3, 800b656 <_dtoa_r+0xc6>
 800b650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b652:	4b84      	ldr	r3, [pc, #528]	@ (800b864 <_dtoa_r+0x2d4>)
 800b654:	6013      	str	r3, [r2, #0]
 800b656:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b878 <_dtoa_r+0x2e8>
 800b65a:	f000 bd33 	b.w	800c0c4 <_dtoa_r+0xb34>
 800b65e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b662:	aa16      	add	r2, sp, #88	@ 0x58
 800b664:	a917      	add	r1, sp, #92	@ 0x5c
 800b666:	4658      	mov	r0, fp
 800b668:	f002 f880 	bl	800d76c <__d2b>
 800b66c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b670:	4681      	mov	r9, r0
 800b672:	2e00      	cmp	r6, #0
 800b674:	d077      	beq.n	800b766 <_dtoa_r+0x1d6>
 800b676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b678:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b684:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b688:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b68c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b690:	4619      	mov	r1, r3
 800b692:	2200      	movs	r2, #0
 800b694:	4b74      	ldr	r3, [pc, #464]	@ (800b868 <_dtoa_r+0x2d8>)
 800b696:	f7f4 fdff 	bl	8000298 <__aeabi_dsub>
 800b69a:	a369      	add	r3, pc, #420	@ (adr r3, 800b840 <_dtoa_r+0x2b0>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 ffb2 	bl	8000608 <__aeabi_dmul>
 800b6a4:	a368      	add	r3, pc, #416	@ (adr r3, 800b848 <_dtoa_r+0x2b8>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 fdf7 	bl	800029c <__adddf3>
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	f7f4 ff3e 	bl	8000534 <__aeabi_i2d>
 800b6b8:	a365      	add	r3, pc, #404	@ (adr r3, 800b850 <_dtoa_r+0x2c0>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 ffa3 	bl	8000608 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	f7f4 fde7 	bl	800029c <__adddf3>
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	f7f5 fa49 	bl	8000b68 <__aeabi_d2iz>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4607      	mov	r7, r0
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f5 fa04 	bl	8000aec <__aeabi_dcmplt>
 800b6e4:	b140      	cbz	r0, 800b6f8 <_dtoa_r+0x168>
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f7f4 ff24 	bl	8000534 <__aeabi_i2d>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	f7f5 f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6f4:	b900      	cbnz	r0, 800b6f8 <_dtoa_r+0x168>
 800b6f6:	3f01      	subs	r7, #1
 800b6f8:	2f16      	cmp	r7, #22
 800b6fa:	d851      	bhi.n	800b7a0 <_dtoa_r+0x210>
 800b6fc:	4b5b      	ldr	r3, [pc, #364]	@ (800b86c <_dtoa_r+0x2dc>)
 800b6fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b70a:	f7f5 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d048      	beq.n	800b7a4 <_dtoa_r+0x214>
 800b712:	3f01      	subs	r7, #1
 800b714:	2300      	movs	r3, #0
 800b716:	9312      	str	r3, [sp, #72]	@ 0x48
 800b718:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b71a:	1b9b      	subs	r3, r3, r6
 800b71c:	1e5a      	subs	r2, r3, #1
 800b71e:	bf44      	itt	mi
 800b720:	f1c3 0801 	rsbmi	r8, r3, #1
 800b724:	2300      	movmi	r3, #0
 800b726:	9208      	str	r2, [sp, #32]
 800b728:	bf54      	ite	pl
 800b72a:	f04f 0800 	movpl.w	r8, #0
 800b72e:	9308      	strmi	r3, [sp, #32]
 800b730:	2f00      	cmp	r7, #0
 800b732:	db39      	blt.n	800b7a8 <_dtoa_r+0x218>
 800b734:	9b08      	ldr	r3, [sp, #32]
 800b736:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b738:	443b      	add	r3, r7
 800b73a:	9308      	str	r3, [sp, #32]
 800b73c:	2300      	movs	r3, #0
 800b73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b742:	2b09      	cmp	r3, #9
 800b744:	d864      	bhi.n	800b810 <_dtoa_r+0x280>
 800b746:	2b05      	cmp	r3, #5
 800b748:	bfc4      	itt	gt
 800b74a:	3b04      	subgt	r3, #4
 800b74c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b750:	f1a3 0302 	sub.w	r3, r3, #2
 800b754:	bfcc      	ite	gt
 800b756:	2400      	movgt	r4, #0
 800b758:	2401      	movle	r4, #1
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d863      	bhi.n	800b826 <_dtoa_r+0x296>
 800b75e:	e8df f003 	tbb	[pc, r3]
 800b762:	372a      	.short	0x372a
 800b764:	5535      	.short	0x5535
 800b766:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b76a:	441e      	add	r6, r3
 800b76c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b770:	2b20      	cmp	r3, #32
 800b772:	bfc1      	itttt	gt
 800b774:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b778:	409f      	lslgt	r7, r3
 800b77a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b77e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b782:	bfd6      	itet	le
 800b784:	f1c3 0320 	rsble	r3, r3, #32
 800b788:	ea47 0003 	orrgt.w	r0, r7, r3
 800b78c:	fa04 f003 	lslle.w	r0, r4, r3
 800b790:	f7f4 fec0 	bl	8000514 <__aeabi_ui2d>
 800b794:	2201      	movs	r2, #1
 800b796:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b79a:	3e01      	subs	r6, #1
 800b79c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b79e:	e777      	b.n	800b690 <_dtoa_r+0x100>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e7b8      	b.n	800b716 <_dtoa_r+0x186>
 800b7a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b7a6:	e7b7      	b.n	800b718 <_dtoa_r+0x188>
 800b7a8:	427b      	negs	r3, r7
 800b7aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	eba8 0807 	sub.w	r8, r8, r7
 800b7b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7b4:	e7c4      	b.n	800b740 <_dtoa_r+0x1b0>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dc35      	bgt.n	800b82c <_dtoa_r+0x29c>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	9307      	str	r3, [sp, #28]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7ca:	e00b      	b.n	800b7e4 <_dtoa_r+0x254>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e7f3      	b.n	800b7b8 <_dtoa_r+0x228>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	bfb8      	it	lt
 800b7e2:	2301      	movlt	r3, #1
 800b7e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	2204      	movs	r2, #4
 800b7ec:	f102 0514 	add.w	r5, r2, #20
 800b7f0:	429d      	cmp	r5, r3
 800b7f2:	d91f      	bls.n	800b834 <_dtoa_r+0x2a4>
 800b7f4:	6041      	str	r1, [r0, #4]
 800b7f6:	4658      	mov	r0, fp
 800b7f8:	f001 fbd4 	bl	800cfa4 <_Balloc>
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d13c      	bne.n	800b87c <_dtoa_r+0x2ec>
 800b802:	4b1b      	ldr	r3, [pc, #108]	@ (800b870 <_dtoa_r+0x2e0>)
 800b804:	4602      	mov	r2, r0
 800b806:	f240 11af 	movw	r1, #431	@ 0x1af
 800b80a:	e6d8      	b.n	800b5be <_dtoa_r+0x2e>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e7e0      	b.n	800b7d2 <_dtoa_r+0x242>
 800b810:	2401      	movs	r4, #1
 800b812:	2300      	movs	r3, #0
 800b814:	9309      	str	r3, [sp, #36]	@ 0x24
 800b816:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	2200      	movs	r2, #0
 800b822:	2312      	movs	r3, #18
 800b824:	e7d0      	b.n	800b7c8 <_dtoa_r+0x238>
 800b826:	2301      	movs	r3, #1
 800b828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b82a:	e7f5      	b.n	800b818 <_dtoa_r+0x288>
 800b82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	9307      	str	r3, [sp, #28]
 800b832:	e7d7      	b.n	800b7e4 <_dtoa_r+0x254>
 800b834:	3101      	adds	r1, #1
 800b836:	0052      	lsls	r2, r2, #1
 800b838:	e7d8      	b.n	800b7ec <_dtoa_r+0x25c>
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w
 800b840:	636f4361 	.word	0x636f4361
 800b844:	3fd287a7 	.word	0x3fd287a7
 800b848:	8b60c8b3 	.word	0x8b60c8b3
 800b84c:	3fc68a28 	.word	0x3fc68a28
 800b850:	509f79fb 	.word	0x509f79fb
 800b854:	3fd34413 	.word	0x3fd34413
 800b858:	0800e146 	.word	0x0800e146
 800b85c:	0800e15d 	.word	0x0800e15d
 800b860:	7ff00000 	.word	0x7ff00000
 800b864:	0800dfb1 	.word	0x0800dfb1
 800b868:	3ff80000 	.word	0x3ff80000
 800b86c:	0800e2c8 	.word	0x0800e2c8
 800b870:	0800e1b5 	.word	0x0800e1b5
 800b874:	0800e142 	.word	0x0800e142
 800b878:	0800dfb0 	.word	0x0800dfb0
 800b87c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b880:	6018      	str	r0, [r3, #0]
 800b882:	9b07      	ldr	r3, [sp, #28]
 800b884:	2b0e      	cmp	r3, #14
 800b886:	f200 80a4 	bhi.w	800b9d2 <_dtoa_r+0x442>
 800b88a:	2c00      	cmp	r4, #0
 800b88c:	f000 80a1 	beq.w	800b9d2 <_dtoa_r+0x442>
 800b890:	2f00      	cmp	r7, #0
 800b892:	dd33      	ble.n	800b8fc <_dtoa_r+0x36c>
 800b894:	4bad      	ldr	r3, [pc, #692]	@ (800bb4c <_dtoa_r+0x5bc>)
 800b896:	f007 020f 	and.w	r2, r7, #15
 800b89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b89e:	ed93 7b00 	vldr	d7, [r3]
 800b8a2:	05f8      	lsls	r0, r7, #23
 800b8a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b8ac:	d516      	bpl.n	800b8dc <_dtoa_r+0x34c>
 800b8ae:	4ba8      	ldr	r3, [pc, #672]	@ (800bb50 <_dtoa_r+0x5c0>)
 800b8b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8b8:	f7f4 ffd0 	bl	800085c <__aeabi_ddiv>
 800b8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c0:	f004 040f 	and.w	r4, r4, #15
 800b8c4:	2603      	movs	r6, #3
 800b8c6:	4da2      	ldr	r5, [pc, #648]	@ (800bb50 <_dtoa_r+0x5c0>)
 800b8c8:	b954      	cbnz	r4, 800b8e0 <_dtoa_r+0x350>
 800b8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d2:	f7f4 ffc3 	bl	800085c <__aeabi_ddiv>
 800b8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8da:	e028      	b.n	800b92e <_dtoa_r+0x39e>
 800b8dc:	2602      	movs	r6, #2
 800b8de:	e7f2      	b.n	800b8c6 <_dtoa_r+0x336>
 800b8e0:	07e1      	lsls	r1, r4, #31
 800b8e2:	d508      	bpl.n	800b8f6 <_dtoa_r+0x366>
 800b8e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8ec:	f7f4 fe8c 	bl	8000608 <__aeabi_dmul>
 800b8f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8f4:	3601      	adds	r6, #1
 800b8f6:	1064      	asrs	r4, r4, #1
 800b8f8:	3508      	adds	r5, #8
 800b8fa:	e7e5      	b.n	800b8c8 <_dtoa_r+0x338>
 800b8fc:	f000 80d2 	beq.w	800baa4 <_dtoa_r+0x514>
 800b900:	427c      	negs	r4, r7
 800b902:	4b92      	ldr	r3, [pc, #584]	@ (800bb4c <_dtoa_r+0x5bc>)
 800b904:	4d92      	ldr	r5, [pc, #584]	@ (800bb50 <_dtoa_r+0x5c0>)
 800b906:	f004 020f 	and.w	r2, r4, #15
 800b90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b916:	f7f4 fe77 	bl	8000608 <__aeabi_dmul>
 800b91a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b91e:	1124      	asrs	r4, r4, #4
 800b920:	2300      	movs	r3, #0
 800b922:	2602      	movs	r6, #2
 800b924:	2c00      	cmp	r4, #0
 800b926:	f040 80b2 	bne.w	800ba8e <_dtoa_r+0x4fe>
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1d3      	bne.n	800b8d6 <_dtoa_r+0x346>
 800b92e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b930:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 80b7 	beq.w	800baa8 <_dtoa_r+0x518>
 800b93a:	4b86      	ldr	r3, [pc, #536]	@ (800bb54 <_dtoa_r+0x5c4>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	4620      	mov	r0, r4
 800b940:	4629      	mov	r1, r5
 800b942:	f7f5 f8d3 	bl	8000aec <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	f000 80ae 	beq.w	800baa8 <_dtoa_r+0x518>
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 80aa 	beq.w	800baa8 <_dtoa_r+0x518>
 800b954:	9b00      	ldr	r3, [sp, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	dd37      	ble.n	800b9ca <_dtoa_r+0x43a>
 800b95a:	1e7b      	subs	r3, r7, #1
 800b95c:	9304      	str	r3, [sp, #16]
 800b95e:	4620      	mov	r0, r4
 800b960:	4b7d      	ldr	r3, [pc, #500]	@ (800bb58 <_dtoa_r+0x5c8>)
 800b962:	2200      	movs	r2, #0
 800b964:	4629      	mov	r1, r5
 800b966:	f7f4 fe4f 	bl	8000608 <__aeabi_dmul>
 800b96a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b96e:	9c00      	ldr	r4, [sp, #0]
 800b970:	3601      	adds	r6, #1
 800b972:	4630      	mov	r0, r6
 800b974:	f7f4 fdde 	bl	8000534 <__aeabi_i2d>
 800b978:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b97c:	f7f4 fe44 	bl	8000608 <__aeabi_dmul>
 800b980:	4b76      	ldr	r3, [pc, #472]	@ (800bb5c <_dtoa_r+0x5cc>)
 800b982:	2200      	movs	r2, #0
 800b984:	f7f4 fc8a 	bl	800029c <__adddf3>
 800b988:	4605      	mov	r5, r0
 800b98a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b98e:	2c00      	cmp	r4, #0
 800b990:	f040 808d 	bne.w	800baae <_dtoa_r+0x51e>
 800b994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b998:	4b71      	ldr	r3, [pc, #452]	@ (800bb60 <_dtoa_r+0x5d0>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7f4 fc7c 	bl	8000298 <__aeabi_dsub>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	4633      	mov	r3, r6
 800b9ac:	f7f5 f8bc 	bl	8000b28 <__aeabi_dcmpgt>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	f040 828b 	bne.w	800becc <_dtoa_r+0x93c>
 800b9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b9c0:	f7f5 f894 	bl	8000aec <__aeabi_dcmplt>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f040 8128 	bne.w	800bc1a <_dtoa_r+0x68a>
 800b9ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b9ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b9d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f2c0 815a 	blt.w	800bc8e <_dtoa_r+0x6fe>
 800b9da:	2f0e      	cmp	r7, #14
 800b9dc:	f300 8157 	bgt.w	800bc8e <_dtoa_r+0x6fe>
 800b9e0:	4b5a      	ldr	r3, [pc, #360]	@ (800bb4c <_dtoa_r+0x5bc>)
 800b9e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9e6:	ed93 7b00 	vldr	d7, [r3]
 800b9ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	ed8d 7b00 	vstr	d7, [sp]
 800b9f2:	da03      	bge.n	800b9fc <_dtoa_r+0x46c>
 800b9f4:	9b07      	ldr	r3, [sp, #28]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f340 8101 	ble.w	800bbfe <_dtoa_r+0x66e>
 800b9fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba00:	4656      	mov	r6, sl
 800ba02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba06:	4620      	mov	r0, r4
 800ba08:	4629      	mov	r1, r5
 800ba0a:	f7f4 ff27 	bl	800085c <__aeabi_ddiv>
 800ba0e:	f7f5 f8ab 	bl	8000b68 <__aeabi_d2iz>
 800ba12:	4680      	mov	r8, r0
 800ba14:	f7f4 fd8e 	bl	8000534 <__aeabi_i2d>
 800ba18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba1c:	f7f4 fdf4 	bl	8000608 <__aeabi_dmul>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	4620      	mov	r0, r4
 800ba26:	4629      	mov	r1, r5
 800ba28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba2c:	f7f4 fc34 	bl	8000298 <__aeabi_dsub>
 800ba30:	f806 4b01 	strb.w	r4, [r6], #1
 800ba34:	9d07      	ldr	r5, [sp, #28]
 800ba36:	eba6 040a 	sub.w	r4, r6, sl
 800ba3a:	42a5      	cmp	r5, r4
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	460b      	mov	r3, r1
 800ba40:	f040 8117 	bne.w	800bc72 <_dtoa_r+0x6e2>
 800ba44:	f7f4 fc2a 	bl	800029c <__adddf3>
 800ba48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	f7f5 f86a 	bl	8000b28 <__aeabi_dcmpgt>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	f040 80f9 	bne.w	800bc4c <_dtoa_r+0x6bc>
 800ba5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f5 f839 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba66:	b118      	cbz	r0, 800ba70 <_dtoa_r+0x4e0>
 800ba68:	f018 0f01 	tst.w	r8, #1
 800ba6c:	f040 80ee 	bne.w	800bc4c <_dtoa_r+0x6bc>
 800ba70:	4649      	mov	r1, r9
 800ba72:	4658      	mov	r0, fp
 800ba74:	f001 fad6 	bl	800d024 <_Bfree>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	7033      	strb	r3, [r6, #0]
 800ba7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba7e:	3701      	adds	r7, #1
 800ba80:	601f      	str	r7, [r3, #0]
 800ba82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 831d 	beq.w	800c0c4 <_dtoa_r+0xb34>
 800ba8a:	601e      	str	r6, [r3, #0]
 800ba8c:	e31a      	b.n	800c0c4 <_dtoa_r+0xb34>
 800ba8e:	07e2      	lsls	r2, r4, #31
 800ba90:	d505      	bpl.n	800ba9e <_dtoa_r+0x50e>
 800ba92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba96:	f7f4 fdb7 	bl	8000608 <__aeabi_dmul>
 800ba9a:	3601      	adds	r6, #1
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	1064      	asrs	r4, r4, #1
 800baa0:	3508      	adds	r5, #8
 800baa2:	e73f      	b.n	800b924 <_dtoa_r+0x394>
 800baa4:	2602      	movs	r6, #2
 800baa6:	e742      	b.n	800b92e <_dtoa_r+0x39e>
 800baa8:	9c07      	ldr	r4, [sp, #28]
 800baaa:	9704      	str	r7, [sp, #16]
 800baac:	e761      	b.n	800b972 <_dtoa_r+0x3e2>
 800baae:	4b27      	ldr	r3, [pc, #156]	@ (800bb4c <_dtoa_r+0x5bc>)
 800bab0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bab6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800baba:	4454      	add	r4, sl
 800babc:	2900      	cmp	r1, #0
 800babe:	d053      	beq.n	800bb68 <_dtoa_r+0x5d8>
 800bac0:	4928      	ldr	r1, [pc, #160]	@ (800bb64 <_dtoa_r+0x5d4>)
 800bac2:	2000      	movs	r0, #0
 800bac4:	f7f4 feca 	bl	800085c <__aeabi_ddiv>
 800bac8:	4633      	mov	r3, r6
 800baca:	462a      	mov	r2, r5
 800bacc:	f7f4 fbe4 	bl	8000298 <__aeabi_dsub>
 800bad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bad4:	4656      	mov	r6, sl
 800bad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bada:	f7f5 f845 	bl	8000b68 <__aeabi_d2iz>
 800bade:	4605      	mov	r5, r0
 800bae0:	f7f4 fd28 	bl	8000534 <__aeabi_i2d>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baec:	f7f4 fbd4 	bl	8000298 <__aeabi_dsub>
 800baf0:	3530      	adds	r5, #48	@ 0x30
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bafa:	f806 5b01 	strb.w	r5, [r6], #1
 800bafe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb02:	f7f4 fff3 	bl	8000aec <__aeabi_dcmplt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d171      	bne.n	800bbee <_dtoa_r+0x65e>
 800bb0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb0e:	4911      	ldr	r1, [pc, #68]	@ (800bb54 <_dtoa_r+0x5c4>)
 800bb10:	2000      	movs	r0, #0
 800bb12:	f7f4 fbc1 	bl	8000298 <__aeabi_dsub>
 800bb16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb1a:	f7f4 ffe7 	bl	8000aec <__aeabi_dcmplt>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f040 8095 	bne.w	800bc4e <_dtoa_r+0x6be>
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	f43f af50 	beq.w	800b9ca <_dtoa_r+0x43a>
 800bb2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb2e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb58 <_dtoa_r+0x5c8>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	f7f4 fd69 	bl	8000608 <__aeabi_dmul>
 800bb36:	4b08      	ldr	r3, [pc, #32]	@ (800bb58 <_dtoa_r+0x5c8>)
 800bb38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb42:	f7f4 fd61 	bl	8000608 <__aeabi_dmul>
 800bb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb4a:	e7c4      	b.n	800bad6 <_dtoa_r+0x546>
 800bb4c:	0800e2c8 	.word	0x0800e2c8
 800bb50:	0800e2a0 	.word	0x0800e2a0
 800bb54:	3ff00000 	.word	0x3ff00000
 800bb58:	40240000 	.word	0x40240000
 800bb5c:	401c0000 	.word	0x401c0000
 800bb60:	40140000 	.word	0x40140000
 800bb64:	3fe00000 	.word	0x3fe00000
 800bb68:	4631      	mov	r1, r6
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f7f4 fd4c 	bl	8000608 <__aeabi_dmul>
 800bb70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb74:	9415      	str	r4, [sp, #84]	@ 0x54
 800bb76:	4656      	mov	r6, sl
 800bb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb7c:	f7f4 fff4 	bl	8000b68 <__aeabi_d2iz>
 800bb80:	4605      	mov	r5, r0
 800bb82:	f7f4 fcd7 	bl	8000534 <__aeabi_i2d>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb8e:	f7f4 fb83 	bl	8000298 <__aeabi_dsub>
 800bb92:	3530      	adds	r5, #48	@ 0x30
 800bb94:	f806 5b01 	strb.w	r5, [r6], #1
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	42a6      	cmp	r6, r4
 800bb9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bba2:	f04f 0200 	mov.w	r2, #0
 800bba6:	d124      	bne.n	800bbf2 <_dtoa_r+0x662>
 800bba8:	4bac      	ldr	r3, [pc, #688]	@ (800be5c <_dtoa_r+0x8cc>)
 800bbaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbae:	f7f4 fb75 	bl	800029c <__adddf3>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbba:	f7f4 ffb5 	bl	8000b28 <__aeabi_dcmpgt>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d145      	bne.n	800bc4e <_dtoa_r+0x6be>
 800bbc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbc6:	49a5      	ldr	r1, [pc, #660]	@ (800be5c <_dtoa_r+0x8cc>)
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f7f4 fb65 	bl	8000298 <__aeabi_dsub>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd6:	f7f4 ff89 	bl	8000aec <__aeabi_dcmplt>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f43f aef5 	beq.w	800b9ca <_dtoa_r+0x43a>
 800bbe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bbe2:	1e73      	subs	r3, r6, #1
 800bbe4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bbe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbea:	2b30      	cmp	r3, #48	@ 0x30
 800bbec:	d0f8      	beq.n	800bbe0 <_dtoa_r+0x650>
 800bbee:	9f04      	ldr	r7, [sp, #16]
 800bbf0:	e73e      	b.n	800ba70 <_dtoa_r+0x4e0>
 800bbf2:	4b9b      	ldr	r3, [pc, #620]	@ (800be60 <_dtoa_r+0x8d0>)
 800bbf4:	f7f4 fd08 	bl	8000608 <__aeabi_dmul>
 800bbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfc:	e7bc      	b.n	800bb78 <_dtoa_r+0x5e8>
 800bbfe:	d10c      	bne.n	800bc1a <_dtoa_r+0x68a>
 800bc00:	4b98      	ldr	r3, [pc, #608]	@ (800be64 <_dtoa_r+0x8d4>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc08:	f7f4 fcfe 	bl	8000608 <__aeabi_dmul>
 800bc0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc10:	f7f4 ff80 	bl	8000b14 <__aeabi_dcmpge>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f000 8157 	beq.w	800bec8 <_dtoa_r+0x938>
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	4625      	mov	r5, r4
 800bc1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc20:	43db      	mvns	r3, r3
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	4656      	mov	r6, sl
 800bc26:	2700      	movs	r7, #0
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4658      	mov	r0, fp
 800bc2c:	f001 f9fa 	bl	800d024 <_Bfree>
 800bc30:	2d00      	cmp	r5, #0
 800bc32:	d0dc      	beq.n	800bbee <_dtoa_r+0x65e>
 800bc34:	b12f      	cbz	r7, 800bc42 <_dtoa_r+0x6b2>
 800bc36:	42af      	cmp	r7, r5
 800bc38:	d003      	beq.n	800bc42 <_dtoa_r+0x6b2>
 800bc3a:	4639      	mov	r1, r7
 800bc3c:	4658      	mov	r0, fp
 800bc3e:	f001 f9f1 	bl	800d024 <_Bfree>
 800bc42:	4629      	mov	r1, r5
 800bc44:	4658      	mov	r0, fp
 800bc46:	f001 f9ed 	bl	800d024 <_Bfree>
 800bc4a:	e7d0      	b.n	800bbee <_dtoa_r+0x65e>
 800bc4c:	9704      	str	r7, [sp, #16]
 800bc4e:	4633      	mov	r3, r6
 800bc50:	461e      	mov	r6, r3
 800bc52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc56:	2a39      	cmp	r2, #57	@ 0x39
 800bc58:	d107      	bne.n	800bc6a <_dtoa_r+0x6da>
 800bc5a:	459a      	cmp	sl, r3
 800bc5c:	d1f8      	bne.n	800bc50 <_dtoa_r+0x6c0>
 800bc5e:	9a04      	ldr	r2, [sp, #16]
 800bc60:	3201      	adds	r2, #1
 800bc62:	9204      	str	r2, [sp, #16]
 800bc64:	2230      	movs	r2, #48	@ 0x30
 800bc66:	f88a 2000 	strb.w	r2, [sl]
 800bc6a:	781a      	ldrb	r2, [r3, #0]
 800bc6c:	3201      	adds	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	e7bd      	b.n	800bbee <_dtoa_r+0x65e>
 800bc72:	4b7b      	ldr	r3, [pc, #492]	@ (800be60 <_dtoa_r+0x8d0>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	f7f4 fcc7 	bl	8000608 <__aeabi_dmul>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	460d      	mov	r5, r1
 800bc82:	f7f4 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f43f aebb 	beq.w	800ba02 <_dtoa_r+0x472>
 800bc8c:	e6f0      	b.n	800ba70 <_dtoa_r+0x4e0>
 800bc8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bc90:	2a00      	cmp	r2, #0
 800bc92:	f000 80db 	beq.w	800be4c <_dtoa_r+0x8bc>
 800bc96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc98:	2a01      	cmp	r2, #1
 800bc9a:	f300 80bf 	bgt.w	800be1c <_dtoa_r+0x88c>
 800bc9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	f000 80b7 	beq.w	800be14 <_dtoa_r+0x884>
 800bca6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bcaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcac:	4646      	mov	r6, r8
 800bcae:	9a08      	ldr	r2, [sp, #32]
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	441a      	add	r2, r3
 800bcb4:	4658      	mov	r0, fp
 800bcb6:	4498      	add	r8, r3
 800bcb8:	9208      	str	r2, [sp, #32]
 800bcba:	f001 fab1 	bl	800d220 <__i2b>
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	b15e      	cbz	r6, 800bcda <_dtoa_r+0x74a>
 800bcc2:	9b08      	ldr	r3, [sp, #32]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd08      	ble.n	800bcda <_dtoa_r+0x74a>
 800bcc8:	42b3      	cmp	r3, r6
 800bcca:	9a08      	ldr	r2, [sp, #32]
 800bccc:	bfa8      	it	ge
 800bcce:	4633      	movge	r3, r6
 800bcd0:	eba8 0803 	sub.w	r8, r8, r3
 800bcd4:	1af6      	subs	r6, r6, r3
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	9308      	str	r3, [sp, #32]
 800bcda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcdc:	b1f3      	cbz	r3, 800bd1c <_dtoa_r+0x78c>
 800bcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 80b7 	beq.w	800be54 <_dtoa_r+0x8c4>
 800bce6:	b18c      	cbz	r4, 800bd0c <_dtoa_r+0x77c>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4622      	mov	r2, r4
 800bcec:	4658      	mov	r0, fp
 800bcee:	f001 fb57 	bl	800d3a0 <__pow5mult>
 800bcf2:	464a      	mov	r2, r9
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	4658      	mov	r0, fp
 800bcfa:	f001 faa7 	bl	800d24c <__multiply>
 800bcfe:	4649      	mov	r1, r9
 800bd00:	9004      	str	r0, [sp, #16]
 800bd02:	4658      	mov	r0, fp
 800bd04:	f001 f98e 	bl	800d024 <_Bfree>
 800bd08:	9b04      	ldr	r3, [sp, #16]
 800bd0a:	4699      	mov	r9, r3
 800bd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd0e:	1b1a      	subs	r2, r3, r4
 800bd10:	d004      	beq.n	800bd1c <_dtoa_r+0x78c>
 800bd12:	4649      	mov	r1, r9
 800bd14:	4658      	mov	r0, fp
 800bd16:	f001 fb43 	bl	800d3a0 <__pow5mult>
 800bd1a:	4681      	mov	r9, r0
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	4658      	mov	r0, fp
 800bd20:	f001 fa7e 	bl	800d220 <__i2b>
 800bd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd26:	4604      	mov	r4, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 81cf 	beq.w	800c0cc <_dtoa_r+0xb3c>
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4601      	mov	r1, r0
 800bd32:	4658      	mov	r0, fp
 800bd34:	f001 fb34 	bl	800d3a0 <__pow5mult>
 800bd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	f300 8095 	bgt.w	800be6c <_dtoa_r+0x8dc>
 800bd42:	9b02      	ldr	r3, [sp, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f040 8087 	bne.w	800be58 <_dtoa_r+0x8c8>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f040 8089 	bne.w	800be68 <_dtoa_r+0x8d8>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd5c:	0d1b      	lsrs	r3, r3, #20
 800bd5e:	051b      	lsls	r3, r3, #20
 800bd60:	b12b      	cbz	r3, 800bd6e <_dtoa_r+0x7de>
 800bd62:	9b08      	ldr	r3, [sp, #32]
 800bd64:	3301      	adds	r3, #1
 800bd66:	9308      	str	r3, [sp, #32]
 800bd68:	f108 0801 	add.w	r8, r8, #1
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f000 81b0 	beq.w	800c0d8 <_dtoa_r+0xb48>
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd7e:	6918      	ldr	r0, [r3, #16]
 800bd80:	f001 fa02 	bl	800d188 <__hi0bits>
 800bd84:	f1c0 0020 	rsb	r0, r0, #32
 800bd88:	9b08      	ldr	r3, [sp, #32]
 800bd8a:	4418      	add	r0, r3
 800bd8c:	f010 001f 	ands.w	r0, r0, #31
 800bd90:	d077      	beq.n	800be82 <_dtoa_r+0x8f2>
 800bd92:	f1c0 0320 	rsb	r3, r0, #32
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	dd6b      	ble.n	800be72 <_dtoa_r+0x8e2>
 800bd9a:	9b08      	ldr	r3, [sp, #32]
 800bd9c:	f1c0 001c 	rsb	r0, r0, #28
 800bda0:	4403      	add	r3, r0
 800bda2:	4480      	add	r8, r0
 800bda4:	4406      	add	r6, r0
 800bda6:	9308      	str	r3, [sp, #32]
 800bda8:	f1b8 0f00 	cmp.w	r8, #0
 800bdac:	dd05      	ble.n	800bdba <_dtoa_r+0x82a>
 800bdae:	4649      	mov	r1, r9
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	4658      	mov	r0, fp
 800bdb4:	f001 fb4e 	bl	800d454 <__lshift>
 800bdb8:	4681      	mov	r9, r0
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dd05      	ble.n	800bdcc <_dtoa_r+0x83c>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	4658      	mov	r0, fp
 800bdc6:	f001 fb45 	bl	800d454 <__lshift>
 800bdca:	4604      	mov	r4, r0
 800bdcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d059      	beq.n	800be86 <_dtoa_r+0x8f6>
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	4648      	mov	r0, r9
 800bdd6:	f001 fba9 	bl	800d52c <__mcmp>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	da53      	bge.n	800be86 <_dtoa_r+0x8f6>
 800bdde:	1e7b      	subs	r3, r7, #1
 800bde0:	9304      	str	r3, [sp, #16]
 800bde2:	4649      	mov	r1, r9
 800bde4:	2300      	movs	r3, #0
 800bde6:	220a      	movs	r2, #10
 800bde8:	4658      	mov	r0, fp
 800bdea:	f001 f93d 	bl	800d068 <__multadd>
 800bdee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdf0:	4681      	mov	r9, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 8172 	beq.w	800c0dc <_dtoa_r+0xb4c>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	4658      	mov	r0, fp
 800be00:	f001 f932 	bl	800d068 <__multadd>
 800be04:	9b00      	ldr	r3, [sp, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	4605      	mov	r5, r0
 800be0a:	dc67      	bgt.n	800bedc <_dtoa_r+0x94c>
 800be0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be0e:	2b02      	cmp	r3, #2
 800be10:	dc41      	bgt.n	800be96 <_dtoa_r+0x906>
 800be12:	e063      	b.n	800bedc <_dtoa_r+0x94c>
 800be14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800be1a:	e746      	b.n	800bcaa <_dtoa_r+0x71a>
 800be1c:	9b07      	ldr	r3, [sp, #28]
 800be1e:	1e5c      	subs	r4, r3, #1
 800be20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be22:	42a3      	cmp	r3, r4
 800be24:	bfbf      	itttt	lt
 800be26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800be2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800be2c:	1ae3      	sublt	r3, r4, r3
 800be2e:	bfb4      	ite	lt
 800be30:	18d2      	addlt	r2, r2, r3
 800be32:	1b1c      	subge	r4, r3, r4
 800be34:	9b07      	ldr	r3, [sp, #28]
 800be36:	bfbc      	itt	lt
 800be38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800be3a:	2400      	movlt	r4, #0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfb5      	itete	lt
 800be40:	eba8 0603 	sublt.w	r6, r8, r3
 800be44:	9b07      	ldrge	r3, [sp, #28]
 800be46:	2300      	movlt	r3, #0
 800be48:	4646      	movge	r6, r8
 800be4a:	e730      	b.n	800bcae <_dtoa_r+0x71e>
 800be4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800be50:	4646      	mov	r6, r8
 800be52:	e735      	b.n	800bcc0 <_dtoa_r+0x730>
 800be54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be56:	e75c      	b.n	800bd12 <_dtoa_r+0x782>
 800be58:	2300      	movs	r3, #0
 800be5a:	e788      	b.n	800bd6e <_dtoa_r+0x7de>
 800be5c:	3fe00000 	.word	0x3fe00000
 800be60:	40240000 	.word	0x40240000
 800be64:	40140000 	.word	0x40140000
 800be68:	9b02      	ldr	r3, [sp, #8]
 800be6a:	e780      	b.n	800bd6e <_dtoa_r+0x7de>
 800be6c:	2300      	movs	r3, #0
 800be6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be70:	e782      	b.n	800bd78 <_dtoa_r+0x7e8>
 800be72:	d099      	beq.n	800bda8 <_dtoa_r+0x818>
 800be74:	9a08      	ldr	r2, [sp, #32]
 800be76:	331c      	adds	r3, #28
 800be78:	441a      	add	r2, r3
 800be7a:	4498      	add	r8, r3
 800be7c:	441e      	add	r6, r3
 800be7e:	9208      	str	r2, [sp, #32]
 800be80:	e792      	b.n	800bda8 <_dtoa_r+0x818>
 800be82:	4603      	mov	r3, r0
 800be84:	e7f6      	b.n	800be74 <_dtoa_r+0x8e4>
 800be86:	9b07      	ldr	r3, [sp, #28]
 800be88:	9704      	str	r7, [sp, #16]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	dc20      	bgt.n	800bed0 <_dtoa_r+0x940>
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be92:	2b02      	cmp	r3, #2
 800be94:	dd1e      	ble.n	800bed4 <_dtoa_r+0x944>
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f47f aec0 	bne.w	800bc1e <_dtoa_r+0x68e>
 800be9e:	4621      	mov	r1, r4
 800bea0:	2205      	movs	r2, #5
 800bea2:	4658      	mov	r0, fp
 800bea4:	f001 f8e0 	bl	800d068 <__multadd>
 800bea8:	4601      	mov	r1, r0
 800beaa:	4604      	mov	r4, r0
 800beac:	4648      	mov	r0, r9
 800beae:	f001 fb3d 	bl	800d52c <__mcmp>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	f77f aeb3 	ble.w	800bc1e <_dtoa_r+0x68e>
 800beb8:	4656      	mov	r6, sl
 800beba:	2331      	movs	r3, #49	@ 0x31
 800bebc:	f806 3b01 	strb.w	r3, [r6], #1
 800bec0:	9b04      	ldr	r3, [sp, #16]
 800bec2:	3301      	adds	r3, #1
 800bec4:	9304      	str	r3, [sp, #16]
 800bec6:	e6ae      	b.n	800bc26 <_dtoa_r+0x696>
 800bec8:	9c07      	ldr	r4, [sp, #28]
 800beca:	9704      	str	r7, [sp, #16]
 800becc:	4625      	mov	r5, r4
 800bece:	e7f3      	b.n	800beb8 <_dtoa_r+0x928>
 800bed0:	9b07      	ldr	r3, [sp, #28]
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 8104 	beq.w	800c0e4 <_dtoa_r+0xb54>
 800bedc:	2e00      	cmp	r6, #0
 800bede:	dd05      	ble.n	800beec <_dtoa_r+0x95c>
 800bee0:	4629      	mov	r1, r5
 800bee2:	4632      	mov	r2, r6
 800bee4:	4658      	mov	r0, fp
 800bee6:	f001 fab5 	bl	800d454 <__lshift>
 800beea:	4605      	mov	r5, r0
 800beec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d05a      	beq.n	800bfa8 <_dtoa_r+0xa18>
 800bef2:	6869      	ldr	r1, [r5, #4]
 800bef4:	4658      	mov	r0, fp
 800bef6:	f001 f855 	bl	800cfa4 <_Balloc>
 800befa:	4606      	mov	r6, r0
 800befc:	b928      	cbnz	r0, 800bf0a <_dtoa_r+0x97a>
 800befe:	4b84      	ldr	r3, [pc, #528]	@ (800c110 <_dtoa_r+0xb80>)
 800bf00:	4602      	mov	r2, r0
 800bf02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf06:	f7ff bb5a 	b.w	800b5be <_dtoa_r+0x2e>
 800bf0a:	692a      	ldr	r2, [r5, #16]
 800bf0c:	3202      	adds	r2, #2
 800bf0e:	0092      	lsls	r2, r2, #2
 800bf10:	f105 010c 	add.w	r1, r5, #12
 800bf14:	300c      	adds	r0, #12
 800bf16:	f7ff fa94 	bl	800b442 <memcpy>
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4658      	mov	r0, fp
 800bf20:	f001 fa98 	bl	800d454 <__lshift>
 800bf24:	f10a 0301 	add.w	r3, sl, #1
 800bf28:	9307      	str	r3, [sp, #28]
 800bf2a:	9b00      	ldr	r3, [sp, #0]
 800bf2c:	4453      	add	r3, sl
 800bf2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf30:	9b02      	ldr	r3, [sp, #8]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	462f      	mov	r7, r5
 800bf38:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	4621      	mov	r1, r4
 800bf40:	3b01      	subs	r3, #1
 800bf42:	4648      	mov	r0, r9
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	f7ff fa99 	bl	800b47c <quorem>
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	9002      	str	r0, [sp, #8]
 800bf4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf52:	4648      	mov	r0, r9
 800bf54:	f001 faea 	bl	800d52c <__mcmp>
 800bf58:	462a      	mov	r2, r5
 800bf5a:	9008      	str	r0, [sp, #32]
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	4658      	mov	r0, fp
 800bf60:	f001 fb00 	bl	800d564 <__mdiff>
 800bf64:	68c2      	ldr	r2, [r0, #12]
 800bf66:	4606      	mov	r6, r0
 800bf68:	bb02      	cbnz	r2, 800bfac <_dtoa_r+0xa1c>
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	4648      	mov	r0, r9
 800bf6e:	f001 fadd 	bl	800d52c <__mcmp>
 800bf72:	4602      	mov	r2, r0
 800bf74:	4631      	mov	r1, r6
 800bf76:	4658      	mov	r0, fp
 800bf78:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf7a:	f001 f853 	bl	800d024 <_Bfree>
 800bf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf82:	9e07      	ldr	r6, [sp, #28]
 800bf84:	ea43 0102 	orr.w	r1, r3, r2
 800bf88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf8a:	4319      	orrs	r1, r3
 800bf8c:	d110      	bne.n	800bfb0 <_dtoa_r+0xa20>
 800bf8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf92:	d029      	beq.n	800bfe8 <_dtoa_r+0xa58>
 800bf94:	9b08      	ldr	r3, [sp, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dd02      	ble.n	800bfa0 <_dtoa_r+0xa10>
 800bf9a:	9b02      	ldr	r3, [sp, #8]
 800bf9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bfa0:	9b00      	ldr	r3, [sp, #0]
 800bfa2:	f883 8000 	strb.w	r8, [r3]
 800bfa6:	e63f      	b.n	800bc28 <_dtoa_r+0x698>
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	e7bb      	b.n	800bf24 <_dtoa_r+0x994>
 800bfac:	2201      	movs	r2, #1
 800bfae:	e7e1      	b.n	800bf74 <_dtoa_r+0x9e4>
 800bfb0:	9b08      	ldr	r3, [sp, #32]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	db04      	blt.n	800bfc0 <_dtoa_r+0xa30>
 800bfb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfb8:	430b      	orrs	r3, r1
 800bfba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bfbc:	430b      	orrs	r3, r1
 800bfbe:	d120      	bne.n	800c002 <_dtoa_r+0xa72>
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	dded      	ble.n	800bfa0 <_dtoa_r+0xa10>
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	4658      	mov	r0, fp
 800bfca:	f001 fa43 	bl	800d454 <__lshift>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4681      	mov	r9, r0
 800bfd2:	f001 faab 	bl	800d52c <__mcmp>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	dc03      	bgt.n	800bfe2 <_dtoa_r+0xa52>
 800bfda:	d1e1      	bne.n	800bfa0 <_dtoa_r+0xa10>
 800bfdc:	f018 0f01 	tst.w	r8, #1
 800bfe0:	d0de      	beq.n	800bfa0 <_dtoa_r+0xa10>
 800bfe2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfe6:	d1d8      	bne.n	800bf9a <_dtoa_r+0xa0a>
 800bfe8:	9a00      	ldr	r2, [sp, #0]
 800bfea:	2339      	movs	r3, #57	@ 0x39
 800bfec:	7013      	strb	r3, [r2, #0]
 800bfee:	4633      	mov	r3, r6
 800bff0:	461e      	mov	r6, r3
 800bff2:	3b01      	subs	r3, #1
 800bff4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bff8:	2a39      	cmp	r2, #57	@ 0x39
 800bffa:	d052      	beq.n	800c0a2 <_dtoa_r+0xb12>
 800bffc:	3201      	adds	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	e612      	b.n	800bc28 <_dtoa_r+0x698>
 800c002:	2a00      	cmp	r2, #0
 800c004:	dd07      	ble.n	800c016 <_dtoa_r+0xa86>
 800c006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c00a:	d0ed      	beq.n	800bfe8 <_dtoa_r+0xa58>
 800c00c:	9a00      	ldr	r2, [sp, #0]
 800c00e:	f108 0301 	add.w	r3, r8, #1
 800c012:	7013      	strb	r3, [r2, #0]
 800c014:	e608      	b.n	800bc28 <_dtoa_r+0x698>
 800c016:	9b07      	ldr	r3, [sp, #28]
 800c018:	9a07      	ldr	r2, [sp, #28]
 800c01a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c020:	4293      	cmp	r3, r2
 800c022:	d028      	beq.n	800c076 <_dtoa_r+0xae6>
 800c024:	4649      	mov	r1, r9
 800c026:	2300      	movs	r3, #0
 800c028:	220a      	movs	r2, #10
 800c02a:	4658      	mov	r0, fp
 800c02c:	f001 f81c 	bl	800d068 <__multadd>
 800c030:	42af      	cmp	r7, r5
 800c032:	4681      	mov	r9, r0
 800c034:	f04f 0300 	mov.w	r3, #0
 800c038:	f04f 020a 	mov.w	r2, #10
 800c03c:	4639      	mov	r1, r7
 800c03e:	4658      	mov	r0, fp
 800c040:	d107      	bne.n	800c052 <_dtoa_r+0xac2>
 800c042:	f001 f811 	bl	800d068 <__multadd>
 800c046:	4607      	mov	r7, r0
 800c048:	4605      	mov	r5, r0
 800c04a:	9b07      	ldr	r3, [sp, #28]
 800c04c:	3301      	adds	r3, #1
 800c04e:	9307      	str	r3, [sp, #28]
 800c050:	e774      	b.n	800bf3c <_dtoa_r+0x9ac>
 800c052:	f001 f809 	bl	800d068 <__multadd>
 800c056:	4629      	mov	r1, r5
 800c058:	4607      	mov	r7, r0
 800c05a:	2300      	movs	r3, #0
 800c05c:	220a      	movs	r2, #10
 800c05e:	4658      	mov	r0, fp
 800c060:	f001 f802 	bl	800d068 <__multadd>
 800c064:	4605      	mov	r5, r0
 800c066:	e7f0      	b.n	800c04a <_dtoa_r+0xaba>
 800c068:	9b00      	ldr	r3, [sp, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	bfcc      	ite	gt
 800c06e:	461e      	movgt	r6, r3
 800c070:	2601      	movle	r6, #1
 800c072:	4456      	add	r6, sl
 800c074:	2700      	movs	r7, #0
 800c076:	4649      	mov	r1, r9
 800c078:	2201      	movs	r2, #1
 800c07a:	4658      	mov	r0, fp
 800c07c:	f001 f9ea 	bl	800d454 <__lshift>
 800c080:	4621      	mov	r1, r4
 800c082:	4681      	mov	r9, r0
 800c084:	f001 fa52 	bl	800d52c <__mcmp>
 800c088:	2800      	cmp	r0, #0
 800c08a:	dcb0      	bgt.n	800bfee <_dtoa_r+0xa5e>
 800c08c:	d102      	bne.n	800c094 <_dtoa_r+0xb04>
 800c08e:	f018 0f01 	tst.w	r8, #1
 800c092:	d1ac      	bne.n	800bfee <_dtoa_r+0xa5e>
 800c094:	4633      	mov	r3, r6
 800c096:	461e      	mov	r6, r3
 800c098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c09c:	2a30      	cmp	r2, #48	@ 0x30
 800c09e:	d0fa      	beq.n	800c096 <_dtoa_r+0xb06>
 800c0a0:	e5c2      	b.n	800bc28 <_dtoa_r+0x698>
 800c0a2:	459a      	cmp	sl, r3
 800c0a4:	d1a4      	bne.n	800bff0 <_dtoa_r+0xa60>
 800c0a6:	9b04      	ldr	r3, [sp, #16]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	9304      	str	r3, [sp, #16]
 800c0ac:	2331      	movs	r3, #49	@ 0x31
 800c0ae:	f88a 3000 	strb.w	r3, [sl]
 800c0b2:	e5b9      	b.n	800bc28 <_dtoa_r+0x698>
 800c0b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c114 <_dtoa_r+0xb84>
 800c0ba:	b11b      	cbz	r3, 800c0c4 <_dtoa_r+0xb34>
 800c0bc:	f10a 0308 	add.w	r3, sl, #8
 800c0c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	4650      	mov	r0, sl
 800c0c6:	b019      	add	sp, #100	@ 0x64
 800c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	f77f ae37 	ble.w	800bd42 <_dtoa_r+0x7b2>
 800c0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0d8:	2001      	movs	r0, #1
 800c0da:	e655      	b.n	800bd88 <_dtoa_r+0x7f8>
 800c0dc:	9b00      	ldr	r3, [sp, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f77f aed6 	ble.w	800be90 <_dtoa_r+0x900>
 800c0e4:	4656      	mov	r6, sl
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4648      	mov	r0, r9
 800c0ea:	f7ff f9c7 	bl	800b47c <quorem>
 800c0ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c0f2:	f806 8b01 	strb.w	r8, [r6], #1
 800c0f6:	9b00      	ldr	r3, [sp, #0]
 800c0f8:	eba6 020a 	sub.w	r2, r6, sl
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	ddb3      	ble.n	800c068 <_dtoa_r+0xad8>
 800c100:	4649      	mov	r1, r9
 800c102:	2300      	movs	r3, #0
 800c104:	220a      	movs	r2, #10
 800c106:	4658      	mov	r0, fp
 800c108:	f000 ffae 	bl	800d068 <__multadd>
 800c10c:	4681      	mov	r9, r0
 800c10e:	e7ea      	b.n	800c0e6 <_dtoa_r+0xb56>
 800c110:	0800e1b5 	.word	0x0800e1b5
 800c114:	0800e139 	.word	0x0800e139

0800c118 <rshift>:
 800c118:	6903      	ldr	r3, [r0, #16]
 800c11a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c11e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c122:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c126:	f100 0414 	add.w	r4, r0, #20
 800c12a:	dd45      	ble.n	800c1b8 <rshift+0xa0>
 800c12c:	f011 011f 	ands.w	r1, r1, #31
 800c130:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c134:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c138:	d10c      	bne.n	800c154 <rshift+0x3c>
 800c13a:	f100 0710 	add.w	r7, r0, #16
 800c13e:	4629      	mov	r1, r5
 800c140:	42b1      	cmp	r1, r6
 800c142:	d334      	bcc.n	800c1ae <rshift+0x96>
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	1eea      	subs	r2, r5, #3
 800c14a:	4296      	cmp	r6, r2
 800c14c:	bf38      	it	cc
 800c14e:	2300      	movcc	r3, #0
 800c150:	4423      	add	r3, r4
 800c152:	e015      	b.n	800c180 <rshift+0x68>
 800c154:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c158:	f1c1 0820 	rsb	r8, r1, #32
 800c15c:	40cf      	lsrs	r7, r1
 800c15e:	f105 0e04 	add.w	lr, r5, #4
 800c162:	46a1      	mov	r9, r4
 800c164:	4576      	cmp	r6, lr
 800c166:	46f4      	mov	ip, lr
 800c168:	d815      	bhi.n	800c196 <rshift+0x7e>
 800c16a:	1a9a      	subs	r2, r3, r2
 800c16c:	0092      	lsls	r2, r2, #2
 800c16e:	3a04      	subs	r2, #4
 800c170:	3501      	adds	r5, #1
 800c172:	42ae      	cmp	r6, r5
 800c174:	bf38      	it	cc
 800c176:	2200      	movcc	r2, #0
 800c178:	18a3      	adds	r3, r4, r2
 800c17a:	50a7      	str	r7, [r4, r2]
 800c17c:	b107      	cbz	r7, 800c180 <rshift+0x68>
 800c17e:	3304      	adds	r3, #4
 800c180:	1b1a      	subs	r2, r3, r4
 800c182:	42a3      	cmp	r3, r4
 800c184:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c188:	bf08      	it	eq
 800c18a:	2300      	moveq	r3, #0
 800c18c:	6102      	str	r2, [r0, #16]
 800c18e:	bf08      	it	eq
 800c190:	6143      	streq	r3, [r0, #20]
 800c192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c196:	f8dc c000 	ldr.w	ip, [ip]
 800c19a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c19e:	ea4c 0707 	orr.w	r7, ip, r7
 800c1a2:	f849 7b04 	str.w	r7, [r9], #4
 800c1a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1aa:	40cf      	lsrs	r7, r1
 800c1ac:	e7da      	b.n	800c164 <rshift+0x4c>
 800c1ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800c1b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c1b6:	e7c3      	b.n	800c140 <rshift+0x28>
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	e7e1      	b.n	800c180 <rshift+0x68>

0800c1bc <__hexdig_fun>:
 800c1bc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c1c0:	2b09      	cmp	r3, #9
 800c1c2:	d802      	bhi.n	800c1ca <__hexdig_fun+0xe>
 800c1c4:	3820      	subs	r0, #32
 800c1c6:	b2c0      	uxtb	r0, r0
 800c1c8:	4770      	bx	lr
 800c1ca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c1ce:	2b05      	cmp	r3, #5
 800c1d0:	d801      	bhi.n	800c1d6 <__hexdig_fun+0x1a>
 800c1d2:	3847      	subs	r0, #71	@ 0x47
 800c1d4:	e7f7      	b.n	800c1c6 <__hexdig_fun+0xa>
 800c1d6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c1da:	2b05      	cmp	r3, #5
 800c1dc:	d801      	bhi.n	800c1e2 <__hexdig_fun+0x26>
 800c1de:	3827      	subs	r0, #39	@ 0x27
 800c1e0:	e7f1      	b.n	800c1c6 <__hexdig_fun+0xa>
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <__gethex>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	468a      	mov	sl, r1
 800c1f0:	9302      	str	r3, [sp, #8]
 800c1f2:	680b      	ldr	r3, [r1, #0]
 800c1f4:	9001      	str	r0, [sp, #4]
 800c1f6:	4690      	mov	r8, r2
 800c1f8:	1c9c      	adds	r4, r3, #2
 800c1fa:	46a1      	mov	r9, r4
 800c1fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c200:	2830      	cmp	r0, #48	@ 0x30
 800c202:	d0fa      	beq.n	800c1fa <__gethex+0x12>
 800c204:	eba9 0303 	sub.w	r3, r9, r3
 800c208:	f1a3 0b02 	sub.w	fp, r3, #2
 800c20c:	f7ff ffd6 	bl	800c1bc <__hexdig_fun>
 800c210:	4605      	mov	r5, r0
 800c212:	2800      	cmp	r0, #0
 800c214:	d168      	bne.n	800c2e8 <__gethex+0x100>
 800c216:	49a0      	ldr	r1, [pc, #640]	@ (800c498 <__gethex+0x2b0>)
 800c218:	2201      	movs	r2, #1
 800c21a:	4648      	mov	r0, r9
 800c21c:	f7ff f8c6 	bl	800b3ac <strncmp>
 800c220:	4607      	mov	r7, r0
 800c222:	2800      	cmp	r0, #0
 800c224:	d167      	bne.n	800c2f6 <__gethex+0x10e>
 800c226:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c22a:	4626      	mov	r6, r4
 800c22c:	f7ff ffc6 	bl	800c1bc <__hexdig_fun>
 800c230:	2800      	cmp	r0, #0
 800c232:	d062      	beq.n	800c2fa <__gethex+0x112>
 800c234:	4623      	mov	r3, r4
 800c236:	7818      	ldrb	r0, [r3, #0]
 800c238:	2830      	cmp	r0, #48	@ 0x30
 800c23a:	4699      	mov	r9, r3
 800c23c:	f103 0301 	add.w	r3, r3, #1
 800c240:	d0f9      	beq.n	800c236 <__gethex+0x4e>
 800c242:	f7ff ffbb 	bl	800c1bc <__hexdig_fun>
 800c246:	fab0 f580 	clz	r5, r0
 800c24a:	096d      	lsrs	r5, r5, #5
 800c24c:	f04f 0b01 	mov.w	fp, #1
 800c250:	464a      	mov	r2, r9
 800c252:	4616      	mov	r6, r2
 800c254:	3201      	adds	r2, #1
 800c256:	7830      	ldrb	r0, [r6, #0]
 800c258:	f7ff ffb0 	bl	800c1bc <__hexdig_fun>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d1f8      	bne.n	800c252 <__gethex+0x6a>
 800c260:	498d      	ldr	r1, [pc, #564]	@ (800c498 <__gethex+0x2b0>)
 800c262:	2201      	movs	r2, #1
 800c264:	4630      	mov	r0, r6
 800c266:	f7ff f8a1 	bl	800b3ac <strncmp>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d13f      	bne.n	800c2ee <__gethex+0x106>
 800c26e:	b944      	cbnz	r4, 800c282 <__gethex+0x9a>
 800c270:	1c74      	adds	r4, r6, #1
 800c272:	4622      	mov	r2, r4
 800c274:	4616      	mov	r6, r2
 800c276:	3201      	adds	r2, #1
 800c278:	7830      	ldrb	r0, [r6, #0]
 800c27a:	f7ff ff9f 	bl	800c1bc <__hexdig_fun>
 800c27e:	2800      	cmp	r0, #0
 800c280:	d1f8      	bne.n	800c274 <__gethex+0x8c>
 800c282:	1ba4      	subs	r4, r4, r6
 800c284:	00a7      	lsls	r7, r4, #2
 800c286:	7833      	ldrb	r3, [r6, #0]
 800c288:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c28c:	2b50      	cmp	r3, #80	@ 0x50
 800c28e:	d13e      	bne.n	800c30e <__gethex+0x126>
 800c290:	7873      	ldrb	r3, [r6, #1]
 800c292:	2b2b      	cmp	r3, #43	@ 0x2b
 800c294:	d033      	beq.n	800c2fe <__gethex+0x116>
 800c296:	2b2d      	cmp	r3, #45	@ 0x2d
 800c298:	d034      	beq.n	800c304 <__gethex+0x11c>
 800c29a:	1c71      	adds	r1, r6, #1
 800c29c:	2400      	movs	r4, #0
 800c29e:	7808      	ldrb	r0, [r1, #0]
 800c2a0:	f7ff ff8c 	bl	800c1bc <__hexdig_fun>
 800c2a4:	1e43      	subs	r3, r0, #1
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b18      	cmp	r3, #24
 800c2aa:	d830      	bhi.n	800c30e <__gethex+0x126>
 800c2ac:	f1a0 0210 	sub.w	r2, r0, #16
 800c2b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c2b4:	f7ff ff82 	bl	800c1bc <__hexdig_fun>
 800c2b8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c2bc:	fa5f fc8c 	uxtb.w	ip, ip
 800c2c0:	f1bc 0f18 	cmp.w	ip, #24
 800c2c4:	f04f 030a 	mov.w	r3, #10
 800c2c8:	d91e      	bls.n	800c308 <__gethex+0x120>
 800c2ca:	b104      	cbz	r4, 800c2ce <__gethex+0xe6>
 800c2cc:	4252      	negs	r2, r2
 800c2ce:	4417      	add	r7, r2
 800c2d0:	f8ca 1000 	str.w	r1, [sl]
 800c2d4:	b1ed      	cbz	r5, 800c312 <__gethex+0x12a>
 800c2d6:	f1bb 0f00 	cmp.w	fp, #0
 800c2da:	bf0c      	ite	eq
 800c2dc:	2506      	moveq	r5, #6
 800c2de:	2500      	movne	r5, #0
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	b005      	add	sp, #20
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	2500      	movs	r5, #0
 800c2ea:	462c      	mov	r4, r5
 800c2ec:	e7b0      	b.n	800c250 <__gethex+0x68>
 800c2ee:	2c00      	cmp	r4, #0
 800c2f0:	d1c7      	bne.n	800c282 <__gethex+0x9a>
 800c2f2:	4627      	mov	r7, r4
 800c2f4:	e7c7      	b.n	800c286 <__gethex+0x9e>
 800c2f6:	464e      	mov	r6, r9
 800c2f8:	462f      	mov	r7, r5
 800c2fa:	2501      	movs	r5, #1
 800c2fc:	e7c3      	b.n	800c286 <__gethex+0x9e>
 800c2fe:	2400      	movs	r4, #0
 800c300:	1cb1      	adds	r1, r6, #2
 800c302:	e7cc      	b.n	800c29e <__gethex+0xb6>
 800c304:	2401      	movs	r4, #1
 800c306:	e7fb      	b.n	800c300 <__gethex+0x118>
 800c308:	fb03 0002 	mla	r0, r3, r2, r0
 800c30c:	e7ce      	b.n	800c2ac <__gethex+0xc4>
 800c30e:	4631      	mov	r1, r6
 800c310:	e7de      	b.n	800c2d0 <__gethex+0xe8>
 800c312:	eba6 0309 	sub.w	r3, r6, r9
 800c316:	3b01      	subs	r3, #1
 800c318:	4629      	mov	r1, r5
 800c31a:	2b07      	cmp	r3, #7
 800c31c:	dc0a      	bgt.n	800c334 <__gethex+0x14c>
 800c31e:	9801      	ldr	r0, [sp, #4]
 800c320:	f000 fe40 	bl	800cfa4 <_Balloc>
 800c324:	4604      	mov	r4, r0
 800c326:	b940      	cbnz	r0, 800c33a <__gethex+0x152>
 800c328:	4b5c      	ldr	r3, [pc, #368]	@ (800c49c <__gethex+0x2b4>)
 800c32a:	4602      	mov	r2, r0
 800c32c:	21e4      	movs	r1, #228	@ 0xe4
 800c32e:	485c      	ldr	r0, [pc, #368]	@ (800c4a0 <__gethex+0x2b8>)
 800c330:	f001 fcf2 	bl	800dd18 <__assert_func>
 800c334:	3101      	adds	r1, #1
 800c336:	105b      	asrs	r3, r3, #1
 800c338:	e7ef      	b.n	800c31a <__gethex+0x132>
 800c33a:	f100 0a14 	add.w	sl, r0, #20
 800c33e:	2300      	movs	r3, #0
 800c340:	4655      	mov	r5, sl
 800c342:	469b      	mov	fp, r3
 800c344:	45b1      	cmp	r9, r6
 800c346:	d337      	bcc.n	800c3b8 <__gethex+0x1d0>
 800c348:	f845 bb04 	str.w	fp, [r5], #4
 800c34c:	eba5 050a 	sub.w	r5, r5, sl
 800c350:	10ad      	asrs	r5, r5, #2
 800c352:	6125      	str	r5, [r4, #16]
 800c354:	4658      	mov	r0, fp
 800c356:	f000 ff17 	bl	800d188 <__hi0bits>
 800c35a:	016d      	lsls	r5, r5, #5
 800c35c:	f8d8 6000 	ldr.w	r6, [r8]
 800c360:	1a2d      	subs	r5, r5, r0
 800c362:	42b5      	cmp	r5, r6
 800c364:	dd54      	ble.n	800c410 <__gethex+0x228>
 800c366:	1bad      	subs	r5, r5, r6
 800c368:	4629      	mov	r1, r5
 800c36a:	4620      	mov	r0, r4
 800c36c:	f001 faab 	bl	800d8c6 <__any_on>
 800c370:	4681      	mov	r9, r0
 800c372:	b178      	cbz	r0, 800c394 <__gethex+0x1ac>
 800c374:	1e6b      	subs	r3, r5, #1
 800c376:	1159      	asrs	r1, r3, #5
 800c378:	f003 021f 	and.w	r2, r3, #31
 800c37c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c380:	f04f 0901 	mov.w	r9, #1
 800c384:	fa09 f202 	lsl.w	r2, r9, r2
 800c388:	420a      	tst	r2, r1
 800c38a:	d003      	beq.n	800c394 <__gethex+0x1ac>
 800c38c:	454b      	cmp	r3, r9
 800c38e:	dc36      	bgt.n	800c3fe <__gethex+0x216>
 800c390:	f04f 0902 	mov.w	r9, #2
 800c394:	4629      	mov	r1, r5
 800c396:	4620      	mov	r0, r4
 800c398:	f7ff febe 	bl	800c118 <rshift>
 800c39c:	442f      	add	r7, r5
 800c39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3a2:	42bb      	cmp	r3, r7
 800c3a4:	da42      	bge.n	800c42c <__gethex+0x244>
 800c3a6:	9801      	ldr	r0, [sp, #4]
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	f000 fe3b 	bl	800d024 <_Bfree>
 800c3ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	25a3      	movs	r5, #163	@ 0xa3
 800c3b6:	e793      	b.n	800c2e0 <__gethex+0xf8>
 800c3b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c3bc:	2a2e      	cmp	r2, #46	@ 0x2e
 800c3be:	d012      	beq.n	800c3e6 <__gethex+0x1fe>
 800c3c0:	2b20      	cmp	r3, #32
 800c3c2:	d104      	bne.n	800c3ce <__gethex+0x1e6>
 800c3c4:	f845 bb04 	str.w	fp, [r5], #4
 800c3c8:	f04f 0b00 	mov.w	fp, #0
 800c3cc:	465b      	mov	r3, fp
 800c3ce:	7830      	ldrb	r0, [r6, #0]
 800c3d0:	9303      	str	r3, [sp, #12]
 800c3d2:	f7ff fef3 	bl	800c1bc <__hexdig_fun>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	f000 000f 	and.w	r0, r0, #15
 800c3dc:	4098      	lsls	r0, r3
 800c3de:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	e7ae      	b.n	800c344 <__gethex+0x15c>
 800c3e6:	45b1      	cmp	r9, r6
 800c3e8:	d8ea      	bhi.n	800c3c0 <__gethex+0x1d8>
 800c3ea:	492b      	ldr	r1, [pc, #172]	@ (800c498 <__gethex+0x2b0>)
 800c3ec:	9303      	str	r3, [sp, #12]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f7fe ffdb 	bl	800b3ac <strncmp>
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d1e1      	bne.n	800c3c0 <__gethex+0x1d8>
 800c3fc:	e7a2      	b.n	800c344 <__gethex+0x15c>
 800c3fe:	1ea9      	subs	r1, r5, #2
 800c400:	4620      	mov	r0, r4
 800c402:	f001 fa60 	bl	800d8c6 <__any_on>
 800c406:	2800      	cmp	r0, #0
 800c408:	d0c2      	beq.n	800c390 <__gethex+0x1a8>
 800c40a:	f04f 0903 	mov.w	r9, #3
 800c40e:	e7c1      	b.n	800c394 <__gethex+0x1ac>
 800c410:	da09      	bge.n	800c426 <__gethex+0x23e>
 800c412:	1b75      	subs	r5, r6, r5
 800c414:	4621      	mov	r1, r4
 800c416:	9801      	ldr	r0, [sp, #4]
 800c418:	462a      	mov	r2, r5
 800c41a:	f001 f81b 	bl	800d454 <__lshift>
 800c41e:	1b7f      	subs	r7, r7, r5
 800c420:	4604      	mov	r4, r0
 800c422:	f100 0a14 	add.w	sl, r0, #20
 800c426:	f04f 0900 	mov.w	r9, #0
 800c42a:	e7b8      	b.n	800c39e <__gethex+0x1b6>
 800c42c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c430:	42bd      	cmp	r5, r7
 800c432:	dd6f      	ble.n	800c514 <__gethex+0x32c>
 800c434:	1bed      	subs	r5, r5, r7
 800c436:	42ae      	cmp	r6, r5
 800c438:	dc34      	bgt.n	800c4a4 <__gethex+0x2bc>
 800c43a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d022      	beq.n	800c488 <__gethex+0x2a0>
 800c442:	2b03      	cmp	r3, #3
 800c444:	d024      	beq.n	800c490 <__gethex+0x2a8>
 800c446:	2b01      	cmp	r3, #1
 800c448:	d115      	bne.n	800c476 <__gethex+0x28e>
 800c44a:	42ae      	cmp	r6, r5
 800c44c:	d113      	bne.n	800c476 <__gethex+0x28e>
 800c44e:	2e01      	cmp	r6, #1
 800c450:	d10b      	bne.n	800c46a <__gethex+0x282>
 800c452:	9a02      	ldr	r2, [sp, #8]
 800c454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	2301      	movs	r3, #1
 800c45c:	6123      	str	r3, [r4, #16]
 800c45e:	f8ca 3000 	str.w	r3, [sl]
 800c462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c464:	2562      	movs	r5, #98	@ 0x62
 800c466:	601c      	str	r4, [r3, #0]
 800c468:	e73a      	b.n	800c2e0 <__gethex+0xf8>
 800c46a:	1e71      	subs	r1, r6, #1
 800c46c:	4620      	mov	r0, r4
 800c46e:	f001 fa2a 	bl	800d8c6 <__any_on>
 800c472:	2800      	cmp	r0, #0
 800c474:	d1ed      	bne.n	800c452 <__gethex+0x26a>
 800c476:	9801      	ldr	r0, [sp, #4]
 800c478:	4621      	mov	r1, r4
 800c47a:	f000 fdd3 	bl	800d024 <_Bfree>
 800c47e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c480:	2300      	movs	r3, #0
 800c482:	6013      	str	r3, [r2, #0]
 800c484:	2550      	movs	r5, #80	@ 0x50
 800c486:	e72b      	b.n	800c2e0 <__gethex+0xf8>
 800c488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1f3      	bne.n	800c476 <__gethex+0x28e>
 800c48e:	e7e0      	b.n	800c452 <__gethex+0x26a>
 800c490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1dd      	bne.n	800c452 <__gethex+0x26a>
 800c496:	e7ee      	b.n	800c476 <__gethex+0x28e>
 800c498:	0800dfd9 	.word	0x0800dfd9
 800c49c:	0800e1b5 	.word	0x0800e1b5
 800c4a0:	0800e1c6 	.word	0x0800e1c6
 800c4a4:	1e6f      	subs	r7, r5, #1
 800c4a6:	f1b9 0f00 	cmp.w	r9, #0
 800c4aa:	d130      	bne.n	800c50e <__gethex+0x326>
 800c4ac:	b127      	cbz	r7, 800c4b8 <__gethex+0x2d0>
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f001 fa08 	bl	800d8c6 <__any_on>
 800c4b6:	4681      	mov	r9, r0
 800c4b8:	117a      	asrs	r2, r7, #5
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c4c0:	f007 071f 	and.w	r7, r7, #31
 800c4c4:	40bb      	lsls	r3, r7
 800c4c6:	4213      	tst	r3, r2
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	bf18      	it	ne
 800c4ce:	f049 0902 	orrne.w	r9, r9, #2
 800c4d2:	f7ff fe21 	bl	800c118 <rshift>
 800c4d6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c4da:	1b76      	subs	r6, r6, r5
 800c4dc:	2502      	movs	r5, #2
 800c4de:	f1b9 0f00 	cmp.w	r9, #0
 800c4e2:	d047      	beq.n	800c574 <__gethex+0x38c>
 800c4e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d015      	beq.n	800c518 <__gethex+0x330>
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d017      	beq.n	800c520 <__gethex+0x338>
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d109      	bne.n	800c508 <__gethex+0x320>
 800c4f4:	f019 0f02 	tst.w	r9, #2
 800c4f8:	d006      	beq.n	800c508 <__gethex+0x320>
 800c4fa:	f8da 3000 	ldr.w	r3, [sl]
 800c4fe:	ea49 0903 	orr.w	r9, r9, r3
 800c502:	f019 0f01 	tst.w	r9, #1
 800c506:	d10e      	bne.n	800c526 <__gethex+0x33e>
 800c508:	f045 0510 	orr.w	r5, r5, #16
 800c50c:	e032      	b.n	800c574 <__gethex+0x38c>
 800c50e:	f04f 0901 	mov.w	r9, #1
 800c512:	e7d1      	b.n	800c4b8 <__gethex+0x2d0>
 800c514:	2501      	movs	r5, #1
 800c516:	e7e2      	b.n	800c4de <__gethex+0x2f6>
 800c518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c51a:	f1c3 0301 	rsb	r3, r3, #1
 800c51e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c522:	2b00      	cmp	r3, #0
 800c524:	d0f0      	beq.n	800c508 <__gethex+0x320>
 800c526:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c52a:	f104 0314 	add.w	r3, r4, #20
 800c52e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c532:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c536:	f04f 0c00 	mov.w	ip, #0
 800c53a:	4618      	mov	r0, r3
 800c53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c540:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c544:	d01b      	beq.n	800c57e <__gethex+0x396>
 800c546:	3201      	adds	r2, #1
 800c548:	6002      	str	r2, [r0, #0]
 800c54a:	2d02      	cmp	r5, #2
 800c54c:	f104 0314 	add.w	r3, r4, #20
 800c550:	d13c      	bne.n	800c5cc <__gethex+0x3e4>
 800c552:	f8d8 2000 	ldr.w	r2, [r8]
 800c556:	3a01      	subs	r2, #1
 800c558:	42b2      	cmp	r2, r6
 800c55a:	d109      	bne.n	800c570 <__gethex+0x388>
 800c55c:	1171      	asrs	r1, r6, #5
 800c55e:	2201      	movs	r2, #1
 800c560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c564:	f006 061f 	and.w	r6, r6, #31
 800c568:	fa02 f606 	lsl.w	r6, r2, r6
 800c56c:	421e      	tst	r6, r3
 800c56e:	d13a      	bne.n	800c5e6 <__gethex+0x3fe>
 800c570:	f045 0520 	orr.w	r5, r5, #32
 800c574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c576:	601c      	str	r4, [r3, #0]
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	601f      	str	r7, [r3, #0]
 800c57c:	e6b0      	b.n	800c2e0 <__gethex+0xf8>
 800c57e:	4299      	cmp	r1, r3
 800c580:	f843 cc04 	str.w	ip, [r3, #-4]
 800c584:	d8d9      	bhi.n	800c53a <__gethex+0x352>
 800c586:	68a3      	ldr	r3, [r4, #8]
 800c588:	459b      	cmp	fp, r3
 800c58a:	db17      	blt.n	800c5bc <__gethex+0x3d4>
 800c58c:	6861      	ldr	r1, [r4, #4]
 800c58e:	9801      	ldr	r0, [sp, #4]
 800c590:	3101      	adds	r1, #1
 800c592:	f000 fd07 	bl	800cfa4 <_Balloc>
 800c596:	4681      	mov	r9, r0
 800c598:	b918      	cbnz	r0, 800c5a2 <__gethex+0x3ba>
 800c59a:	4b1a      	ldr	r3, [pc, #104]	@ (800c604 <__gethex+0x41c>)
 800c59c:	4602      	mov	r2, r0
 800c59e:	2184      	movs	r1, #132	@ 0x84
 800c5a0:	e6c5      	b.n	800c32e <__gethex+0x146>
 800c5a2:	6922      	ldr	r2, [r4, #16]
 800c5a4:	3202      	adds	r2, #2
 800c5a6:	f104 010c 	add.w	r1, r4, #12
 800c5aa:	0092      	lsls	r2, r2, #2
 800c5ac:	300c      	adds	r0, #12
 800c5ae:	f7fe ff48 	bl	800b442 <memcpy>
 800c5b2:	4621      	mov	r1, r4
 800c5b4:	9801      	ldr	r0, [sp, #4]
 800c5b6:	f000 fd35 	bl	800d024 <_Bfree>
 800c5ba:	464c      	mov	r4, r9
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5c4:	6122      	str	r2, [r4, #16]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	615a      	str	r2, [r3, #20]
 800c5ca:	e7be      	b.n	800c54a <__gethex+0x362>
 800c5cc:	6922      	ldr	r2, [r4, #16]
 800c5ce:	455a      	cmp	r2, fp
 800c5d0:	dd0b      	ble.n	800c5ea <__gethex+0x402>
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f7ff fd9f 	bl	800c118 <rshift>
 800c5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5de:	3701      	adds	r7, #1
 800c5e0:	42bb      	cmp	r3, r7
 800c5e2:	f6ff aee0 	blt.w	800c3a6 <__gethex+0x1be>
 800c5e6:	2501      	movs	r5, #1
 800c5e8:	e7c2      	b.n	800c570 <__gethex+0x388>
 800c5ea:	f016 061f 	ands.w	r6, r6, #31
 800c5ee:	d0fa      	beq.n	800c5e6 <__gethex+0x3fe>
 800c5f0:	4453      	add	r3, sl
 800c5f2:	f1c6 0620 	rsb	r6, r6, #32
 800c5f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5fa:	f000 fdc5 	bl	800d188 <__hi0bits>
 800c5fe:	42b0      	cmp	r0, r6
 800c600:	dbe7      	blt.n	800c5d2 <__gethex+0x3ea>
 800c602:	e7f0      	b.n	800c5e6 <__gethex+0x3fe>
 800c604:	0800e1b5 	.word	0x0800e1b5

0800c608 <L_shift>:
 800c608:	f1c2 0208 	rsb	r2, r2, #8
 800c60c:	0092      	lsls	r2, r2, #2
 800c60e:	b570      	push	{r4, r5, r6, lr}
 800c610:	f1c2 0620 	rsb	r6, r2, #32
 800c614:	6843      	ldr	r3, [r0, #4]
 800c616:	6804      	ldr	r4, [r0, #0]
 800c618:	fa03 f506 	lsl.w	r5, r3, r6
 800c61c:	432c      	orrs	r4, r5
 800c61e:	40d3      	lsrs	r3, r2
 800c620:	6004      	str	r4, [r0, #0]
 800c622:	f840 3f04 	str.w	r3, [r0, #4]!
 800c626:	4288      	cmp	r0, r1
 800c628:	d3f4      	bcc.n	800c614 <L_shift+0xc>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}

0800c62c <__match>:
 800c62c:	b530      	push	{r4, r5, lr}
 800c62e:	6803      	ldr	r3, [r0, #0]
 800c630:	3301      	adds	r3, #1
 800c632:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c636:	b914      	cbnz	r4, 800c63e <__match+0x12>
 800c638:	6003      	str	r3, [r0, #0]
 800c63a:	2001      	movs	r0, #1
 800c63c:	bd30      	pop	{r4, r5, pc}
 800c63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c642:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c646:	2d19      	cmp	r5, #25
 800c648:	bf98      	it	ls
 800c64a:	3220      	addls	r2, #32
 800c64c:	42a2      	cmp	r2, r4
 800c64e:	d0f0      	beq.n	800c632 <__match+0x6>
 800c650:	2000      	movs	r0, #0
 800c652:	e7f3      	b.n	800c63c <__match+0x10>

0800c654 <__hexnan>:
 800c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	680b      	ldr	r3, [r1, #0]
 800c65a:	6801      	ldr	r1, [r0, #0]
 800c65c:	115e      	asrs	r6, r3, #5
 800c65e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c662:	f013 031f 	ands.w	r3, r3, #31
 800c666:	b087      	sub	sp, #28
 800c668:	bf18      	it	ne
 800c66a:	3604      	addne	r6, #4
 800c66c:	2500      	movs	r5, #0
 800c66e:	1f37      	subs	r7, r6, #4
 800c670:	4682      	mov	sl, r0
 800c672:	4690      	mov	r8, r2
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	f846 5c04 	str.w	r5, [r6, #-4]
 800c67a:	46b9      	mov	r9, r7
 800c67c:	463c      	mov	r4, r7
 800c67e:	9502      	str	r5, [sp, #8]
 800c680:	46ab      	mov	fp, r5
 800c682:	784a      	ldrb	r2, [r1, #1]
 800c684:	1c4b      	adds	r3, r1, #1
 800c686:	9303      	str	r3, [sp, #12]
 800c688:	b342      	cbz	r2, 800c6dc <__hexnan+0x88>
 800c68a:	4610      	mov	r0, r2
 800c68c:	9105      	str	r1, [sp, #20]
 800c68e:	9204      	str	r2, [sp, #16]
 800c690:	f7ff fd94 	bl	800c1bc <__hexdig_fun>
 800c694:	2800      	cmp	r0, #0
 800c696:	d151      	bne.n	800c73c <__hexnan+0xe8>
 800c698:	9a04      	ldr	r2, [sp, #16]
 800c69a:	9905      	ldr	r1, [sp, #20]
 800c69c:	2a20      	cmp	r2, #32
 800c69e:	d818      	bhi.n	800c6d2 <__hexnan+0x7e>
 800c6a0:	9b02      	ldr	r3, [sp, #8]
 800c6a2:	459b      	cmp	fp, r3
 800c6a4:	dd13      	ble.n	800c6ce <__hexnan+0x7a>
 800c6a6:	454c      	cmp	r4, r9
 800c6a8:	d206      	bcs.n	800c6b8 <__hexnan+0x64>
 800c6aa:	2d07      	cmp	r5, #7
 800c6ac:	dc04      	bgt.n	800c6b8 <__hexnan+0x64>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff ffa8 	bl	800c608 <L_shift>
 800c6b8:	4544      	cmp	r4, r8
 800c6ba:	d952      	bls.n	800c762 <__hexnan+0x10e>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f1a4 0904 	sub.w	r9, r4, #4
 800c6c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6c6:	f8cd b008 	str.w	fp, [sp, #8]
 800c6ca:	464c      	mov	r4, r9
 800c6cc:	461d      	mov	r5, r3
 800c6ce:	9903      	ldr	r1, [sp, #12]
 800c6d0:	e7d7      	b.n	800c682 <__hexnan+0x2e>
 800c6d2:	2a29      	cmp	r2, #41	@ 0x29
 800c6d4:	d157      	bne.n	800c786 <__hexnan+0x132>
 800c6d6:	3102      	adds	r1, #2
 800c6d8:	f8ca 1000 	str.w	r1, [sl]
 800c6dc:	f1bb 0f00 	cmp.w	fp, #0
 800c6e0:	d051      	beq.n	800c786 <__hexnan+0x132>
 800c6e2:	454c      	cmp	r4, r9
 800c6e4:	d206      	bcs.n	800c6f4 <__hexnan+0xa0>
 800c6e6:	2d07      	cmp	r5, #7
 800c6e8:	dc04      	bgt.n	800c6f4 <__hexnan+0xa0>
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f7ff ff8a 	bl	800c608 <L_shift>
 800c6f4:	4544      	cmp	r4, r8
 800c6f6:	d936      	bls.n	800c766 <__hexnan+0x112>
 800c6f8:	f1a8 0204 	sub.w	r2, r8, #4
 800c6fc:	4623      	mov	r3, r4
 800c6fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800c702:	f842 1f04 	str.w	r1, [r2, #4]!
 800c706:	429f      	cmp	r7, r3
 800c708:	d2f9      	bcs.n	800c6fe <__hexnan+0xaa>
 800c70a:	1b3b      	subs	r3, r7, r4
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	3304      	adds	r3, #4
 800c712:	3401      	adds	r4, #1
 800c714:	3e03      	subs	r6, #3
 800c716:	42b4      	cmp	r4, r6
 800c718:	bf88      	it	hi
 800c71a:	2304      	movhi	r3, #4
 800c71c:	4443      	add	r3, r8
 800c71e:	2200      	movs	r2, #0
 800c720:	f843 2b04 	str.w	r2, [r3], #4
 800c724:	429f      	cmp	r7, r3
 800c726:	d2fb      	bcs.n	800c720 <__hexnan+0xcc>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	b91b      	cbnz	r3, 800c734 <__hexnan+0xe0>
 800c72c:	4547      	cmp	r7, r8
 800c72e:	d128      	bne.n	800c782 <__hexnan+0x12e>
 800c730:	2301      	movs	r3, #1
 800c732:	603b      	str	r3, [r7, #0]
 800c734:	2005      	movs	r0, #5
 800c736:	b007      	add	sp, #28
 800c738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73c:	3501      	adds	r5, #1
 800c73e:	2d08      	cmp	r5, #8
 800c740:	f10b 0b01 	add.w	fp, fp, #1
 800c744:	dd06      	ble.n	800c754 <__hexnan+0x100>
 800c746:	4544      	cmp	r4, r8
 800c748:	d9c1      	bls.n	800c6ce <__hexnan+0x7a>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c750:	2501      	movs	r5, #1
 800c752:	3c04      	subs	r4, #4
 800c754:	6822      	ldr	r2, [r4, #0]
 800c756:	f000 000f 	and.w	r0, r0, #15
 800c75a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c75e:	6020      	str	r0, [r4, #0]
 800c760:	e7b5      	b.n	800c6ce <__hexnan+0x7a>
 800c762:	2508      	movs	r5, #8
 800c764:	e7b3      	b.n	800c6ce <__hexnan+0x7a>
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d0dd      	beq.n	800c728 <__hexnan+0xd4>
 800c76c:	f1c3 0320 	rsb	r3, r3, #32
 800c770:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c774:	40da      	lsrs	r2, r3
 800c776:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c77a:	4013      	ands	r3, r2
 800c77c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c780:	e7d2      	b.n	800c728 <__hexnan+0xd4>
 800c782:	3f04      	subs	r7, #4
 800c784:	e7d0      	b.n	800c728 <__hexnan+0xd4>
 800c786:	2004      	movs	r0, #4
 800c788:	e7d5      	b.n	800c736 <__hexnan+0xe2>

0800c78a <__ssputs_r>:
 800c78a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c78e:	688e      	ldr	r6, [r1, #8]
 800c790:	461f      	mov	r7, r3
 800c792:	42be      	cmp	r6, r7
 800c794:	680b      	ldr	r3, [r1, #0]
 800c796:	4682      	mov	sl, r0
 800c798:	460c      	mov	r4, r1
 800c79a:	4690      	mov	r8, r2
 800c79c:	d82d      	bhi.n	800c7fa <__ssputs_r+0x70>
 800c79e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7a2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7a6:	d026      	beq.n	800c7f6 <__ssputs_r+0x6c>
 800c7a8:	6965      	ldr	r5, [r4, #20]
 800c7aa:	6909      	ldr	r1, [r1, #16]
 800c7ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7b0:	eba3 0901 	sub.w	r9, r3, r1
 800c7b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7b8:	1c7b      	adds	r3, r7, #1
 800c7ba:	444b      	add	r3, r9
 800c7bc:	106d      	asrs	r5, r5, #1
 800c7be:	429d      	cmp	r5, r3
 800c7c0:	bf38      	it	cc
 800c7c2:	461d      	movcc	r5, r3
 800c7c4:	0553      	lsls	r3, r2, #21
 800c7c6:	d527      	bpl.n	800c818 <__ssputs_r+0x8e>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f000 faa1 	bl	800cd10 <_malloc_r>
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	b360      	cbz	r0, 800c82c <__ssputs_r+0xa2>
 800c7d2:	6921      	ldr	r1, [r4, #16]
 800c7d4:	464a      	mov	r2, r9
 800c7d6:	f7fe fe34 	bl	800b442 <memcpy>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c7e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e4:	81a3      	strh	r3, [r4, #12]
 800c7e6:	6126      	str	r6, [r4, #16]
 800c7e8:	6165      	str	r5, [r4, #20]
 800c7ea:	444e      	add	r6, r9
 800c7ec:	eba5 0509 	sub.w	r5, r5, r9
 800c7f0:	6026      	str	r6, [r4, #0]
 800c7f2:	60a5      	str	r5, [r4, #8]
 800c7f4:	463e      	mov	r6, r7
 800c7f6:	42be      	cmp	r6, r7
 800c7f8:	d900      	bls.n	800c7fc <__ssputs_r+0x72>
 800c7fa:	463e      	mov	r6, r7
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	4632      	mov	r2, r6
 800c800:	4641      	mov	r1, r8
 800c802:	f001 f9f6 	bl	800dbf2 <memmove>
 800c806:	68a3      	ldr	r3, [r4, #8]
 800c808:	1b9b      	subs	r3, r3, r6
 800c80a:	60a3      	str	r3, [r4, #8]
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	4433      	add	r3, r6
 800c810:	6023      	str	r3, [r4, #0]
 800c812:	2000      	movs	r0, #0
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	462a      	mov	r2, r5
 800c81a:	f001 f8b8 	bl	800d98e <_realloc_r>
 800c81e:	4606      	mov	r6, r0
 800c820:	2800      	cmp	r0, #0
 800c822:	d1e0      	bne.n	800c7e6 <__ssputs_r+0x5c>
 800c824:	6921      	ldr	r1, [r4, #16]
 800c826:	4650      	mov	r0, sl
 800c828:	f001 faa8 	bl	800dd7c <_free_r>
 800c82c:	230c      	movs	r3, #12
 800c82e:	f8ca 3000 	str.w	r3, [sl]
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c838:	81a3      	strh	r3, [r4, #12]
 800c83a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c83e:	e7e9      	b.n	800c814 <__ssputs_r+0x8a>

0800c840 <_svfiprintf_r>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	4698      	mov	r8, r3
 800c846:	898b      	ldrh	r3, [r1, #12]
 800c848:	061b      	lsls	r3, r3, #24
 800c84a:	b09d      	sub	sp, #116	@ 0x74
 800c84c:	4607      	mov	r7, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	4614      	mov	r4, r2
 800c852:	d510      	bpl.n	800c876 <_svfiprintf_r+0x36>
 800c854:	690b      	ldr	r3, [r1, #16]
 800c856:	b973      	cbnz	r3, 800c876 <_svfiprintf_r+0x36>
 800c858:	2140      	movs	r1, #64	@ 0x40
 800c85a:	f000 fa59 	bl	800cd10 <_malloc_r>
 800c85e:	6028      	str	r0, [r5, #0]
 800c860:	6128      	str	r0, [r5, #16]
 800c862:	b930      	cbnz	r0, 800c872 <_svfiprintf_r+0x32>
 800c864:	230c      	movs	r3, #12
 800c866:	603b      	str	r3, [r7, #0]
 800c868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c86c:	b01d      	add	sp, #116	@ 0x74
 800c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c872:	2340      	movs	r3, #64	@ 0x40
 800c874:	616b      	str	r3, [r5, #20]
 800c876:	2300      	movs	r3, #0
 800c878:	9309      	str	r3, [sp, #36]	@ 0x24
 800c87a:	2320      	movs	r3, #32
 800c87c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c880:	f8cd 800c 	str.w	r8, [sp, #12]
 800c884:	2330      	movs	r3, #48	@ 0x30
 800c886:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ca24 <_svfiprintf_r+0x1e4>
 800c88a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c88e:	f04f 0901 	mov.w	r9, #1
 800c892:	4623      	mov	r3, r4
 800c894:	469a      	mov	sl, r3
 800c896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c89a:	b10a      	cbz	r2, 800c8a0 <_svfiprintf_r+0x60>
 800c89c:	2a25      	cmp	r2, #37	@ 0x25
 800c89e:	d1f9      	bne.n	800c894 <_svfiprintf_r+0x54>
 800c8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8a4:	d00b      	beq.n	800c8be <_svfiprintf_r+0x7e>
 800c8a6:	465b      	mov	r3, fp
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f7ff ff6c 	bl	800c78a <__ssputs_r>
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	f000 80a7 	beq.w	800ca06 <_svfiprintf_r+0x1c6>
 800c8b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ba:	445a      	add	r2, fp
 800c8bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8be:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 809f 	beq.w	800ca06 <_svfiprintf_r+0x1c6>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8d2:	f10a 0a01 	add.w	sl, sl, #1
 800c8d6:	9304      	str	r3, [sp, #16]
 800c8d8:	9307      	str	r3, [sp, #28]
 800c8da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8de:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8e0:	4654      	mov	r4, sl
 800c8e2:	2205      	movs	r2, #5
 800c8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e8:	484e      	ldr	r0, [pc, #312]	@ (800ca24 <_svfiprintf_r+0x1e4>)
 800c8ea:	f7f3 fc79 	bl	80001e0 <memchr>
 800c8ee:	9a04      	ldr	r2, [sp, #16]
 800c8f0:	b9d8      	cbnz	r0, 800c92a <_svfiprintf_r+0xea>
 800c8f2:	06d0      	lsls	r0, r2, #27
 800c8f4:	bf44      	itt	mi
 800c8f6:	2320      	movmi	r3, #32
 800c8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8fc:	0711      	lsls	r1, r2, #28
 800c8fe:	bf44      	itt	mi
 800c900:	232b      	movmi	r3, #43	@ 0x2b
 800c902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c906:	f89a 3000 	ldrb.w	r3, [sl]
 800c90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c90c:	d015      	beq.n	800c93a <_svfiprintf_r+0xfa>
 800c90e:	9a07      	ldr	r2, [sp, #28]
 800c910:	4654      	mov	r4, sl
 800c912:	2000      	movs	r0, #0
 800c914:	f04f 0c0a 	mov.w	ip, #10
 800c918:	4621      	mov	r1, r4
 800c91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c91e:	3b30      	subs	r3, #48	@ 0x30
 800c920:	2b09      	cmp	r3, #9
 800c922:	d94b      	bls.n	800c9bc <_svfiprintf_r+0x17c>
 800c924:	b1b0      	cbz	r0, 800c954 <_svfiprintf_r+0x114>
 800c926:	9207      	str	r2, [sp, #28]
 800c928:	e014      	b.n	800c954 <_svfiprintf_r+0x114>
 800c92a:	eba0 0308 	sub.w	r3, r0, r8
 800c92e:	fa09 f303 	lsl.w	r3, r9, r3
 800c932:	4313      	orrs	r3, r2
 800c934:	9304      	str	r3, [sp, #16]
 800c936:	46a2      	mov	sl, r4
 800c938:	e7d2      	b.n	800c8e0 <_svfiprintf_r+0xa0>
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	1d19      	adds	r1, r3, #4
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	9103      	str	r1, [sp, #12]
 800c942:	2b00      	cmp	r3, #0
 800c944:	bfbb      	ittet	lt
 800c946:	425b      	neglt	r3, r3
 800c948:	f042 0202 	orrlt.w	r2, r2, #2
 800c94c:	9307      	strge	r3, [sp, #28]
 800c94e:	9307      	strlt	r3, [sp, #28]
 800c950:	bfb8      	it	lt
 800c952:	9204      	strlt	r2, [sp, #16]
 800c954:	7823      	ldrb	r3, [r4, #0]
 800c956:	2b2e      	cmp	r3, #46	@ 0x2e
 800c958:	d10a      	bne.n	800c970 <_svfiprintf_r+0x130>
 800c95a:	7863      	ldrb	r3, [r4, #1]
 800c95c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c95e:	d132      	bne.n	800c9c6 <_svfiprintf_r+0x186>
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	1d1a      	adds	r2, r3, #4
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	9203      	str	r2, [sp, #12]
 800c968:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c96c:	3402      	adds	r4, #2
 800c96e:	9305      	str	r3, [sp, #20]
 800c970:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca34 <_svfiprintf_r+0x1f4>
 800c974:	7821      	ldrb	r1, [r4, #0]
 800c976:	2203      	movs	r2, #3
 800c978:	4650      	mov	r0, sl
 800c97a:	f7f3 fc31 	bl	80001e0 <memchr>
 800c97e:	b138      	cbz	r0, 800c990 <_svfiprintf_r+0x150>
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	eba0 000a 	sub.w	r0, r0, sl
 800c986:	2240      	movs	r2, #64	@ 0x40
 800c988:	4082      	lsls	r2, r0
 800c98a:	4313      	orrs	r3, r2
 800c98c:	3401      	adds	r4, #1
 800c98e:	9304      	str	r3, [sp, #16]
 800c990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c994:	4824      	ldr	r0, [pc, #144]	@ (800ca28 <_svfiprintf_r+0x1e8>)
 800c996:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c99a:	2206      	movs	r2, #6
 800c99c:	f7f3 fc20 	bl	80001e0 <memchr>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d036      	beq.n	800ca12 <_svfiprintf_r+0x1d2>
 800c9a4:	4b21      	ldr	r3, [pc, #132]	@ (800ca2c <_svfiprintf_r+0x1ec>)
 800c9a6:	bb1b      	cbnz	r3, 800c9f0 <_svfiprintf_r+0x1b0>
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	3307      	adds	r3, #7
 800c9ac:	f023 0307 	bic.w	r3, r3, #7
 800c9b0:	3308      	adds	r3, #8
 800c9b2:	9303      	str	r3, [sp, #12]
 800c9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b6:	4433      	add	r3, r6
 800c9b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ba:	e76a      	b.n	800c892 <_svfiprintf_r+0x52>
 800c9bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	e7a8      	b.n	800c918 <_svfiprintf_r+0xd8>
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	3401      	adds	r4, #1
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f04f 0c0a 	mov.w	ip, #10
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9d8:	3a30      	subs	r2, #48	@ 0x30
 800c9da:	2a09      	cmp	r2, #9
 800c9dc:	d903      	bls.n	800c9e6 <_svfiprintf_r+0x1a6>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0c6      	beq.n	800c970 <_svfiprintf_r+0x130>
 800c9e2:	9105      	str	r1, [sp, #20]
 800c9e4:	e7c4      	b.n	800c970 <_svfiprintf_r+0x130>
 800c9e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e7f0      	b.n	800c9d2 <_svfiprintf_r+0x192>
 800c9f0:	ab03      	add	r3, sp, #12
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca30 <_svfiprintf_r+0x1f0>)
 800c9f8:	a904      	add	r1, sp, #16
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	f7fc ff92 	bl	8009924 <_printf_float>
 800ca00:	1c42      	adds	r2, r0, #1
 800ca02:	4606      	mov	r6, r0
 800ca04:	d1d6      	bne.n	800c9b4 <_svfiprintf_r+0x174>
 800ca06:	89ab      	ldrh	r3, [r5, #12]
 800ca08:	065b      	lsls	r3, r3, #25
 800ca0a:	f53f af2d 	bmi.w	800c868 <_svfiprintf_r+0x28>
 800ca0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca10:	e72c      	b.n	800c86c <_svfiprintf_r+0x2c>
 800ca12:	ab03      	add	r3, sp, #12
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	462a      	mov	r2, r5
 800ca18:	4b05      	ldr	r3, [pc, #20]	@ (800ca30 <_svfiprintf_r+0x1f0>)
 800ca1a:	a904      	add	r1, sp, #16
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f7fd fa19 	bl	8009e54 <_printf_i>
 800ca22:	e7ed      	b.n	800ca00 <_svfiprintf_r+0x1c0>
 800ca24:	0800e226 	.word	0x0800e226
 800ca28:	0800e230 	.word	0x0800e230
 800ca2c:	08009925 	.word	0x08009925
 800ca30:	0800c78b 	.word	0x0800c78b
 800ca34:	0800e22c 	.word	0x0800e22c

0800ca38 <__sfputc_r>:
 800ca38:	6893      	ldr	r3, [r2, #8]
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	b410      	push	{r4}
 800ca40:	6093      	str	r3, [r2, #8]
 800ca42:	da08      	bge.n	800ca56 <__sfputc_r+0x1e>
 800ca44:	6994      	ldr	r4, [r2, #24]
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	db01      	blt.n	800ca4e <__sfputc_r+0x16>
 800ca4a:	290a      	cmp	r1, #10
 800ca4c:	d103      	bne.n	800ca56 <__sfputc_r+0x1e>
 800ca4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca52:	f000 bfca 	b.w	800d9ea <__swbuf_r>
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	1c58      	adds	r0, r3, #1
 800ca5a:	6010      	str	r0, [r2, #0]
 800ca5c:	7019      	strb	r1, [r3, #0]
 800ca5e:	4608      	mov	r0, r1
 800ca60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <__sfputs_r>:
 800ca66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca68:	4606      	mov	r6, r0
 800ca6a:	460f      	mov	r7, r1
 800ca6c:	4614      	mov	r4, r2
 800ca6e:	18d5      	adds	r5, r2, r3
 800ca70:	42ac      	cmp	r4, r5
 800ca72:	d101      	bne.n	800ca78 <__sfputs_r+0x12>
 800ca74:	2000      	movs	r0, #0
 800ca76:	e007      	b.n	800ca88 <__sfputs_r+0x22>
 800ca78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7c:	463a      	mov	r2, r7
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7ff ffda 	bl	800ca38 <__sfputc_r>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d1f3      	bne.n	800ca70 <__sfputs_r+0xa>
 800ca88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca8c <_vfiprintf_r>:
 800ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca90:	460d      	mov	r5, r1
 800ca92:	b09d      	sub	sp, #116	@ 0x74
 800ca94:	4614      	mov	r4, r2
 800ca96:	4698      	mov	r8, r3
 800ca98:	4606      	mov	r6, r0
 800ca9a:	b118      	cbz	r0, 800caa4 <_vfiprintf_r+0x18>
 800ca9c:	6a03      	ldr	r3, [r0, #32]
 800ca9e:	b90b      	cbnz	r3, 800caa4 <_vfiprintf_r+0x18>
 800caa0:	f7fd fdb8 	bl	800a614 <__sinit>
 800caa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800caa6:	07d9      	lsls	r1, r3, #31
 800caa8:	d405      	bmi.n	800cab6 <_vfiprintf_r+0x2a>
 800caaa:	89ab      	ldrh	r3, [r5, #12]
 800caac:	059a      	lsls	r2, r3, #22
 800caae:	d402      	bmi.n	800cab6 <_vfiprintf_r+0x2a>
 800cab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cab2:	f7fe fcc4 	bl	800b43e <__retarget_lock_acquire_recursive>
 800cab6:	89ab      	ldrh	r3, [r5, #12]
 800cab8:	071b      	lsls	r3, r3, #28
 800caba:	d501      	bpl.n	800cac0 <_vfiprintf_r+0x34>
 800cabc:	692b      	ldr	r3, [r5, #16]
 800cabe:	b99b      	cbnz	r3, 800cae8 <_vfiprintf_r+0x5c>
 800cac0:	4629      	mov	r1, r5
 800cac2:	4630      	mov	r0, r6
 800cac4:	f000 ffd0 	bl	800da68 <__swsetup_r>
 800cac8:	b170      	cbz	r0, 800cae8 <_vfiprintf_r+0x5c>
 800caca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cacc:	07dc      	lsls	r4, r3, #31
 800cace:	d504      	bpl.n	800cada <_vfiprintf_r+0x4e>
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cad4:	b01d      	add	sp, #116	@ 0x74
 800cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cada:	89ab      	ldrh	r3, [r5, #12]
 800cadc:	0598      	lsls	r0, r3, #22
 800cade:	d4f7      	bmi.n	800cad0 <_vfiprintf_r+0x44>
 800cae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cae2:	f7fe fcad 	bl	800b440 <__retarget_lock_release_recursive>
 800cae6:	e7f3      	b.n	800cad0 <_vfiprintf_r+0x44>
 800cae8:	2300      	movs	r3, #0
 800caea:	9309      	str	r3, [sp, #36]	@ 0x24
 800caec:	2320      	movs	r3, #32
 800caee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800caf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800caf6:	2330      	movs	r3, #48	@ 0x30
 800caf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cca8 <_vfiprintf_r+0x21c>
 800cafc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb00:	f04f 0901 	mov.w	r9, #1
 800cb04:	4623      	mov	r3, r4
 800cb06:	469a      	mov	sl, r3
 800cb08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb0c:	b10a      	cbz	r2, 800cb12 <_vfiprintf_r+0x86>
 800cb0e:	2a25      	cmp	r2, #37	@ 0x25
 800cb10:	d1f9      	bne.n	800cb06 <_vfiprintf_r+0x7a>
 800cb12:	ebba 0b04 	subs.w	fp, sl, r4
 800cb16:	d00b      	beq.n	800cb30 <_vfiprintf_r+0xa4>
 800cb18:	465b      	mov	r3, fp
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f7ff ffa1 	bl	800ca66 <__sfputs_r>
 800cb24:	3001      	adds	r0, #1
 800cb26:	f000 80a7 	beq.w	800cc78 <_vfiprintf_r+0x1ec>
 800cb2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb2c:	445a      	add	r2, fp
 800cb2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb30:	f89a 3000 	ldrb.w	r3, [sl]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 809f 	beq.w	800cc78 <_vfiprintf_r+0x1ec>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb44:	f10a 0a01 	add.w	sl, sl, #1
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	9307      	str	r3, [sp, #28]
 800cb4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb50:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb52:	4654      	mov	r4, sl
 800cb54:	2205      	movs	r2, #5
 800cb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5a:	4853      	ldr	r0, [pc, #332]	@ (800cca8 <_vfiprintf_r+0x21c>)
 800cb5c:	f7f3 fb40 	bl	80001e0 <memchr>
 800cb60:	9a04      	ldr	r2, [sp, #16]
 800cb62:	b9d8      	cbnz	r0, 800cb9c <_vfiprintf_r+0x110>
 800cb64:	06d1      	lsls	r1, r2, #27
 800cb66:	bf44      	itt	mi
 800cb68:	2320      	movmi	r3, #32
 800cb6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb6e:	0713      	lsls	r3, r2, #28
 800cb70:	bf44      	itt	mi
 800cb72:	232b      	movmi	r3, #43	@ 0x2b
 800cb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb78:	f89a 3000 	ldrb.w	r3, [sl]
 800cb7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb7e:	d015      	beq.n	800cbac <_vfiprintf_r+0x120>
 800cb80:	9a07      	ldr	r2, [sp, #28]
 800cb82:	4654      	mov	r4, sl
 800cb84:	2000      	movs	r0, #0
 800cb86:	f04f 0c0a 	mov.w	ip, #10
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb90:	3b30      	subs	r3, #48	@ 0x30
 800cb92:	2b09      	cmp	r3, #9
 800cb94:	d94b      	bls.n	800cc2e <_vfiprintf_r+0x1a2>
 800cb96:	b1b0      	cbz	r0, 800cbc6 <_vfiprintf_r+0x13a>
 800cb98:	9207      	str	r2, [sp, #28]
 800cb9a:	e014      	b.n	800cbc6 <_vfiprintf_r+0x13a>
 800cb9c:	eba0 0308 	sub.w	r3, r0, r8
 800cba0:	fa09 f303 	lsl.w	r3, r9, r3
 800cba4:	4313      	orrs	r3, r2
 800cba6:	9304      	str	r3, [sp, #16]
 800cba8:	46a2      	mov	sl, r4
 800cbaa:	e7d2      	b.n	800cb52 <_vfiprintf_r+0xc6>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	1d19      	adds	r1, r3, #4
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	9103      	str	r1, [sp, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bfbb      	ittet	lt
 800cbb8:	425b      	neglt	r3, r3
 800cbba:	f042 0202 	orrlt.w	r2, r2, #2
 800cbbe:	9307      	strge	r3, [sp, #28]
 800cbc0:	9307      	strlt	r3, [sp, #28]
 800cbc2:	bfb8      	it	lt
 800cbc4:	9204      	strlt	r2, [sp, #16]
 800cbc6:	7823      	ldrb	r3, [r4, #0]
 800cbc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbca:	d10a      	bne.n	800cbe2 <_vfiprintf_r+0x156>
 800cbcc:	7863      	ldrb	r3, [r4, #1]
 800cbce:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbd0:	d132      	bne.n	800cc38 <_vfiprintf_r+0x1ac>
 800cbd2:	9b03      	ldr	r3, [sp, #12]
 800cbd4:	1d1a      	adds	r2, r3, #4
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	9203      	str	r2, [sp, #12]
 800cbda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbde:	3402      	adds	r4, #2
 800cbe0:	9305      	str	r3, [sp, #20]
 800cbe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ccb8 <_vfiprintf_r+0x22c>
 800cbe6:	7821      	ldrb	r1, [r4, #0]
 800cbe8:	2203      	movs	r2, #3
 800cbea:	4650      	mov	r0, sl
 800cbec:	f7f3 faf8 	bl	80001e0 <memchr>
 800cbf0:	b138      	cbz	r0, 800cc02 <_vfiprintf_r+0x176>
 800cbf2:	9b04      	ldr	r3, [sp, #16]
 800cbf4:	eba0 000a 	sub.w	r0, r0, sl
 800cbf8:	2240      	movs	r2, #64	@ 0x40
 800cbfa:	4082      	lsls	r2, r0
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	3401      	adds	r4, #1
 800cc00:	9304      	str	r3, [sp, #16]
 800cc02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc06:	4829      	ldr	r0, [pc, #164]	@ (800ccac <_vfiprintf_r+0x220>)
 800cc08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc0c:	2206      	movs	r2, #6
 800cc0e:	f7f3 fae7 	bl	80001e0 <memchr>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d03f      	beq.n	800cc96 <_vfiprintf_r+0x20a>
 800cc16:	4b26      	ldr	r3, [pc, #152]	@ (800ccb0 <_vfiprintf_r+0x224>)
 800cc18:	bb1b      	cbnz	r3, 800cc62 <_vfiprintf_r+0x1d6>
 800cc1a:	9b03      	ldr	r3, [sp, #12]
 800cc1c:	3307      	adds	r3, #7
 800cc1e:	f023 0307 	bic.w	r3, r3, #7
 800cc22:	3308      	adds	r3, #8
 800cc24:	9303      	str	r3, [sp, #12]
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	443b      	add	r3, r7
 800cc2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc2c:	e76a      	b.n	800cb04 <_vfiprintf_r+0x78>
 800cc2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc32:	460c      	mov	r4, r1
 800cc34:	2001      	movs	r0, #1
 800cc36:	e7a8      	b.n	800cb8a <_vfiprintf_r+0xfe>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	3401      	adds	r4, #1
 800cc3c:	9305      	str	r3, [sp, #20]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f04f 0c0a 	mov.w	ip, #10
 800cc44:	4620      	mov	r0, r4
 800cc46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc4a:	3a30      	subs	r2, #48	@ 0x30
 800cc4c:	2a09      	cmp	r2, #9
 800cc4e:	d903      	bls.n	800cc58 <_vfiprintf_r+0x1cc>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d0c6      	beq.n	800cbe2 <_vfiprintf_r+0x156>
 800cc54:	9105      	str	r1, [sp, #20]
 800cc56:	e7c4      	b.n	800cbe2 <_vfiprintf_r+0x156>
 800cc58:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e7f0      	b.n	800cc44 <_vfiprintf_r+0x1b8>
 800cc62:	ab03      	add	r3, sp, #12
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	462a      	mov	r2, r5
 800cc68:	4b12      	ldr	r3, [pc, #72]	@ (800ccb4 <_vfiprintf_r+0x228>)
 800cc6a:	a904      	add	r1, sp, #16
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f7fc fe59 	bl	8009924 <_printf_float>
 800cc72:	4607      	mov	r7, r0
 800cc74:	1c78      	adds	r0, r7, #1
 800cc76:	d1d6      	bne.n	800cc26 <_vfiprintf_r+0x19a>
 800cc78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc7a:	07d9      	lsls	r1, r3, #31
 800cc7c:	d405      	bmi.n	800cc8a <_vfiprintf_r+0x1fe>
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	059a      	lsls	r2, r3, #22
 800cc82:	d402      	bmi.n	800cc8a <_vfiprintf_r+0x1fe>
 800cc84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc86:	f7fe fbdb 	bl	800b440 <__retarget_lock_release_recursive>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	065b      	lsls	r3, r3, #25
 800cc8e:	f53f af1f 	bmi.w	800cad0 <_vfiprintf_r+0x44>
 800cc92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc94:	e71e      	b.n	800cad4 <_vfiprintf_r+0x48>
 800cc96:	ab03      	add	r3, sp, #12
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4b05      	ldr	r3, [pc, #20]	@ (800ccb4 <_vfiprintf_r+0x228>)
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7fd f8d7 	bl	8009e54 <_printf_i>
 800cca6:	e7e4      	b.n	800cc72 <_vfiprintf_r+0x1e6>
 800cca8:	0800e226 	.word	0x0800e226
 800ccac:	0800e230 	.word	0x0800e230
 800ccb0:	08009925 	.word	0x08009925
 800ccb4:	0800ca67 	.word	0x0800ca67
 800ccb8:	0800e22c 	.word	0x0800e22c

0800ccbc <malloc>:
 800ccbc:	4b02      	ldr	r3, [pc, #8]	@ (800ccc8 <malloc+0xc>)
 800ccbe:	4601      	mov	r1, r0
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	f000 b825 	b.w	800cd10 <_malloc_r>
 800ccc6:	bf00      	nop
 800ccc8:	20000184 	.word	0x20000184

0800cccc <sbrk_aligned>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	4e0f      	ldr	r6, [pc, #60]	@ (800cd0c <sbrk_aligned+0x40>)
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	6831      	ldr	r1, [r6, #0]
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	b911      	cbnz	r1, 800ccde <sbrk_aligned+0x12>
 800ccd8:	f000 fffc 	bl	800dcd4 <_sbrk_r>
 800ccdc:	6030      	str	r0, [r6, #0]
 800ccde:	4621      	mov	r1, r4
 800cce0:	4628      	mov	r0, r5
 800cce2:	f000 fff7 	bl	800dcd4 <_sbrk_r>
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	d103      	bne.n	800ccf2 <sbrk_aligned+0x26>
 800ccea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ccee:	4620      	mov	r0, r4
 800ccf0:	bd70      	pop	{r4, r5, r6, pc}
 800ccf2:	1cc4      	adds	r4, r0, #3
 800ccf4:	f024 0403 	bic.w	r4, r4, #3
 800ccf8:	42a0      	cmp	r0, r4
 800ccfa:	d0f8      	beq.n	800ccee <sbrk_aligned+0x22>
 800ccfc:	1a21      	subs	r1, r4, r0
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f000 ffe8 	bl	800dcd4 <_sbrk_r>
 800cd04:	3001      	adds	r0, #1
 800cd06:	d1f2      	bne.n	800ccee <sbrk_aligned+0x22>
 800cd08:	e7ef      	b.n	800ccea <sbrk_aligned+0x1e>
 800cd0a:	bf00      	nop
 800cd0c:	2000077c 	.word	0x2000077c

0800cd10 <_malloc_r>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	1ccd      	adds	r5, r1, #3
 800cd16:	f025 0503 	bic.w	r5, r5, #3
 800cd1a:	3508      	adds	r5, #8
 800cd1c:	2d0c      	cmp	r5, #12
 800cd1e:	bf38      	it	cc
 800cd20:	250c      	movcc	r5, #12
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	db01      	blt.n	800cd2c <_malloc_r+0x1c>
 800cd28:	42a9      	cmp	r1, r5
 800cd2a:	d904      	bls.n	800cd36 <_malloc_r+0x26>
 800cd2c:	230c      	movs	r3, #12
 800cd2e:	6033      	str	r3, [r6, #0]
 800cd30:	2000      	movs	r0, #0
 800cd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce0c <_malloc_r+0xfc>
 800cd3a:	f000 f927 	bl	800cf8c <__malloc_lock>
 800cd3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd42:	461c      	mov	r4, r3
 800cd44:	bb44      	cbnz	r4, 800cd98 <_malloc_r+0x88>
 800cd46:	4629      	mov	r1, r5
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7ff ffbf 	bl	800cccc <sbrk_aligned>
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	4604      	mov	r4, r0
 800cd52:	d158      	bne.n	800ce06 <_malloc_r+0xf6>
 800cd54:	f8d8 4000 	ldr.w	r4, [r8]
 800cd58:	4627      	mov	r7, r4
 800cd5a:	2f00      	cmp	r7, #0
 800cd5c:	d143      	bne.n	800cde6 <_malloc_r+0xd6>
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	d04b      	beq.n	800cdfa <_malloc_r+0xea>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	4639      	mov	r1, r7
 800cd66:	4630      	mov	r0, r6
 800cd68:	eb04 0903 	add.w	r9, r4, r3
 800cd6c:	f000 ffb2 	bl	800dcd4 <_sbrk_r>
 800cd70:	4581      	cmp	r9, r0
 800cd72:	d142      	bne.n	800cdfa <_malloc_r+0xea>
 800cd74:	6821      	ldr	r1, [r4, #0]
 800cd76:	1a6d      	subs	r5, r5, r1
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ffa6 	bl	800cccc <sbrk_aligned>
 800cd80:	3001      	adds	r0, #1
 800cd82:	d03a      	beq.n	800cdfa <_malloc_r+0xea>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	442b      	add	r3, r5
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	bb62      	cbnz	r2, 800cdec <_malloc_r+0xdc>
 800cd92:	f8c8 7000 	str.w	r7, [r8]
 800cd96:	e00f      	b.n	800cdb8 <_malloc_r+0xa8>
 800cd98:	6822      	ldr	r2, [r4, #0]
 800cd9a:	1b52      	subs	r2, r2, r5
 800cd9c:	d420      	bmi.n	800cde0 <_malloc_r+0xd0>
 800cd9e:	2a0b      	cmp	r2, #11
 800cda0:	d917      	bls.n	800cdd2 <_malloc_r+0xc2>
 800cda2:	1961      	adds	r1, r4, r5
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	6025      	str	r5, [r4, #0]
 800cda8:	bf18      	it	ne
 800cdaa:	6059      	strne	r1, [r3, #4]
 800cdac:	6863      	ldr	r3, [r4, #4]
 800cdae:	bf08      	it	eq
 800cdb0:	f8c8 1000 	streq.w	r1, [r8]
 800cdb4:	5162      	str	r2, [r4, r5]
 800cdb6:	604b      	str	r3, [r1, #4]
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 f8ed 	bl	800cf98 <__malloc_unlock>
 800cdbe:	f104 000b 	add.w	r0, r4, #11
 800cdc2:	1d23      	adds	r3, r4, #4
 800cdc4:	f020 0007 	bic.w	r0, r0, #7
 800cdc8:	1ac2      	subs	r2, r0, r3
 800cdca:	bf1c      	itt	ne
 800cdcc:	1a1b      	subne	r3, r3, r0
 800cdce:	50a3      	strne	r3, [r4, r2]
 800cdd0:	e7af      	b.n	800cd32 <_malloc_r+0x22>
 800cdd2:	6862      	ldr	r2, [r4, #4]
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	bf0c      	ite	eq
 800cdd8:	f8c8 2000 	streq.w	r2, [r8]
 800cddc:	605a      	strne	r2, [r3, #4]
 800cdde:	e7eb      	b.n	800cdb8 <_malloc_r+0xa8>
 800cde0:	4623      	mov	r3, r4
 800cde2:	6864      	ldr	r4, [r4, #4]
 800cde4:	e7ae      	b.n	800cd44 <_malloc_r+0x34>
 800cde6:	463c      	mov	r4, r7
 800cde8:	687f      	ldr	r7, [r7, #4]
 800cdea:	e7b6      	b.n	800cd5a <_malloc_r+0x4a>
 800cdec:	461a      	mov	r2, r3
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d1fb      	bne.n	800cdec <_malloc_r+0xdc>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6053      	str	r3, [r2, #4]
 800cdf8:	e7de      	b.n	800cdb8 <_malloc_r+0xa8>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	6033      	str	r3, [r6, #0]
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f000 f8ca 	bl	800cf98 <__malloc_unlock>
 800ce04:	e794      	b.n	800cd30 <_malloc_r+0x20>
 800ce06:	6005      	str	r5, [r0, #0]
 800ce08:	e7d6      	b.n	800cdb8 <_malloc_r+0xa8>
 800ce0a:	bf00      	nop
 800ce0c:	20000780 	.word	0x20000780

0800ce10 <__ascii_mbtowc>:
 800ce10:	b082      	sub	sp, #8
 800ce12:	b901      	cbnz	r1, 800ce16 <__ascii_mbtowc+0x6>
 800ce14:	a901      	add	r1, sp, #4
 800ce16:	b142      	cbz	r2, 800ce2a <__ascii_mbtowc+0x1a>
 800ce18:	b14b      	cbz	r3, 800ce2e <__ascii_mbtowc+0x1e>
 800ce1a:	7813      	ldrb	r3, [r2, #0]
 800ce1c:	600b      	str	r3, [r1, #0]
 800ce1e:	7812      	ldrb	r2, [r2, #0]
 800ce20:	1e10      	subs	r0, r2, #0
 800ce22:	bf18      	it	ne
 800ce24:	2001      	movne	r0, #1
 800ce26:	b002      	add	sp, #8
 800ce28:	4770      	bx	lr
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	e7fb      	b.n	800ce26 <__ascii_mbtowc+0x16>
 800ce2e:	f06f 0001 	mvn.w	r0, #1
 800ce32:	e7f8      	b.n	800ce26 <__ascii_mbtowc+0x16>

0800ce34 <__sflush_r>:
 800ce34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	0716      	lsls	r6, r2, #28
 800ce3e:	4605      	mov	r5, r0
 800ce40:	460c      	mov	r4, r1
 800ce42:	d454      	bmi.n	800ceee <__sflush_r+0xba>
 800ce44:	684b      	ldr	r3, [r1, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	dc02      	bgt.n	800ce50 <__sflush_r+0x1c>
 800ce4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	dd48      	ble.n	800cee2 <__sflush_r+0xae>
 800ce50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce52:	2e00      	cmp	r6, #0
 800ce54:	d045      	beq.n	800cee2 <__sflush_r+0xae>
 800ce56:	2300      	movs	r3, #0
 800ce58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce5c:	682f      	ldr	r7, [r5, #0]
 800ce5e:	6a21      	ldr	r1, [r4, #32]
 800ce60:	602b      	str	r3, [r5, #0]
 800ce62:	d030      	beq.n	800cec6 <__sflush_r+0x92>
 800ce64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	0759      	lsls	r1, r3, #29
 800ce6a:	d505      	bpl.n	800ce78 <__sflush_r+0x44>
 800ce6c:	6863      	ldr	r3, [r4, #4]
 800ce6e:	1ad2      	subs	r2, r2, r3
 800ce70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce72:	b10b      	cbz	r3, 800ce78 <__sflush_r+0x44>
 800ce74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce76:	1ad2      	subs	r2, r2, r3
 800ce78:	2300      	movs	r3, #0
 800ce7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce7c:	6a21      	ldr	r1, [r4, #32]
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b0      	blx	r6
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	d106      	bne.n	800ce96 <__sflush_r+0x62>
 800ce88:	6829      	ldr	r1, [r5, #0]
 800ce8a:	291d      	cmp	r1, #29
 800ce8c:	d82b      	bhi.n	800cee6 <__sflush_r+0xb2>
 800ce8e:	4a2a      	ldr	r2, [pc, #168]	@ (800cf38 <__sflush_r+0x104>)
 800ce90:	410a      	asrs	r2, r1
 800ce92:	07d6      	lsls	r6, r2, #31
 800ce94:	d427      	bmi.n	800cee6 <__sflush_r+0xb2>
 800ce96:	2200      	movs	r2, #0
 800ce98:	6062      	str	r2, [r4, #4]
 800ce9a:	04d9      	lsls	r1, r3, #19
 800ce9c:	6922      	ldr	r2, [r4, #16]
 800ce9e:	6022      	str	r2, [r4, #0]
 800cea0:	d504      	bpl.n	800ceac <__sflush_r+0x78>
 800cea2:	1c42      	adds	r2, r0, #1
 800cea4:	d101      	bne.n	800ceaa <__sflush_r+0x76>
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	b903      	cbnz	r3, 800ceac <__sflush_r+0x78>
 800ceaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800ceac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceae:	602f      	str	r7, [r5, #0]
 800ceb0:	b1b9      	cbz	r1, 800cee2 <__sflush_r+0xae>
 800ceb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ceb6:	4299      	cmp	r1, r3
 800ceb8:	d002      	beq.n	800cec0 <__sflush_r+0x8c>
 800ceba:	4628      	mov	r0, r5
 800cebc:	f000 ff5e 	bl	800dd7c <_free_r>
 800cec0:	2300      	movs	r3, #0
 800cec2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cec4:	e00d      	b.n	800cee2 <__sflush_r+0xae>
 800cec6:	2301      	movs	r3, #1
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b0      	blx	r6
 800cecc:	4602      	mov	r2, r0
 800cece:	1c50      	adds	r0, r2, #1
 800ced0:	d1c9      	bne.n	800ce66 <__sflush_r+0x32>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d0c6      	beq.n	800ce66 <__sflush_r+0x32>
 800ced8:	2b1d      	cmp	r3, #29
 800ceda:	d001      	beq.n	800cee0 <__sflush_r+0xac>
 800cedc:	2b16      	cmp	r3, #22
 800cede:	d11e      	bne.n	800cf1e <__sflush_r+0xea>
 800cee0:	602f      	str	r7, [r5, #0]
 800cee2:	2000      	movs	r0, #0
 800cee4:	e022      	b.n	800cf2c <__sflush_r+0xf8>
 800cee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceea:	b21b      	sxth	r3, r3
 800ceec:	e01b      	b.n	800cf26 <__sflush_r+0xf2>
 800ceee:	690f      	ldr	r7, [r1, #16]
 800cef0:	2f00      	cmp	r7, #0
 800cef2:	d0f6      	beq.n	800cee2 <__sflush_r+0xae>
 800cef4:	0793      	lsls	r3, r2, #30
 800cef6:	680e      	ldr	r6, [r1, #0]
 800cef8:	bf08      	it	eq
 800cefa:	694b      	ldreq	r3, [r1, #20]
 800cefc:	600f      	str	r7, [r1, #0]
 800cefe:	bf18      	it	ne
 800cf00:	2300      	movne	r3, #0
 800cf02:	eba6 0807 	sub.w	r8, r6, r7
 800cf06:	608b      	str	r3, [r1, #8]
 800cf08:	f1b8 0f00 	cmp.w	r8, #0
 800cf0c:	dde9      	ble.n	800cee2 <__sflush_r+0xae>
 800cf0e:	6a21      	ldr	r1, [r4, #32]
 800cf10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf12:	4643      	mov	r3, r8
 800cf14:	463a      	mov	r2, r7
 800cf16:	4628      	mov	r0, r5
 800cf18:	47b0      	blx	r6
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	dc08      	bgt.n	800cf30 <__sflush_r+0xfc>
 800cf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf30:	4407      	add	r7, r0
 800cf32:	eba8 0800 	sub.w	r8, r8, r0
 800cf36:	e7e7      	b.n	800cf08 <__sflush_r+0xd4>
 800cf38:	dfbffffe 	.word	0xdfbffffe

0800cf3c <_fflush_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	690b      	ldr	r3, [r1, #16]
 800cf40:	4605      	mov	r5, r0
 800cf42:	460c      	mov	r4, r1
 800cf44:	b913      	cbnz	r3, 800cf4c <_fflush_r+0x10>
 800cf46:	2500      	movs	r5, #0
 800cf48:	4628      	mov	r0, r5
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	b118      	cbz	r0, 800cf56 <_fflush_r+0x1a>
 800cf4e:	6a03      	ldr	r3, [r0, #32]
 800cf50:	b90b      	cbnz	r3, 800cf56 <_fflush_r+0x1a>
 800cf52:	f7fd fb5f 	bl	800a614 <__sinit>
 800cf56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0f3      	beq.n	800cf46 <_fflush_r+0xa>
 800cf5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf60:	07d0      	lsls	r0, r2, #31
 800cf62:	d404      	bmi.n	800cf6e <_fflush_r+0x32>
 800cf64:	0599      	lsls	r1, r3, #22
 800cf66:	d402      	bmi.n	800cf6e <_fflush_r+0x32>
 800cf68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf6a:	f7fe fa68 	bl	800b43e <__retarget_lock_acquire_recursive>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	4621      	mov	r1, r4
 800cf72:	f7ff ff5f 	bl	800ce34 <__sflush_r>
 800cf76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf78:	07da      	lsls	r2, r3, #31
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	d4e4      	bmi.n	800cf48 <_fflush_r+0xc>
 800cf7e:	89a3      	ldrh	r3, [r4, #12]
 800cf80:	059b      	lsls	r3, r3, #22
 800cf82:	d4e1      	bmi.n	800cf48 <_fflush_r+0xc>
 800cf84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf86:	f7fe fa5b 	bl	800b440 <__retarget_lock_release_recursive>
 800cf8a:	e7dd      	b.n	800cf48 <_fflush_r+0xc>

0800cf8c <__malloc_lock>:
 800cf8c:	4801      	ldr	r0, [pc, #4]	@ (800cf94 <__malloc_lock+0x8>)
 800cf8e:	f7fe ba56 	b.w	800b43e <__retarget_lock_acquire_recursive>
 800cf92:	bf00      	nop
 800cf94:	20000778 	.word	0x20000778

0800cf98 <__malloc_unlock>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__malloc_unlock+0x8>)
 800cf9a:	f7fe ba51 	b.w	800b440 <__retarget_lock_release_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	20000778 	.word	0x20000778

0800cfa4 <_Balloc>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	69c6      	ldr	r6, [r0, #28]
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	460d      	mov	r5, r1
 800cfac:	b976      	cbnz	r6, 800cfcc <_Balloc+0x28>
 800cfae:	2010      	movs	r0, #16
 800cfb0:	f7ff fe84 	bl	800ccbc <malloc>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	61e0      	str	r0, [r4, #28]
 800cfb8:	b920      	cbnz	r0, 800cfc4 <_Balloc+0x20>
 800cfba:	4b18      	ldr	r3, [pc, #96]	@ (800d01c <_Balloc+0x78>)
 800cfbc:	4818      	ldr	r0, [pc, #96]	@ (800d020 <_Balloc+0x7c>)
 800cfbe:	216b      	movs	r1, #107	@ 0x6b
 800cfc0:	f000 feaa 	bl	800dd18 <__assert_func>
 800cfc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfc8:	6006      	str	r6, [r0, #0]
 800cfca:	60c6      	str	r6, [r0, #12]
 800cfcc:	69e6      	ldr	r6, [r4, #28]
 800cfce:	68f3      	ldr	r3, [r6, #12]
 800cfd0:	b183      	cbz	r3, 800cff4 <_Balloc+0x50>
 800cfd2:	69e3      	ldr	r3, [r4, #28]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfda:	b9b8      	cbnz	r0, 800d00c <_Balloc+0x68>
 800cfdc:	2101      	movs	r1, #1
 800cfde:	fa01 f605 	lsl.w	r6, r1, r5
 800cfe2:	1d72      	adds	r2, r6, #5
 800cfe4:	0092      	lsls	r2, r2, #2
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f000 feb4 	bl	800dd54 <_calloc_r>
 800cfec:	b160      	cbz	r0, 800d008 <_Balloc+0x64>
 800cfee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cff2:	e00e      	b.n	800d012 <_Balloc+0x6e>
 800cff4:	2221      	movs	r2, #33	@ 0x21
 800cff6:	2104      	movs	r1, #4
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 feab 	bl	800dd54 <_calloc_r>
 800cffe:	69e3      	ldr	r3, [r4, #28]
 800d000:	60f0      	str	r0, [r6, #12]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1e4      	bne.n	800cfd2 <_Balloc+0x2e>
 800d008:	2000      	movs	r0, #0
 800d00a:	bd70      	pop	{r4, r5, r6, pc}
 800d00c:	6802      	ldr	r2, [r0, #0]
 800d00e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d012:	2300      	movs	r3, #0
 800d014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d018:	e7f7      	b.n	800d00a <_Balloc+0x66>
 800d01a:	bf00      	nop
 800d01c:	0800e146 	.word	0x0800e146
 800d020:	0800e237 	.word	0x0800e237

0800d024 <_Bfree>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	69c6      	ldr	r6, [r0, #28]
 800d028:	4605      	mov	r5, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	b976      	cbnz	r6, 800d04c <_Bfree+0x28>
 800d02e:	2010      	movs	r0, #16
 800d030:	f7ff fe44 	bl	800ccbc <malloc>
 800d034:	4602      	mov	r2, r0
 800d036:	61e8      	str	r0, [r5, #28]
 800d038:	b920      	cbnz	r0, 800d044 <_Bfree+0x20>
 800d03a:	4b09      	ldr	r3, [pc, #36]	@ (800d060 <_Bfree+0x3c>)
 800d03c:	4809      	ldr	r0, [pc, #36]	@ (800d064 <_Bfree+0x40>)
 800d03e:	218f      	movs	r1, #143	@ 0x8f
 800d040:	f000 fe6a 	bl	800dd18 <__assert_func>
 800d044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d048:	6006      	str	r6, [r0, #0]
 800d04a:	60c6      	str	r6, [r0, #12]
 800d04c:	b13c      	cbz	r4, 800d05e <_Bfree+0x3a>
 800d04e:	69eb      	ldr	r3, [r5, #28]
 800d050:	6862      	ldr	r2, [r4, #4]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d058:	6021      	str	r1, [r4, #0]
 800d05a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	0800e146 	.word	0x0800e146
 800d064:	0800e237 	.word	0x0800e237

0800d068 <__multadd>:
 800d068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06c:	690d      	ldr	r5, [r1, #16]
 800d06e:	4607      	mov	r7, r0
 800d070:	460c      	mov	r4, r1
 800d072:	461e      	mov	r6, r3
 800d074:	f101 0c14 	add.w	ip, r1, #20
 800d078:	2000      	movs	r0, #0
 800d07a:	f8dc 3000 	ldr.w	r3, [ip]
 800d07e:	b299      	uxth	r1, r3
 800d080:	fb02 6101 	mla	r1, r2, r1, r6
 800d084:	0c1e      	lsrs	r6, r3, #16
 800d086:	0c0b      	lsrs	r3, r1, #16
 800d088:	fb02 3306 	mla	r3, r2, r6, r3
 800d08c:	b289      	uxth	r1, r1
 800d08e:	3001      	adds	r0, #1
 800d090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d094:	4285      	cmp	r5, r0
 800d096:	f84c 1b04 	str.w	r1, [ip], #4
 800d09a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d09e:	dcec      	bgt.n	800d07a <__multadd+0x12>
 800d0a0:	b30e      	cbz	r6, 800d0e6 <__multadd+0x7e>
 800d0a2:	68a3      	ldr	r3, [r4, #8]
 800d0a4:	42ab      	cmp	r3, r5
 800d0a6:	dc19      	bgt.n	800d0dc <__multadd+0x74>
 800d0a8:	6861      	ldr	r1, [r4, #4]
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	3101      	adds	r1, #1
 800d0ae:	f7ff ff79 	bl	800cfa4 <_Balloc>
 800d0b2:	4680      	mov	r8, r0
 800d0b4:	b928      	cbnz	r0, 800d0c2 <__multadd+0x5a>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ec <__multadd+0x84>)
 800d0ba:	480d      	ldr	r0, [pc, #52]	@ (800d0f0 <__multadd+0x88>)
 800d0bc:	21ba      	movs	r1, #186	@ 0xba
 800d0be:	f000 fe2b 	bl	800dd18 <__assert_func>
 800d0c2:	6922      	ldr	r2, [r4, #16]
 800d0c4:	3202      	adds	r2, #2
 800d0c6:	f104 010c 	add.w	r1, r4, #12
 800d0ca:	0092      	lsls	r2, r2, #2
 800d0cc:	300c      	adds	r0, #12
 800d0ce:	f7fe f9b8 	bl	800b442 <memcpy>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4638      	mov	r0, r7
 800d0d6:	f7ff ffa5 	bl	800d024 <_Bfree>
 800d0da:	4644      	mov	r4, r8
 800d0dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0e0:	3501      	adds	r5, #1
 800d0e2:	615e      	str	r6, [r3, #20]
 800d0e4:	6125      	str	r5, [r4, #16]
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ec:	0800e1b5 	.word	0x0800e1b5
 800d0f0:	0800e237 	.word	0x0800e237

0800d0f4 <__s2b>:
 800d0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	4615      	mov	r5, r2
 800d0fc:	461f      	mov	r7, r3
 800d0fe:	2209      	movs	r2, #9
 800d100:	3308      	adds	r3, #8
 800d102:	4606      	mov	r6, r0
 800d104:	fb93 f3f2 	sdiv	r3, r3, r2
 800d108:	2100      	movs	r1, #0
 800d10a:	2201      	movs	r2, #1
 800d10c:	429a      	cmp	r2, r3
 800d10e:	db09      	blt.n	800d124 <__s2b+0x30>
 800d110:	4630      	mov	r0, r6
 800d112:	f7ff ff47 	bl	800cfa4 <_Balloc>
 800d116:	b940      	cbnz	r0, 800d12a <__s2b+0x36>
 800d118:	4602      	mov	r2, r0
 800d11a:	4b19      	ldr	r3, [pc, #100]	@ (800d180 <__s2b+0x8c>)
 800d11c:	4819      	ldr	r0, [pc, #100]	@ (800d184 <__s2b+0x90>)
 800d11e:	21d3      	movs	r1, #211	@ 0xd3
 800d120:	f000 fdfa 	bl	800dd18 <__assert_func>
 800d124:	0052      	lsls	r2, r2, #1
 800d126:	3101      	adds	r1, #1
 800d128:	e7f0      	b.n	800d10c <__s2b+0x18>
 800d12a:	9b08      	ldr	r3, [sp, #32]
 800d12c:	6143      	str	r3, [r0, #20]
 800d12e:	2d09      	cmp	r5, #9
 800d130:	f04f 0301 	mov.w	r3, #1
 800d134:	6103      	str	r3, [r0, #16]
 800d136:	dd16      	ble.n	800d166 <__s2b+0x72>
 800d138:	f104 0909 	add.w	r9, r4, #9
 800d13c:	46c8      	mov	r8, r9
 800d13e:	442c      	add	r4, r5
 800d140:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d144:	4601      	mov	r1, r0
 800d146:	3b30      	subs	r3, #48	@ 0x30
 800d148:	220a      	movs	r2, #10
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7ff ff8c 	bl	800d068 <__multadd>
 800d150:	45a0      	cmp	r8, r4
 800d152:	d1f5      	bne.n	800d140 <__s2b+0x4c>
 800d154:	f1a5 0408 	sub.w	r4, r5, #8
 800d158:	444c      	add	r4, r9
 800d15a:	1b2d      	subs	r5, r5, r4
 800d15c:	1963      	adds	r3, r4, r5
 800d15e:	42bb      	cmp	r3, r7
 800d160:	db04      	blt.n	800d16c <__s2b+0x78>
 800d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d166:	340a      	adds	r4, #10
 800d168:	2509      	movs	r5, #9
 800d16a:	e7f6      	b.n	800d15a <__s2b+0x66>
 800d16c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d170:	4601      	mov	r1, r0
 800d172:	3b30      	subs	r3, #48	@ 0x30
 800d174:	220a      	movs	r2, #10
 800d176:	4630      	mov	r0, r6
 800d178:	f7ff ff76 	bl	800d068 <__multadd>
 800d17c:	e7ee      	b.n	800d15c <__s2b+0x68>
 800d17e:	bf00      	nop
 800d180:	0800e1b5 	.word	0x0800e1b5
 800d184:	0800e237 	.word	0x0800e237

0800d188 <__hi0bits>:
 800d188:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d18c:	4603      	mov	r3, r0
 800d18e:	bf36      	itet	cc
 800d190:	0403      	lslcc	r3, r0, #16
 800d192:	2000      	movcs	r0, #0
 800d194:	2010      	movcc	r0, #16
 800d196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d19a:	bf3c      	itt	cc
 800d19c:	021b      	lslcc	r3, r3, #8
 800d19e:	3008      	addcc	r0, #8
 800d1a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1a4:	bf3c      	itt	cc
 800d1a6:	011b      	lslcc	r3, r3, #4
 800d1a8:	3004      	addcc	r0, #4
 800d1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1ae:	bf3c      	itt	cc
 800d1b0:	009b      	lslcc	r3, r3, #2
 800d1b2:	3002      	addcc	r0, #2
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	db05      	blt.n	800d1c4 <__hi0bits+0x3c>
 800d1b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d1bc:	f100 0001 	add.w	r0, r0, #1
 800d1c0:	bf08      	it	eq
 800d1c2:	2020      	moveq	r0, #32
 800d1c4:	4770      	bx	lr

0800d1c6 <__lo0bits>:
 800d1c6:	6803      	ldr	r3, [r0, #0]
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	f013 0007 	ands.w	r0, r3, #7
 800d1ce:	d00b      	beq.n	800d1e8 <__lo0bits+0x22>
 800d1d0:	07d9      	lsls	r1, r3, #31
 800d1d2:	d421      	bmi.n	800d218 <__lo0bits+0x52>
 800d1d4:	0798      	lsls	r0, r3, #30
 800d1d6:	bf49      	itett	mi
 800d1d8:	085b      	lsrmi	r3, r3, #1
 800d1da:	089b      	lsrpl	r3, r3, #2
 800d1dc:	2001      	movmi	r0, #1
 800d1de:	6013      	strmi	r3, [r2, #0]
 800d1e0:	bf5c      	itt	pl
 800d1e2:	6013      	strpl	r3, [r2, #0]
 800d1e4:	2002      	movpl	r0, #2
 800d1e6:	4770      	bx	lr
 800d1e8:	b299      	uxth	r1, r3
 800d1ea:	b909      	cbnz	r1, 800d1f0 <__lo0bits+0x2a>
 800d1ec:	0c1b      	lsrs	r3, r3, #16
 800d1ee:	2010      	movs	r0, #16
 800d1f0:	b2d9      	uxtb	r1, r3
 800d1f2:	b909      	cbnz	r1, 800d1f8 <__lo0bits+0x32>
 800d1f4:	3008      	adds	r0, #8
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	0719      	lsls	r1, r3, #28
 800d1fa:	bf04      	itt	eq
 800d1fc:	091b      	lsreq	r3, r3, #4
 800d1fe:	3004      	addeq	r0, #4
 800d200:	0799      	lsls	r1, r3, #30
 800d202:	bf04      	itt	eq
 800d204:	089b      	lsreq	r3, r3, #2
 800d206:	3002      	addeq	r0, #2
 800d208:	07d9      	lsls	r1, r3, #31
 800d20a:	d403      	bmi.n	800d214 <__lo0bits+0x4e>
 800d20c:	085b      	lsrs	r3, r3, #1
 800d20e:	f100 0001 	add.w	r0, r0, #1
 800d212:	d003      	beq.n	800d21c <__lo0bits+0x56>
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	4770      	bx	lr
 800d218:	2000      	movs	r0, #0
 800d21a:	4770      	bx	lr
 800d21c:	2020      	movs	r0, #32
 800d21e:	4770      	bx	lr

0800d220 <__i2b>:
 800d220:	b510      	push	{r4, lr}
 800d222:	460c      	mov	r4, r1
 800d224:	2101      	movs	r1, #1
 800d226:	f7ff febd 	bl	800cfa4 <_Balloc>
 800d22a:	4602      	mov	r2, r0
 800d22c:	b928      	cbnz	r0, 800d23a <__i2b+0x1a>
 800d22e:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <__i2b+0x24>)
 800d230:	4805      	ldr	r0, [pc, #20]	@ (800d248 <__i2b+0x28>)
 800d232:	f240 1145 	movw	r1, #325	@ 0x145
 800d236:	f000 fd6f 	bl	800dd18 <__assert_func>
 800d23a:	2301      	movs	r3, #1
 800d23c:	6144      	str	r4, [r0, #20]
 800d23e:	6103      	str	r3, [r0, #16]
 800d240:	bd10      	pop	{r4, pc}
 800d242:	bf00      	nop
 800d244:	0800e1b5 	.word	0x0800e1b5
 800d248:	0800e237 	.word	0x0800e237

0800d24c <__multiply>:
 800d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	4614      	mov	r4, r2
 800d252:	690a      	ldr	r2, [r1, #16]
 800d254:	6923      	ldr	r3, [r4, #16]
 800d256:	429a      	cmp	r2, r3
 800d258:	bfa8      	it	ge
 800d25a:	4623      	movge	r3, r4
 800d25c:	460f      	mov	r7, r1
 800d25e:	bfa4      	itt	ge
 800d260:	460c      	movge	r4, r1
 800d262:	461f      	movge	r7, r3
 800d264:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d268:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d26c:	68a3      	ldr	r3, [r4, #8]
 800d26e:	6861      	ldr	r1, [r4, #4]
 800d270:	eb0a 0609 	add.w	r6, sl, r9
 800d274:	42b3      	cmp	r3, r6
 800d276:	b085      	sub	sp, #20
 800d278:	bfb8      	it	lt
 800d27a:	3101      	addlt	r1, #1
 800d27c:	f7ff fe92 	bl	800cfa4 <_Balloc>
 800d280:	b930      	cbnz	r0, 800d290 <__multiply+0x44>
 800d282:	4602      	mov	r2, r0
 800d284:	4b44      	ldr	r3, [pc, #272]	@ (800d398 <__multiply+0x14c>)
 800d286:	4845      	ldr	r0, [pc, #276]	@ (800d39c <__multiply+0x150>)
 800d288:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d28c:	f000 fd44 	bl	800dd18 <__assert_func>
 800d290:	f100 0514 	add.w	r5, r0, #20
 800d294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d298:	462b      	mov	r3, r5
 800d29a:	2200      	movs	r2, #0
 800d29c:	4543      	cmp	r3, r8
 800d29e:	d321      	bcc.n	800d2e4 <__multiply+0x98>
 800d2a0:	f107 0114 	add.w	r1, r7, #20
 800d2a4:	f104 0214 	add.w	r2, r4, #20
 800d2a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d2ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d2b0:	9302      	str	r3, [sp, #8]
 800d2b2:	1b13      	subs	r3, r2, r4
 800d2b4:	3b15      	subs	r3, #21
 800d2b6:	f023 0303 	bic.w	r3, r3, #3
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	f104 0715 	add.w	r7, r4, #21
 800d2c0:	42ba      	cmp	r2, r7
 800d2c2:	bf38      	it	cc
 800d2c4:	2304      	movcc	r3, #4
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	9b02      	ldr	r3, [sp, #8]
 800d2ca:	9103      	str	r1, [sp, #12]
 800d2cc:	428b      	cmp	r3, r1
 800d2ce:	d80c      	bhi.n	800d2ea <__multiply+0x9e>
 800d2d0:	2e00      	cmp	r6, #0
 800d2d2:	dd03      	ble.n	800d2dc <__multiply+0x90>
 800d2d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d05b      	beq.n	800d394 <__multiply+0x148>
 800d2dc:	6106      	str	r6, [r0, #16]
 800d2de:	b005      	add	sp, #20
 800d2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e4:	f843 2b04 	str.w	r2, [r3], #4
 800d2e8:	e7d8      	b.n	800d29c <__multiply+0x50>
 800d2ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2ee:	f1ba 0f00 	cmp.w	sl, #0
 800d2f2:	d024      	beq.n	800d33e <__multiply+0xf2>
 800d2f4:	f104 0e14 	add.w	lr, r4, #20
 800d2f8:	46a9      	mov	r9, r5
 800d2fa:	f04f 0c00 	mov.w	ip, #0
 800d2fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d302:	f8d9 3000 	ldr.w	r3, [r9]
 800d306:	fa1f fb87 	uxth.w	fp, r7
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d310:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d314:	f8d9 7000 	ldr.w	r7, [r9]
 800d318:	4463      	add	r3, ip
 800d31a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d31e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d322:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d326:	b29b      	uxth	r3, r3
 800d328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d32c:	4572      	cmp	r2, lr
 800d32e:	f849 3b04 	str.w	r3, [r9], #4
 800d332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d336:	d8e2      	bhi.n	800d2fe <__multiply+0xb2>
 800d338:	9b01      	ldr	r3, [sp, #4]
 800d33a:	f845 c003 	str.w	ip, [r5, r3]
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d344:	3104      	adds	r1, #4
 800d346:	f1b9 0f00 	cmp.w	r9, #0
 800d34a:	d021      	beq.n	800d390 <__multiply+0x144>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	f104 0c14 	add.w	ip, r4, #20
 800d352:	46ae      	mov	lr, r5
 800d354:	f04f 0a00 	mov.w	sl, #0
 800d358:	f8bc b000 	ldrh.w	fp, [ip]
 800d35c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d360:	fb09 770b 	mla	r7, r9, fp, r7
 800d364:	4457      	add	r7, sl
 800d366:	b29b      	uxth	r3, r3
 800d368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d36c:	f84e 3b04 	str.w	r3, [lr], #4
 800d370:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d378:	f8be 3000 	ldrh.w	r3, [lr]
 800d37c:	fb09 330a 	mla	r3, r9, sl, r3
 800d380:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d384:	4562      	cmp	r2, ip
 800d386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d38a:	d8e5      	bhi.n	800d358 <__multiply+0x10c>
 800d38c:	9f01      	ldr	r7, [sp, #4]
 800d38e:	51eb      	str	r3, [r5, r7]
 800d390:	3504      	adds	r5, #4
 800d392:	e799      	b.n	800d2c8 <__multiply+0x7c>
 800d394:	3e01      	subs	r6, #1
 800d396:	e79b      	b.n	800d2d0 <__multiply+0x84>
 800d398:	0800e1b5 	.word	0x0800e1b5
 800d39c:	0800e237 	.word	0x0800e237

0800d3a0 <__pow5mult>:
 800d3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a4:	4615      	mov	r5, r2
 800d3a6:	f012 0203 	ands.w	r2, r2, #3
 800d3aa:	4607      	mov	r7, r0
 800d3ac:	460e      	mov	r6, r1
 800d3ae:	d007      	beq.n	800d3c0 <__pow5mult+0x20>
 800d3b0:	4c25      	ldr	r4, [pc, #148]	@ (800d448 <__pow5mult+0xa8>)
 800d3b2:	3a01      	subs	r2, #1
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ba:	f7ff fe55 	bl	800d068 <__multadd>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	10ad      	asrs	r5, r5, #2
 800d3c2:	d03d      	beq.n	800d440 <__pow5mult+0xa0>
 800d3c4:	69fc      	ldr	r4, [r7, #28]
 800d3c6:	b97c      	cbnz	r4, 800d3e8 <__pow5mult+0x48>
 800d3c8:	2010      	movs	r0, #16
 800d3ca:	f7ff fc77 	bl	800ccbc <malloc>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	61f8      	str	r0, [r7, #28]
 800d3d2:	b928      	cbnz	r0, 800d3e0 <__pow5mult+0x40>
 800d3d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d44c <__pow5mult+0xac>)
 800d3d6:	481e      	ldr	r0, [pc, #120]	@ (800d450 <__pow5mult+0xb0>)
 800d3d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3dc:	f000 fc9c 	bl	800dd18 <__assert_func>
 800d3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3e4:	6004      	str	r4, [r0, #0]
 800d3e6:	60c4      	str	r4, [r0, #12]
 800d3e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3f0:	b94c      	cbnz	r4, 800d406 <__pow5mult+0x66>
 800d3f2:	f240 2171 	movw	r1, #625	@ 0x271
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	f7ff ff12 	bl	800d220 <__i2b>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800d402:	4604      	mov	r4, r0
 800d404:	6003      	str	r3, [r0, #0]
 800d406:	f04f 0900 	mov.w	r9, #0
 800d40a:	07eb      	lsls	r3, r5, #31
 800d40c:	d50a      	bpl.n	800d424 <__pow5mult+0x84>
 800d40e:	4631      	mov	r1, r6
 800d410:	4622      	mov	r2, r4
 800d412:	4638      	mov	r0, r7
 800d414:	f7ff ff1a 	bl	800d24c <__multiply>
 800d418:	4631      	mov	r1, r6
 800d41a:	4680      	mov	r8, r0
 800d41c:	4638      	mov	r0, r7
 800d41e:	f7ff fe01 	bl	800d024 <_Bfree>
 800d422:	4646      	mov	r6, r8
 800d424:	106d      	asrs	r5, r5, #1
 800d426:	d00b      	beq.n	800d440 <__pow5mult+0xa0>
 800d428:	6820      	ldr	r0, [r4, #0]
 800d42a:	b938      	cbnz	r0, 800d43c <__pow5mult+0x9c>
 800d42c:	4622      	mov	r2, r4
 800d42e:	4621      	mov	r1, r4
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ff0b 	bl	800d24c <__multiply>
 800d436:	6020      	str	r0, [r4, #0]
 800d438:	f8c0 9000 	str.w	r9, [r0]
 800d43c:	4604      	mov	r4, r0
 800d43e:	e7e4      	b.n	800d40a <__pow5mult+0x6a>
 800d440:	4630      	mov	r0, r6
 800d442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d446:	bf00      	nop
 800d448:	0800e290 	.word	0x0800e290
 800d44c:	0800e146 	.word	0x0800e146
 800d450:	0800e237 	.word	0x0800e237

0800d454 <__lshift>:
 800d454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d458:	460c      	mov	r4, r1
 800d45a:	6849      	ldr	r1, [r1, #4]
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d462:	68a3      	ldr	r3, [r4, #8]
 800d464:	4607      	mov	r7, r0
 800d466:	4691      	mov	r9, r2
 800d468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d46c:	f108 0601 	add.w	r6, r8, #1
 800d470:	42b3      	cmp	r3, r6
 800d472:	db0b      	blt.n	800d48c <__lshift+0x38>
 800d474:	4638      	mov	r0, r7
 800d476:	f7ff fd95 	bl	800cfa4 <_Balloc>
 800d47a:	4605      	mov	r5, r0
 800d47c:	b948      	cbnz	r0, 800d492 <__lshift+0x3e>
 800d47e:	4602      	mov	r2, r0
 800d480:	4b28      	ldr	r3, [pc, #160]	@ (800d524 <__lshift+0xd0>)
 800d482:	4829      	ldr	r0, [pc, #164]	@ (800d528 <__lshift+0xd4>)
 800d484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d488:	f000 fc46 	bl	800dd18 <__assert_func>
 800d48c:	3101      	adds	r1, #1
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	e7ee      	b.n	800d470 <__lshift+0x1c>
 800d492:	2300      	movs	r3, #0
 800d494:	f100 0114 	add.w	r1, r0, #20
 800d498:	f100 0210 	add.w	r2, r0, #16
 800d49c:	4618      	mov	r0, r3
 800d49e:	4553      	cmp	r3, sl
 800d4a0:	db33      	blt.n	800d50a <__lshift+0xb6>
 800d4a2:	6920      	ldr	r0, [r4, #16]
 800d4a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4a8:	f104 0314 	add.w	r3, r4, #20
 800d4ac:	f019 091f 	ands.w	r9, r9, #31
 800d4b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4b8:	d02b      	beq.n	800d512 <__lshift+0xbe>
 800d4ba:	f1c9 0e20 	rsb	lr, r9, #32
 800d4be:	468a      	mov	sl, r1
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4c8:	4310      	orrs	r0, r2
 800d4ca:	f84a 0b04 	str.w	r0, [sl], #4
 800d4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4d2:	459c      	cmp	ip, r3
 800d4d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4d8:	d8f3      	bhi.n	800d4c2 <__lshift+0x6e>
 800d4da:	ebac 0304 	sub.w	r3, ip, r4
 800d4de:	3b15      	subs	r3, #21
 800d4e0:	f023 0303 	bic.w	r3, r3, #3
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	f104 0015 	add.w	r0, r4, #21
 800d4ea:	4584      	cmp	ip, r0
 800d4ec:	bf38      	it	cc
 800d4ee:	2304      	movcc	r3, #4
 800d4f0:	50ca      	str	r2, [r1, r3]
 800d4f2:	b10a      	cbz	r2, 800d4f8 <__lshift+0xa4>
 800d4f4:	f108 0602 	add.w	r6, r8, #2
 800d4f8:	3e01      	subs	r6, #1
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	612e      	str	r6, [r5, #16]
 800d4fe:	4621      	mov	r1, r4
 800d500:	f7ff fd90 	bl	800d024 <_Bfree>
 800d504:	4628      	mov	r0, r5
 800d506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d50e:	3301      	adds	r3, #1
 800d510:	e7c5      	b.n	800d49e <__lshift+0x4a>
 800d512:	3904      	subs	r1, #4
 800d514:	f853 2b04 	ldr.w	r2, [r3], #4
 800d518:	f841 2f04 	str.w	r2, [r1, #4]!
 800d51c:	459c      	cmp	ip, r3
 800d51e:	d8f9      	bhi.n	800d514 <__lshift+0xc0>
 800d520:	e7ea      	b.n	800d4f8 <__lshift+0xa4>
 800d522:	bf00      	nop
 800d524:	0800e1b5 	.word	0x0800e1b5
 800d528:	0800e237 	.word	0x0800e237

0800d52c <__mcmp>:
 800d52c:	690a      	ldr	r2, [r1, #16]
 800d52e:	4603      	mov	r3, r0
 800d530:	6900      	ldr	r0, [r0, #16]
 800d532:	1a80      	subs	r0, r0, r2
 800d534:	b530      	push	{r4, r5, lr}
 800d536:	d10e      	bne.n	800d556 <__mcmp+0x2a>
 800d538:	3314      	adds	r3, #20
 800d53a:	3114      	adds	r1, #20
 800d53c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d54c:	4295      	cmp	r5, r2
 800d54e:	d003      	beq.n	800d558 <__mcmp+0x2c>
 800d550:	d205      	bcs.n	800d55e <__mcmp+0x32>
 800d552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d556:	bd30      	pop	{r4, r5, pc}
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d3f3      	bcc.n	800d544 <__mcmp+0x18>
 800d55c:	e7fb      	b.n	800d556 <__mcmp+0x2a>
 800d55e:	2001      	movs	r0, #1
 800d560:	e7f9      	b.n	800d556 <__mcmp+0x2a>
	...

0800d564 <__mdiff>:
 800d564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	4689      	mov	r9, r1
 800d56a:	4606      	mov	r6, r0
 800d56c:	4611      	mov	r1, r2
 800d56e:	4648      	mov	r0, r9
 800d570:	4614      	mov	r4, r2
 800d572:	f7ff ffdb 	bl	800d52c <__mcmp>
 800d576:	1e05      	subs	r5, r0, #0
 800d578:	d112      	bne.n	800d5a0 <__mdiff+0x3c>
 800d57a:	4629      	mov	r1, r5
 800d57c:	4630      	mov	r0, r6
 800d57e:	f7ff fd11 	bl	800cfa4 <_Balloc>
 800d582:	4602      	mov	r2, r0
 800d584:	b928      	cbnz	r0, 800d592 <__mdiff+0x2e>
 800d586:	4b3f      	ldr	r3, [pc, #252]	@ (800d684 <__mdiff+0x120>)
 800d588:	f240 2137 	movw	r1, #567	@ 0x237
 800d58c:	483e      	ldr	r0, [pc, #248]	@ (800d688 <__mdiff+0x124>)
 800d58e:	f000 fbc3 	bl	800dd18 <__assert_func>
 800d592:	2301      	movs	r3, #1
 800d594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d598:	4610      	mov	r0, r2
 800d59a:	b003      	add	sp, #12
 800d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a0:	bfbc      	itt	lt
 800d5a2:	464b      	movlt	r3, r9
 800d5a4:	46a1      	movlt	r9, r4
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d5ac:	bfba      	itte	lt
 800d5ae:	461c      	movlt	r4, r3
 800d5b0:	2501      	movlt	r5, #1
 800d5b2:	2500      	movge	r5, #0
 800d5b4:	f7ff fcf6 	bl	800cfa4 <_Balloc>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	b918      	cbnz	r0, 800d5c4 <__mdiff+0x60>
 800d5bc:	4b31      	ldr	r3, [pc, #196]	@ (800d684 <__mdiff+0x120>)
 800d5be:	f240 2145 	movw	r1, #581	@ 0x245
 800d5c2:	e7e3      	b.n	800d58c <__mdiff+0x28>
 800d5c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d5c8:	6926      	ldr	r6, [r4, #16]
 800d5ca:	60c5      	str	r5, [r0, #12]
 800d5cc:	f109 0310 	add.w	r3, r9, #16
 800d5d0:	f109 0514 	add.w	r5, r9, #20
 800d5d4:	f104 0e14 	add.w	lr, r4, #20
 800d5d8:	f100 0b14 	add.w	fp, r0, #20
 800d5dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	46d9      	mov	r9, fp
 800d5e8:	f04f 0c00 	mov.w	ip, #0
 800d5ec:	9b01      	ldr	r3, [sp, #4]
 800d5ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	fa1f f38a 	uxth.w	r3, sl
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	b283      	uxth	r3, r0
 800d600:	1acb      	subs	r3, r1, r3
 800d602:	0c00      	lsrs	r0, r0, #16
 800d604:	4463      	add	r3, ip
 800d606:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d60a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d60e:	b29b      	uxth	r3, r3
 800d610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d614:	4576      	cmp	r6, lr
 800d616:	f849 3b04 	str.w	r3, [r9], #4
 800d61a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d61e:	d8e5      	bhi.n	800d5ec <__mdiff+0x88>
 800d620:	1b33      	subs	r3, r6, r4
 800d622:	3b15      	subs	r3, #21
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	3415      	adds	r4, #21
 800d62a:	3304      	adds	r3, #4
 800d62c:	42a6      	cmp	r6, r4
 800d62e:	bf38      	it	cc
 800d630:	2304      	movcc	r3, #4
 800d632:	441d      	add	r5, r3
 800d634:	445b      	add	r3, fp
 800d636:	461e      	mov	r6, r3
 800d638:	462c      	mov	r4, r5
 800d63a:	4544      	cmp	r4, r8
 800d63c:	d30e      	bcc.n	800d65c <__mdiff+0xf8>
 800d63e:	f108 0103 	add.w	r1, r8, #3
 800d642:	1b49      	subs	r1, r1, r5
 800d644:	f021 0103 	bic.w	r1, r1, #3
 800d648:	3d03      	subs	r5, #3
 800d64a:	45a8      	cmp	r8, r5
 800d64c:	bf38      	it	cc
 800d64e:	2100      	movcc	r1, #0
 800d650:	440b      	add	r3, r1
 800d652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d656:	b191      	cbz	r1, 800d67e <__mdiff+0x11a>
 800d658:	6117      	str	r7, [r2, #16]
 800d65a:	e79d      	b.n	800d598 <__mdiff+0x34>
 800d65c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d660:	46e6      	mov	lr, ip
 800d662:	0c08      	lsrs	r0, r1, #16
 800d664:	fa1c fc81 	uxtah	ip, ip, r1
 800d668:	4471      	add	r1, lr
 800d66a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d66e:	b289      	uxth	r1, r1
 800d670:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d674:	f846 1b04 	str.w	r1, [r6], #4
 800d678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d67c:	e7dd      	b.n	800d63a <__mdiff+0xd6>
 800d67e:	3f01      	subs	r7, #1
 800d680:	e7e7      	b.n	800d652 <__mdiff+0xee>
 800d682:	bf00      	nop
 800d684:	0800e1b5 	.word	0x0800e1b5
 800d688:	0800e237 	.word	0x0800e237

0800d68c <__ulp>:
 800d68c:	b082      	sub	sp, #8
 800d68e:	ed8d 0b00 	vstr	d0, [sp]
 800d692:	9a01      	ldr	r2, [sp, #4]
 800d694:	4b0f      	ldr	r3, [pc, #60]	@ (800d6d4 <__ulp+0x48>)
 800d696:	4013      	ands	r3, r2
 800d698:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	dc08      	bgt.n	800d6b2 <__ulp+0x26>
 800d6a0:	425b      	negs	r3, r3
 800d6a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d6a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6aa:	da04      	bge.n	800d6b6 <__ulp+0x2a>
 800d6ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d6b0:	4113      	asrs	r3, r2
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	e008      	b.n	800d6c8 <__ulp+0x3c>
 800d6b6:	f1a2 0314 	sub.w	r3, r2, #20
 800d6ba:	2b1e      	cmp	r3, #30
 800d6bc:	bfda      	itte	le
 800d6be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d6c2:	40da      	lsrle	r2, r3
 800d6c4:	2201      	movgt	r2, #1
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	ec41 0b10 	vmov	d0, r0, r1
 800d6d0:	b002      	add	sp, #8
 800d6d2:	4770      	bx	lr
 800d6d4:	7ff00000 	.word	0x7ff00000

0800d6d8 <__b2d>:
 800d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6dc:	6906      	ldr	r6, [r0, #16]
 800d6de:	f100 0814 	add.w	r8, r0, #20
 800d6e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d6e6:	1f37      	subs	r7, r6, #4
 800d6e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	f7ff fd4b 	bl	800d188 <__hi0bits>
 800d6f2:	f1c0 0320 	rsb	r3, r0, #32
 800d6f6:	280a      	cmp	r0, #10
 800d6f8:	600b      	str	r3, [r1, #0]
 800d6fa:	491b      	ldr	r1, [pc, #108]	@ (800d768 <__b2d+0x90>)
 800d6fc:	dc15      	bgt.n	800d72a <__b2d+0x52>
 800d6fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800d702:	fa22 f30c 	lsr.w	r3, r2, ip
 800d706:	45b8      	cmp	r8, r7
 800d708:	ea43 0501 	orr.w	r5, r3, r1
 800d70c:	bf34      	ite	cc
 800d70e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d712:	2300      	movcs	r3, #0
 800d714:	3015      	adds	r0, #21
 800d716:	fa02 f000 	lsl.w	r0, r2, r0
 800d71a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d71e:	4303      	orrs	r3, r0
 800d720:	461c      	mov	r4, r3
 800d722:	ec45 4b10 	vmov	d0, r4, r5
 800d726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d72a:	45b8      	cmp	r8, r7
 800d72c:	bf3a      	itte	cc
 800d72e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d732:	f1a6 0708 	subcc.w	r7, r6, #8
 800d736:	2300      	movcs	r3, #0
 800d738:	380b      	subs	r0, #11
 800d73a:	d012      	beq.n	800d762 <__b2d+0x8a>
 800d73c:	f1c0 0120 	rsb	r1, r0, #32
 800d740:	fa23 f401 	lsr.w	r4, r3, r1
 800d744:	4082      	lsls	r2, r0
 800d746:	4322      	orrs	r2, r4
 800d748:	4547      	cmp	r7, r8
 800d74a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d74e:	bf8c      	ite	hi
 800d750:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d754:	2200      	movls	r2, #0
 800d756:	4083      	lsls	r3, r0
 800d758:	40ca      	lsrs	r2, r1
 800d75a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d75e:	4313      	orrs	r3, r2
 800d760:	e7de      	b.n	800d720 <__b2d+0x48>
 800d762:	ea42 0501 	orr.w	r5, r2, r1
 800d766:	e7db      	b.n	800d720 <__b2d+0x48>
 800d768:	3ff00000 	.word	0x3ff00000

0800d76c <__d2b>:
 800d76c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d770:	460f      	mov	r7, r1
 800d772:	2101      	movs	r1, #1
 800d774:	ec59 8b10 	vmov	r8, r9, d0
 800d778:	4616      	mov	r6, r2
 800d77a:	f7ff fc13 	bl	800cfa4 <_Balloc>
 800d77e:	4604      	mov	r4, r0
 800d780:	b930      	cbnz	r0, 800d790 <__d2b+0x24>
 800d782:	4602      	mov	r2, r0
 800d784:	4b23      	ldr	r3, [pc, #140]	@ (800d814 <__d2b+0xa8>)
 800d786:	4824      	ldr	r0, [pc, #144]	@ (800d818 <__d2b+0xac>)
 800d788:	f240 310f 	movw	r1, #783	@ 0x30f
 800d78c:	f000 fac4 	bl	800dd18 <__assert_func>
 800d790:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d798:	b10d      	cbz	r5, 800d79e <__d2b+0x32>
 800d79a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d7a4:	d023      	beq.n	800d7ee <__d2b+0x82>
 800d7a6:	4668      	mov	r0, sp
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	f7ff fd0c 	bl	800d1c6 <__lo0bits>
 800d7ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7b2:	b1d0      	cbz	r0, 800d7ea <__d2b+0x7e>
 800d7b4:	f1c0 0320 	rsb	r3, r0, #32
 800d7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	40c2      	lsrs	r2, r0
 800d7c0:	6163      	str	r3, [r4, #20]
 800d7c2:	9201      	str	r2, [sp, #4]
 800d7c4:	9b01      	ldr	r3, [sp, #4]
 800d7c6:	61a3      	str	r3, [r4, #24]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	bf0c      	ite	eq
 800d7cc:	2201      	moveq	r2, #1
 800d7ce:	2202      	movne	r2, #2
 800d7d0:	6122      	str	r2, [r4, #16]
 800d7d2:	b1a5      	cbz	r5, 800d7fe <__d2b+0x92>
 800d7d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7d8:	4405      	add	r5, r0
 800d7da:	603d      	str	r5, [r7, #0]
 800d7dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7e0:	6030      	str	r0, [r6, #0]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	b003      	add	sp, #12
 800d7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ea:	6161      	str	r1, [r4, #20]
 800d7ec:	e7ea      	b.n	800d7c4 <__d2b+0x58>
 800d7ee:	a801      	add	r0, sp, #4
 800d7f0:	f7ff fce9 	bl	800d1c6 <__lo0bits>
 800d7f4:	9b01      	ldr	r3, [sp, #4]
 800d7f6:	6163      	str	r3, [r4, #20]
 800d7f8:	3020      	adds	r0, #32
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	e7e8      	b.n	800d7d0 <__d2b+0x64>
 800d7fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d806:	6038      	str	r0, [r7, #0]
 800d808:	6918      	ldr	r0, [r3, #16]
 800d80a:	f7ff fcbd 	bl	800d188 <__hi0bits>
 800d80e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d812:	e7e5      	b.n	800d7e0 <__d2b+0x74>
 800d814:	0800e1b5 	.word	0x0800e1b5
 800d818:	0800e237 	.word	0x0800e237

0800d81c <__ratio>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	b085      	sub	sp, #20
 800d822:	e9cd 1000 	strd	r1, r0, [sp]
 800d826:	a902      	add	r1, sp, #8
 800d828:	f7ff ff56 	bl	800d6d8 <__b2d>
 800d82c:	9800      	ldr	r0, [sp, #0]
 800d82e:	a903      	add	r1, sp, #12
 800d830:	ec55 4b10 	vmov	r4, r5, d0
 800d834:	f7ff ff50 	bl	800d6d8 <__b2d>
 800d838:	9b01      	ldr	r3, [sp, #4]
 800d83a:	6919      	ldr	r1, [r3, #16]
 800d83c:	9b00      	ldr	r3, [sp, #0]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	1ac9      	subs	r1, r1, r3
 800d842:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d846:	1a9b      	subs	r3, r3, r2
 800d848:	ec5b ab10 	vmov	sl, fp, d0
 800d84c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfce      	itee	gt
 800d854:	462a      	movgt	r2, r5
 800d856:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d85a:	465a      	movle	r2, fp
 800d85c:	462f      	mov	r7, r5
 800d85e:	46d9      	mov	r9, fp
 800d860:	bfcc      	ite	gt
 800d862:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d866:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d86a:	464b      	mov	r3, r9
 800d86c:	4652      	mov	r2, sl
 800d86e:	4620      	mov	r0, r4
 800d870:	4639      	mov	r1, r7
 800d872:	f7f2 fff3 	bl	800085c <__aeabi_ddiv>
 800d876:	ec41 0b10 	vmov	d0, r0, r1
 800d87a:	b005      	add	sp, #20
 800d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d880 <__copybits>:
 800d880:	3901      	subs	r1, #1
 800d882:	b570      	push	{r4, r5, r6, lr}
 800d884:	1149      	asrs	r1, r1, #5
 800d886:	6914      	ldr	r4, [r2, #16]
 800d888:	3101      	adds	r1, #1
 800d88a:	f102 0314 	add.w	r3, r2, #20
 800d88e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d896:	1f05      	subs	r5, r0, #4
 800d898:	42a3      	cmp	r3, r4
 800d89a:	d30c      	bcc.n	800d8b6 <__copybits+0x36>
 800d89c:	1aa3      	subs	r3, r4, r2
 800d89e:	3b11      	subs	r3, #17
 800d8a0:	f023 0303 	bic.w	r3, r3, #3
 800d8a4:	3211      	adds	r2, #17
 800d8a6:	42a2      	cmp	r2, r4
 800d8a8:	bf88      	it	hi
 800d8aa:	2300      	movhi	r3, #0
 800d8ac:	4418      	add	r0, r3
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	4288      	cmp	r0, r1
 800d8b2:	d305      	bcc.n	800d8c0 <__copybits+0x40>
 800d8b4:	bd70      	pop	{r4, r5, r6, pc}
 800d8b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8be:	e7eb      	b.n	800d898 <__copybits+0x18>
 800d8c0:	f840 3b04 	str.w	r3, [r0], #4
 800d8c4:	e7f4      	b.n	800d8b0 <__copybits+0x30>

0800d8c6 <__any_on>:
 800d8c6:	f100 0214 	add.w	r2, r0, #20
 800d8ca:	6900      	ldr	r0, [r0, #16]
 800d8cc:	114b      	asrs	r3, r1, #5
 800d8ce:	4298      	cmp	r0, r3
 800d8d0:	b510      	push	{r4, lr}
 800d8d2:	db11      	blt.n	800d8f8 <__any_on+0x32>
 800d8d4:	dd0a      	ble.n	800d8ec <__any_on+0x26>
 800d8d6:	f011 011f 	ands.w	r1, r1, #31
 800d8da:	d007      	beq.n	800d8ec <__any_on+0x26>
 800d8dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8e0:	fa24 f001 	lsr.w	r0, r4, r1
 800d8e4:	fa00 f101 	lsl.w	r1, r0, r1
 800d8e8:	428c      	cmp	r4, r1
 800d8ea:	d10b      	bne.n	800d904 <__any_on+0x3e>
 800d8ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d803      	bhi.n	800d8fc <__any_on+0x36>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	bd10      	pop	{r4, pc}
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	e7f7      	b.n	800d8ec <__any_on+0x26>
 800d8fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d900:	2900      	cmp	r1, #0
 800d902:	d0f5      	beq.n	800d8f0 <__any_on+0x2a>
 800d904:	2001      	movs	r0, #1
 800d906:	e7f6      	b.n	800d8f6 <__any_on+0x30>

0800d908 <__sread>:
 800d908:	b510      	push	{r4, lr}
 800d90a:	460c      	mov	r4, r1
 800d90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d910:	f000 f9ce 	bl	800dcb0 <_read_r>
 800d914:	2800      	cmp	r0, #0
 800d916:	bfab      	itete	ge
 800d918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d91a:	89a3      	ldrhlt	r3, [r4, #12]
 800d91c:	181b      	addge	r3, r3, r0
 800d91e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d922:	bfac      	ite	ge
 800d924:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d926:	81a3      	strhlt	r3, [r4, #12]
 800d928:	bd10      	pop	{r4, pc}

0800d92a <__swrite>:
 800d92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d92e:	461f      	mov	r7, r3
 800d930:	898b      	ldrh	r3, [r1, #12]
 800d932:	05db      	lsls	r3, r3, #23
 800d934:	4605      	mov	r5, r0
 800d936:	460c      	mov	r4, r1
 800d938:	4616      	mov	r6, r2
 800d93a:	d505      	bpl.n	800d948 <__swrite+0x1e>
 800d93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d940:	2302      	movs	r3, #2
 800d942:	2200      	movs	r2, #0
 800d944:	f000 f9a2 	bl	800dc8c <_lseek_r>
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d94e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d952:	81a3      	strh	r3, [r4, #12]
 800d954:	4632      	mov	r2, r6
 800d956:	463b      	mov	r3, r7
 800d958:	4628      	mov	r0, r5
 800d95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d95e:	f000 b9c9 	b.w	800dcf4 <_write_r>

0800d962 <__sseek>:
 800d962:	b510      	push	{r4, lr}
 800d964:	460c      	mov	r4, r1
 800d966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96a:	f000 f98f 	bl	800dc8c <_lseek_r>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	bf15      	itete	ne
 800d974:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d97a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d97e:	81a3      	strheq	r3, [r4, #12]
 800d980:	bf18      	it	ne
 800d982:	81a3      	strhne	r3, [r4, #12]
 800d984:	bd10      	pop	{r4, pc}

0800d986 <__sclose>:
 800d986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98a:	f000 b94d 	b.w	800dc28 <_close_r>

0800d98e <_realloc_r>:
 800d98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d992:	4680      	mov	r8, r0
 800d994:	4615      	mov	r5, r2
 800d996:	460c      	mov	r4, r1
 800d998:	b921      	cbnz	r1, 800d9a4 <_realloc_r+0x16>
 800d99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d99e:	4611      	mov	r1, r2
 800d9a0:	f7ff b9b6 	b.w	800cd10 <_malloc_r>
 800d9a4:	b92a      	cbnz	r2, 800d9b2 <_realloc_r+0x24>
 800d9a6:	f000 f9e9 	bl	800dd7c <_free_r>
 800d9aa:	2400      	movs	r4, #0
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b2:	f000 fa2d 	bl	800de10 <_malloc_usable_size_r>
 800d9b6:	4285      	cmp	r5, r0
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	d802      	bhi.n	800d9c2 <_realloc_r+0x34>
 800d9bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9c0:	d8f4      	bhi.n	800d9ac <_realloc_r+0x1e>
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	f7ff f9a3 	bl	800cd10 <_malloc_r>
 800d9ca:	4607      	mov	r7, r0
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d0ec      	beq.n	800d9aa <_realloc_r+0x1c>
 800d9d0:	42b5      	cmp	r5, r6
 800d9d2:	462a      	mov	r2, r5
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	bf28      	it	cs
 800d9d8:	4632      	movcs	r2, r6
 800d9da:	f7fd fd32 	bl	800b442 <memcpy>
 800d9de:	4621      	mov	r1, r4
 800d9e0:	4640      	mov	r0, r8
 800d9e2:	f000 f9cb 	bl	800dd7c <_free_r>
 800d9e6:	463c      	mov	r4, r7
 800d9e8:	e7e0      	b.n	800d9ac <_realloc_r+0x1e>

0800d9ea <__swbuf_r>:
 800d9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ec:	460e      	mov	r6, r1
 800d9ee:	4614      	mov	r4, r2
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	b118      	cbz	r0, 800d9fc <__swbuf_r+0x12>
 800d9f4:	6a03      	ldr	r3, [r0, #32]
 800d9f6:	b90b      	cbnz	r3, 800d9fc <__swbuf_r+0x12>
 800d9f8:	f7fc fe0c 	bl	800a614 <__sinit>
 800d9fc:	69a3      	ldr	r3, [r4, #24]
 800d9fe:	60a3      	str	r3, [r4, #8]
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	071a      	lsls	r2, r3, #28
 800da04:	d501      	bpl.n	800da0a <__swbuf_r+0x20>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	b943      	cbnz	r3, 800da1c <__swbuf_r+0x32>
 800da0a:	4621      	mov	r1, r4
 800da0c:	4628      	mov	r0, r5
 800da0e:	f000 f82b 	bl	800da68 <__swsetup_r>
 800da12:	b118      	cbz	r0, 800da1c <__swbuf_r+0x32>
 800da14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800da18:	4638      	mov	r0, r7
 800da1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	6922      	ldr	r2, [r4, #16]
 800da20:	1a98      	subs	r0, r3, r2
 800da22:	6963      	ldr	r3, [r4, #20]
 800da24:	b2f6      	uxtb	r6, r6
 800da26:	4283      	cmp	r3, r0
 800da28:	4637      	mov	r7, r6
 800da2a:	dc05      	bgt.n	800da38 <__swbuf_r+0x4e>
 800da2c:	4621      	mov	r1, r4
 800da2e:	4628      	mov	r0, r5
 800da30:	f7ff fa84 	bl	800cf3c <_fflush_r>
 800da34:	2800      	cmp	r0, #0
 800da36:	d1ed      	bne.n	800da14 <__swbuf_r+0x2a>
 800da38:	68a3      	ldr	r3, [r4, #8]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	60a3      	str	r3, [r4, #8]
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	6022      	str	r2, [r4, #0]
 800da44:	701e      	strb	r6, [r3, #0]
 800da46:	6962      	ldr	r2, [r4, #20]
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d004      	beq.n	800da58 <__swbuf_r+0x6e>
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	07db      	lsls	r3, r3, #31
 800da52:	d5e1      	bpl.n	800da18 <__swbuf_r+0x2e>
 800da54:	2e0a      	cmp	r6, #10
 800da56:	d1df      	bne.n	800da18 <__swbuf_r+0x2e>
 800da58:	4621      	mov	r1, r4
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7ff fa6e 	bl	800cf3c <_fflush_r>
 800da60:	2800      	cmp	r0, #0
 800da62:	d0d9      	beq.n	800da18 <__swbuf_r+0x2e>
 800da64:	e7d6      	b.n	800da14 <__swbuf_r+0x2a>
	...

0800da68 <__swsetup_r>:
 800da68:	b538      	push	{r3, r4, r5, lr}
 800da6a:	4b29      	ldr	r3, [pc, #164]	@ (800db10 <__swsetup_r+0xa8>)
 800da6c:	4605      	mov	r5, r0
 800da6e:	6818      	ldr	r0, [r3, #0]
 800da70:	460c      	mov	r4, r1
 800da72:	b118      	cbz	r0, 800da7c <__swsetup_r+0x14>
 800da74:	6a03      	ldr	r3, [r0, #32]
 800da76:	b90b      	cbnz	r3, 800da7c <__swsetup_r+0x14>
 800da78:	f7fc fdcc 	bl	800a614 <__sinit>
 800da7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da80:	0719      	lsls	r1, r3, #28
 800da82:	d422      	bmi.n	800daca <__swsetup_r+0x62>
 800da84:	06da      	lsls	r2, r3, #27
 800da86:	d407      	bmi.n	800da98 <__swsetup_r+0x30>
 800da88:	2209      	movs	r2, #9
 800da8a:	602a      	str	r2, [r5, #0]
 800da8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da96:	e033      	b.n	800db00 <__swsetup_r+0x98>
 800da98:	0758      	lsls	r0, r3, #29
 800da9a:	d512      	bpl.n	800dac2 <__swsetup_r+0x5a>
 800da9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da9e:	b141      	cbz	r1, 800dab2 <__swsetup_r+0x4a>
 800daa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daa4:	4299      	cmp	r1, r3
 800daa6:	d002      	beq.n	800daae <__swsetup_r+0x46>
 800daa8:	4628      	mov	r0, r5
 800daaa:	f000 f967 	bl	800dd7c <_free_r>
 800daae:	2300      	movs	r3, #0
 800dab0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	2300      	movs	r3, #0
 800dabc:	6063      	str	r3, [r4, #4]
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	89a3      	ldrh	r3, [r4, #12]
 800dac4:	f043 0308 	orr.w	r3, r3, #8
 800dac8:	81a3      	strh	r3, [r4, #12]
 800daca:	6923      	ldr	r3, [r4, #16]
 800dacc:	b94b      	cbnz	r3, 800dae2 <__swsetup_r+0x7a>
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dad8:	d003      	beq.n	800dae2 <__swsetup_r+0x7a>
 800dada:	4621      	mov	r1, r4
 800dadc:	4628      	mov	r0, r5
 800dade:	f000 f84c 	bl	800db7a <__smakebuf_r>
 800dae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dae6:	f013 0201 	ands.w	r2, r3, #1
 800daea:	d00a      	beq.n	800db02 <__swsetup_r+0x9a>
 800daec:	2200      	movs	r2, #0
 800daee:	60a2      	str	r2, [r4, #8]
 800daf0:	6962      	ldr	r2, [r4, #20]
 800daf2:	4252      	negs	r2, r2
 800daf4:	61a2      	str	r2, [r4, #24]
 800daf6:	6922      	ldr	r2, [r4, #16]
 800daf8:	b942      	cbnz	r2, 800db0c <__swsetup_r+0xa4>
 800dafa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dafe:	d1c5      	bne.n	800da8c <__swsetup_r+0x24>
 800db00:	bd38      	pop	{r3, r4, r5, pc}
 800db02:	0799      	lsls	r1, r3, #30
 800db04:	bf58      	it	pl
 800db06:	6962      	ldrpl	r2, [r4, #20]
 800db08:	60a2      	str	r2, [r4, #8]
 800db0a:	e7f4      	b.n	800daf6 <__swsetup_r+0x8e>
 800db0c:	2000      	movs	r0, #0
 800db0e:	e7f7      	b.n	800db00 <__swsetup_r+0x98>
 800db10:	20000184 	.word	0x20000184

0800db14 <__ascii_wctomb>:
 800db14:	4603      	mov	r3, r0
 800db16:	4608      	mov	r0, r1
 800db18:	b141      	cbz	r1, 800db2c <__ascii_wctomb+0x18>
 800db1a:	2aff      	cmp	r2, #255	@ 0xff
 800db1c:	d904      	bls.n	800db28 <__ascii_wctomb+0x14>
 800db1e:	228a      	movs	r2, #138	@ 0x8a
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db26:	4770      	bx	lr
 800db28:	700a      	strb	r2, [r1, #0]
 800db2a:	2001      	movs	r0, #1
 800db2c:	4770      	bx	lr

0800db2e <__swhatbuf_r>:
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	460c      	mov	r4, r1
 800db32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db36:	2900      	cmp	r1, #0
 800db38:	b096      	sub	sp, #88	@ 0x58
 800db3a:	4615      	mov	r5, r2
 800db3c:	461e      	mov	r6, r3
 800db3e:	da0d      	bge.n	800db5c <__swhatbuf_r+0x2e>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db46:	f04f 0100 	mov.w	r1, #0
 800db4a:	bf14      	ite	ne
 800db4c:	2340      	movne	r3, #64	@ 0x40
 800db4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db52:	2000      	movs	r0, #0
 800db54:	6031      	str	r1, [r6, #0]
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	b016      	add	sp, #88	@ 0x58
 800db5a:	bd70      	pop	{r4, r5, r6, pc}
 800db5c:	466a      	mov	r2, sp
 800db5e:	f000 f873 	bl	800dc48 <_fstat_r>
 800db62:	2800      	cmp	r0, #0
 800db64:	dbec      	blt.n	800db40 <__swhatbuf_r+0x12>
 800db66:	9901      	ldr	r1, [sp, #4]
 800db68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db70:	4259      	negs	r1, r3
 800db72:	4159      	adcs	r1, r3
 800db74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db78:	e7eb      	b.n	800db52 <__swhatbuf_r+0x24>

0800db7a <__smakebuf_r>:
 800db7a:	898b      	ldrh	r3, [r1, #12]
 800db7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db7e:	079d      	lsls	r5, r3, #30
 800db80:	4606      	mov	r6, r0
 800db82:	460c      	mov	r4, r1
 800db84:	d507      	bpl.n	800db96 <__smakebuf_r+0x1c>
 800db86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db8a:	6023      	str	r3, [r4, #0]
 800db8c:	6123      	str	r3, [r4, #16]
 800db8e:	2301      	movs	r3, #1
 800db90:	6163      	str	r3, [r4, #20]
 800db92:	b003      	add	sp, #12
 800db94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db96:	ab01      	add	r3, sp, #4
 800db98:	466a      	mov	r2, sp
 800db9a:	f7ff ffc8 	bl	800db2e <__swhatbuf_r>
 800db9e:	9f00      	ldr	r7, [sp, #0]
 800dba0:	4605      	mov	r5, r0
 800dba2:	4639      	mov	r1, r7
 800dba4:	4630      	mov	r0, r6
 800dba6:	f7ff f8b3 	bl	800cd10 <_malloc_r>
 800dbaa:	b948      	cbnz	r0, 800dbc0 <__smakebuf_r+0x46>
 800dbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbb0:	059a      	lsls	r2, r3, #22
 800dbb2:	d4ee      	bmi.n	800db92 <__smakebuf_r+0x18>
 800dbb4:	f023 0303 	bic.w	r3, r3, #3
 800dbb8:	f043 0302 	orr.w	r3, r3, #2
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	e7e2      	b.n	800db86 <__smakebuf_r+0xc>
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	6020      	str	r0, [r4, #0]
 800dbc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbc8:	81a3      	strh	r3, [r4, #12]
 800dbca:	9b01      	ldr	r3, [sp, #4]
 800dbcc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbd0:	b15b      	cbz	r3, 800dbea <__smakebuf_r+0x70>
 800dbd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f000 f848 	bl	800dc6c <_isatty_r>
 800dbdc:	b128      	cbz	r0, 800dbea <__smakebuf_r+0x70>
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f023 0303 	bic.w	r3, r3, #3
 800dbe4:	f043 0301 	orr.w	r3, r3, #1
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	431d      	orrs	r5, r3
 800dbee:	81a5      	strh	r5, [r4, #12]
 800dbf0:	e7cf      	b.n	800db92 <__smakebuf_r+0x18>

0800dbf2 <memmove>:
 800dbf2:	4288      	cmp	r0, r1
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	eb01 0402 	add.w	r4, r1, r2
 800dbfa:	d902      	bls.n	800dc02 <memmove+0x10>
 800dbfc:	4284      	cmp	r4, r0
 800dbfe:	4623      	mov	r3, r4
 800dc00:	d807      	bhi.n	800dc12 <memmove+0x20>
 800dc02:	1e43      	subs	r3, r0, #1
 800dc04:	42a1      	cmp	r1, r4
 800dc06:	d008      	beq.n	800dc1a <memmove+0x28>
 800dc08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc10:	e7f8      	b.n	800dc04 <memmove+0x12>
 800dc12:	4402      	add	r2, r0
 800dc14:	4601      	mov	r1, r0
 800dc16:	428a      	cmp	r2, r1
 800dc18:	d100      	bne.n	800dc1c <memmove+0x2a>
 800dc1a:	bd10      	pop	{r4, pc}
 800dc1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc24:	e7f7      	b.n	800dc16 <memmove+0x24>
	...

0800dc28 <_close_r>:
 800dc28:	b538      	push	{r3, r4, r5, lr}
 800dc2a:	4d06      	ldr	r5, [pc, #24]	@ (800dc44 <_close_r+0x1c>)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	4604      	mov	r4, r0
 800dc30:	4608      	mov	r0, r1
 800dc32:	602b      	str	r3, [r5, #0]
 800dc34:	f7f4 f95a 	bl	8001eec <_close>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	d102      	bne.n	800dc42 <_close_r+0x1a>
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	b103      	cbz	r3, 800dc42 <_close_r+0x1a>
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	20000784 	.word	0x20000784

0800dc48 <_fstat_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d07      	ldr	r5, [pc, #28]	@ (800dc68 <_fstat_r+0x20>)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	4611      	mov	r1, r2
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	f7f4 f955 	bl	8001f04 <_fstat>
 800dc5a:	1c43      	adds	r3, r0, #1
 800dc5c:	d102      	bne.n	800dc64 <_fstat_r+0x1c>
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	b103      	cbz	r3, 800dc64 <_fstat_r+0x1c>
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	bf00      	nop
 800dc68:	20000784 	.word	0x20000784

0800dc6c <_isatty_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	4d06      	ldr	r5, [pc, #24]	@ (800dc88 <_isatty_r+0x1c>)
 800dc70:	2300      	movs	r3, #0
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	602b      	str	r3, [r5, #0]
 800dc78:	f7f4 f954 	bl	8001f24 <_isatty>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_isatty_r+0x1a>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_isatty_r+0x1a>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20000784 	.word	0x20000784

0800dc8c <_lseek_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4d07      	ldr	r5, [pc, #28]	@ (800dcac <_lseek_r+0x20>)
 800dc90:	4604      	mov	r4, r0
 800dc92:	4608      	mov	r0, r1
 800dc94:	4611      	mov	r1, r2
 800dc96:	2200      	movs	r2, #0
 800dc98:	602a      	str	r2, [r5, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f7f4 f94d 	bl	8001f3a <_lseek>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d102      	bne.n	800dcaa <_lseek_r+0x1e>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	b103      	cbz	r3, 800dcaa <_lseek_r+0x1e>
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	20000784 	.word	0x20000784

0800dcb0 <_read_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d07      	ldr	r5, [pc, #28]	@ (800dcd0 <_read_r+0x20>)
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	4611      	mov	r1, r2
 800dcba:	2200      	movs	r2, #0
 800dcbc:	602a      	str	r2, [r5, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	f7f4 f8f7 	bl	8001eb2 <_read>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_read_r+0x1e>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_read_r+0x1e>
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	20000784 	.word	0x20000784

0800dcd4 <_sbrk_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	4d06      	ldr	r5, [pc, #24]	@ (800dcf0 <_sbrk_r+0x1c>)
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4608      	mov	r0, r1
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	f7f4 f938 	bl	8001f54 <_sbrk>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_sbrk_r+0x1a>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_sbrk_r+0x1a>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	20000784 	.word	0x20000784

0800dcf4 <_write_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4d07      	ldr	r5, [pc, #28]	@ (800dd14 <_write_r+0x20>)
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	4608      	mov	r0, r1
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	2200      	movs	r2, #0
 800dd00:	602a      	str	r2, [r5, #0]
 800dd02:	461a      	mov	r2, r3
 800dd04:	f7f3 fc8f 	bl	8001626 <_write>
 800dd08:	1c43      	adds	r3, r0, #1
 800dd0a:	d102      	bne.n	800dd12 <_write_r+0x1e>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b103      	cbz	r3, 800dd12 <_write_r+0x1e>
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
 800dd14:	20000784 	.word	0x20000784

0800dd18 <__assert_func>:
 800dd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd1a:	4614      	mov	r4, r2
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4b09      	ldr	r3, [pc, #36]	@ (800dd44 <__assert_func+0x2c>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4605      	mov	r5, r0
 800dd24:	68d8      	ldr	r0, [r3, #12]
 800dd26:	b954      	cbnz	r4, 800dd3e <__assert_func+0x26>
 800dd28:	4b07      	ldr	r3, [pc, #28]	@ (800dd48 <__assert_func+0x30>)
 800dd2a:	461c      	mov	r4, r3
 800dd2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd30:	9100      	str	r1, [sp, #0]
 800dd32:	462b      	mov	r3, r5
 800dd34:	4905      	ldr	r1, [pc, #20]	@ (800dd4c <__assert_func+0x34>)
 800dd36:	f000 f873 	bl	800de20 <fiprintf>
 800dd3a:	f000 f883 	bl	800de44 <abort>
 800dd3e:	4b04      	ldr	r3, [pc, #16]	@ (800dd50 <__assert_func+0x38>)
 800dd40:	e7f4      	b.n	800dd2c <__assert_func+0x14>
 800dd42:	bf00      	nop
 800dd44:	20000184 	.word	0x20000184
 800dd48:	0800e3cb 	.word	0x0800e3cb
 800dd4c:	0800e39d 	.word	0x0800e39d
 800dd50:	0800e390 	.word	0x0800e390

0800dd54 <_calloc_r>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	fba1 5402 	umull	r5, r4, r1, r2
 800dd5a:	b93c      	cbnz	r4, 800dd6c <_calloc_r+0x18>
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	f7fe ffd7 	bl	800cd10 <_malloc_r>
 800dd62:	4606      	mov	r6, r0
 800dd64:	b928      	cbnz	r0, 800dd72 <_calloc_r+0x1e>
 800dd66:	2600      	movs	r6, #0
 800dd68:	4630      	mov	r0, r6
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
 800dd6c:	220c      	movs	r2, #12
 800dd6e:	6002      	str	r2, [r0, #0]
 800dd70:	e7f9      	b.n	800dd66 <_calloc_r+0x12>
 800dd72:	462a      	mov	r2, r5
 800dd74:	4621      	mov	r1, r4
 800dd76:	f7fd fb2b 	bl	800b3d0 <memset>
 800dd7a:	e7f5      	b.n	800dd68 <_calloc_r+0x14>

0800dd7c <_free_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4605      	mov	r5, r0
 800dd80:	2900      	cmp	r1, #0
 800dd82:	d041      	beq.n	800de08 <_free_r+0x8c>
 800dd84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd88:	1f0c      	subs	r4, r1, #4
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	bfb8      	it	lt
 800dd8e:	18e4      	addlt	r4, r4, r3
 800dd90:	f7ff f8fc 	bl	800cf8c <__malloc_lock>
 800dd94:	4a1d      	ldr	r2, [pc, #116]	@ (800de0c <_free_r+0x90>)
 800dd96:	6813      	ldr	r3, [r2, #0]
 800dd98:	b933      	cbnz	r3, 800dda8 <_free_r+0x2c>
 800dd9a:	6063      	str	r3, [r4, #4]
 800dd9c:	6014      	str	r4, [r2, #0]
 800dd9e:	4628      	mov	r0, r5
 800dda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dda4:	f7ff b8f8 	b.w	800cf98 <__malloc_unlock>
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	d908      	bls.n	800ddbe <_free_r+0x42>
 800ddac:	6820      	ldr	r0, [r4, #0]
 800ddae:	1821      	adds	r1, r4, r0
 800ddb0:	428b      	cmp	r3, r1
 800ddb2:	bf01      	itttt	eq
 800ddb4:	6819      	ldreq	r1, [r3, #0]
 800ddb6:	685b      	ldreq	r3, [r3, #4]
 800ddb8:	1809      	addeq	r1, r1, r0
 800ddba:	6021      	streq	r1, [r4, #0]
 800ddbc:	e7ed      	b.n	800dd9a <_free_r+0x1e>
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	b10b      	cbz	r3, 800ddc8 <_free_r+0x4c>
 800ddc4:	42a3      	cmp	r3, r4
 800ddc6:	d9fa      	bls.n	800ddbe <_free_r+0x42>
 800ddc8:	6811      	ldr	r1, [r2, #0]
 800ddca:	1850      	adds	r0, r2, r1
 800ddcc:	42a0      	cmp	r0, r4
 800ddce:	d10b      	bne.n	800dde8 <_free_r+0x6c>
 800ddd0:	6820      	ldr	r0, [r4, #0]
 800ddd2:	4401      	add	r1, r0
 800ddd4:	1850      	adds	r0, r2, r1
 800ddd6:	4283      	cmp	r3, r0
 800ddd8:	6011      	str	r1, [r2, #0]
 800ddda:	d1e0      	bne.n	800dd9e <_free_r+0x22>
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	6053      	str	r3, [r2, #4]
 800dde2:	4408      	add	r0, r1
 800dde4:	6010      	str	r0, [r2, #0]
 800dde6:	e7da      	b.n	800dd9e <_free_r+0x22>
 800dde8:	d902      	bls.n	800ddf0 <_free_r+0x74>
 800ddea:	230c      	movs	r3, #12
 800ddec:	602b      	str	r3, [r5, #0]
 800ddee:	e7d6      	b.n	800dd9e <_free_r+0x22>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	1821      	adds	r1, r4, r0
 800ddf4:	428b      	cmp	r3, r1
 800ddf6:	bf04      	itt	eq
 800ddf8:	6819      	ldreq	r1, [r3, #0]
 800ddfa:	685b      	ldreq	r3, [r3, #4]
 800ddfc:	6063      	str	r3, [r4, #4]
 800ddfe:	bf04      	itt	eq
 800de00:	1809      	addeq	r1, r1, r0
 800de02:	6021      	streq	r1, [r4, #0]
 800de04:	6054      	str	r4, [r2, #4]
 800de06:	e7ca      	b.n	800dd9e <_free_r+0x22>
 800de08:	bd38      	pop	{r3, r4, r5, pc}
 800de0a:	bf00      	nop
 800de0c:	20000780 	.word	0x20000780

0800de10 <_malloc_usable_size_r>:
 800de10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de14:	1f18      	subs	r0, r3, #4
 800de16:	2b00      	cmp	r3, #0
 800de18:	bfbc      	itt	lt
 800de1a:	580b      	ldrlt	r3, [r1, r0]
 800de1c:	18c0      	addlt	r0, r0, r3
 800de1e:	4770      	bx	lr

0800de20 <fiprintf>:
 800de20:	b40e      	push	{r1, r2, r3}
 800de22:	b503      	push	{r0, r1, lr}
 800de24:	4601      	mov	r1, r0
 800de26:	ab03      	add	r3, sp, #12
 800de28:	4805      	ldr	r0, [pc, #20]	@ (800de40 <fiprintf+0x20>)
 800de2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de2e:	6800      	ldr	r0, [r0, #0]
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	f7fe fe2b 	bl	800ca8c <_vfiprintf_r>
 800de36:	b002      	add	sp, #8
 800de38:	f85d eb04 	ldr.w	lr, [sp], #4
 800de3c:	b003      	add	sp, #12
 800de3e:	4770      	bx	lr
 800de40:	20000184 	.word	0x20000184

0800de44 <abort>:
 800de44:	b508      	push	{r3, lr}
 800de46:	2006      	movs	r0, #6
 800de48:	f000 f82c 	bl	800dea4 <raise>
 800de4c:	2001      	movs	r0, #1
 800de4e:	f7f4 f825 	bl	8001e9c <_exit>

0800de52 <_raise_r>:
 800de52:	291f      	cmp	r1, #31
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	4605      	mov	r5, r0
 800de58:	460c      	mov	r4, r1
 800de5a:	d904      	bls.n	800de66 <_raise_r+0x14>
 800de5c:	2316      	movs	r3, #22
 800de5e:	6003      	str	r3, [r0, #0]
 800de60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de64:	bd38      	pop	{r3, r4, r5, pc}
 800de66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de68:	b112      	cbz	r2, 800de70 <_raise_r+0x1e>
 800de6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de6e:	b94b      	cbnz	r3, 800de84 <_raise_r+0x32>
 800de70:	4628      	mov	r0, r5
 800de72:	f000 f831 	bl	800ded8 <_getpid_r>
 800de76:	4622      	mov	r2, r4
 800de78:	4601      	mov	r1, r0
 800de7a:	4628      	mov	r0, r5
 800de7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de80:	f000 b818 	b.w	800deb4 <_kill_r>
 800de84:	2b01      	cmp	r3, #1
 800de86:	d00a      	beq.n	800de9e <_raise_r+0x4c>
 800de88:	1c59      	adds	r1, r3, #1
 800de8a:	d103      	bne.n	800de94 <_raise_r+0x42>
 800de8c:	2316      	movs	r3, #22
 800de8e:	6003      	str	r3, [r0, #0]
 800de90:	2001      	movs	r0, #1
 800de92:	e7e7      	b.n	800de64 <_raise_r+0x12>
 800de94:	2100      	movs	r1, #0
 800de96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de9a:	4620      	mov	r0, r4
 800de9c:	4798      	blx	r3
 800de9e:	2000      	movs	r0, #0
 800dea0:	e7e0      	b.n	800de64 <_raise_r+0x12>
	...

0800dea4 <raise>:
 800dea4:	4b02      	ldr	r3, [pc, #8]	@ (800deb0 <raise+0xc>)
 800dea6:	4601      	mov	r1, r0
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	f7ff bfd2 	b.w	800de52 <_raise_r>
 800deae:	bf00      	nop
 800deb0:	20000184 	.word	0x20000184

0800deb4 <_kill_r>:
 800deb4:	b538      	push	{r3, r4, r5, lr}
 800deb6:	4d07      	ldr	r5, [pc, #28]	@ (800ded4 <_kill_r+0x20>)
 800deb8:	2300      	movs	r3, #0
 800deba:	4604      	mov	r4, r0
 800debc:	4608      	mov	r0, r1
 800debe:	4611      	mov	r1, r2
 800dec0:	602b      	str	r3, [r5, #0]
 800dec2:	f7f3 ffdb 	bl	8001e7c <_kill>
 800dec6:	1c43      	adds	r3, r0, #1
 800dec8:	d102      	bne.n	800ded0 <_kill_r+0x1c>
 800deca:	682b      	ldr	r3, [r5, #0]
 800decc:	b103      	cbz	r3, 800ded0 <_kill_r+0x1c>
 800dece:	6023      	str	r3, [r4, #0]
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	bf00      	nop
 800ded4:	20000784 	.word	0x20000784

0800ded8 <_getpid_r>:
 800ded8:	f7f3 bfc8 	b.w	8001e6c <_getpid>

0800dedc <_init>:
 800dedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dede:	bf00      	nop
 800dee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dee2:	bc08      	pop	{r3}
 800dee4:	469e      	mov	lr, r3
 800dee6:	4770      	bx	lr

0800dee8 <_fini>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	bf00      	nop
 800deec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deee:	bc08      	pop	{r3}
 800def0:	469e      	mov	lr, r3
 800def2:	4770      	bx	lr
