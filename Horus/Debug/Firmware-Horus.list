
Firmware-Horus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800888c  0800888c  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008894  08008894  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008894  08008894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008898  08008898  00009898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800889c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000000c  080088a8  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00001704  2000046c  080088a8  0000a46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2b2  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004942  00000000  00000000  000272ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ba  00000000  00000000  0002d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf66  00000000  00000000  0002eba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002470c  00000000  00000000  0004bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa06a  00000000  00000000  00070214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a27e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e98  00000000  00000000  0011a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008840 	.word	0x08008840

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08008840 	.word	0x08008840

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Actuators_Write>:

#include "actuators.h"

static uint8_t actuatorsData = 0;

void Actuators_Write(uint8_t data) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	e01e      	b.n	8000512 <Actuators_Write+0x4e>
        // Write the data bit by bit
        HAL_GPIO_WritePin(ActDa_GPIO_Port, ActDa_Pin, (data & (1 << (7 - i))) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f1c3 0307 	rsb	r3, r3, #7
 80004dc:	fa42 f303 	asr.w	r3, r2, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ee:	4812      	ldr	r0, [pc, #72]	@ (8000538 <Actuators_Write+0x74>)
 80004f0:	f002 fcc2 	bl	8002e78 <HAL_GPIO_WritePin>

        // Toggle the clock pin
        HAL_GPIO_WritePin(ActCk_GPIO_Port, ActCk_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004fa:	480f      	ldr	r0, [pc, #60]	@ (8000538 <Actuators_Write+0x74>)
 80004fc:	f002 fcbc 	bl	8002e78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ActCk_GPIO_Port, ActCk_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000506:	480c      	ldr	r0, [pc, #48]	@ (8000538 <Actuators_Write+0x74>)
 8000508:	f002 fcb6 	bl	8002e78 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2b07      	cmp	r3, #7
 8000516:	dddd      	ble.n	80004d4 <Actuators_Write+0x10>
    }

    // Toggle the latch pin to output the data
    HAL_GPIO_WritePin(ActLa_GPIO_Port, ActLa_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051e:	4806      	ldr	r0, [pc, #24]	@ (8000538 <Actuators_Write+0x74>)
 8000520:	f002 fcaa 	bl	8002e78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ActLa_GPIO_Port, ActLa_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800052a:	4803      	ldr	r0, [pc, #12]	@ (8000538 <Actuators_Write+0x74>)
 800052c:	f002 fca4 	bl	8002e78 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020400 	.word	0x40020400

0800053c <Actuators_SetPin>:

void Actuators_SetPin(ActuatorPin pin) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
    if (pin >= ACT_PIN_A1 && pin <= ACT_PIN_A8) {
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b07      	cmp	r3, #7
 800054a:	d80e      	bhi.n	800056a <Actuators_SetPin+0x2e>
    	actuatorsData |= (1 << (pin));
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2201      	movs	r2, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	b25a      	sxtb	r2, r3
 8000556:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <Actuators_SetPin+0x38>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b25b      	sxtb	r3, r3
 800055c:	4313      	orrs	r3, r2
 800055e:	b25b      	sxtb	r3, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <Actuators_SetPin+0x38>)
 8000564:	701a      	strb	r2, [r3, #0]
        Actuators_Update();
 8000566:	f000 f827 	bl	80005b8 <Actuators_Update>
    }
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <Actuators_ResetPin>:

void Actuators_ResetPin(ActuatorPin pin) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
    if (pin >= ACT_PIN_A1 && pin <= ACT_PIN_A8) {
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d810      	bhi.n	80005aa <Actuators_ResetPin+0x32>
    	actuatorsData &= ~(1 << (pin));
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2201      	movs	r2, #1
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	b25b      	sxtb	r3, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	b25a      	sxtb	r2, r3
 8000596:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <Actuators_ResetPin+0x3c>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b25b      	sxtb	r3, r3
 800059c:	4013      	ands	r3, r2
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <Actuators_ResetPin+0x3c>)
 80005a4:	701a      	strb	r2, [r3, #0]
        Actuators_Update();
 80005a6:	f000 f807 	bl	80005b8 <Actuators_Update>
    }
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028

080005b8 <Actuators_Update>:

void Actuators_Update(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	Actuators_Write(actuatorsData);
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <Actuators_Update+0x14>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff7f 	bl	80004c4 <Actuators_Write>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <MX_ADC1_Init+0xa0>)
 8000614:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_ADC1_Init+0x98>)
 800061e:	2201      	movs	r2, #1
 8000620:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_ADC1_Init+0x98>)
 800062c:	2201      	movs	r2, #1
 800062e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000632:	f001 f9cb 	bl	80019cc <HAL_ADC_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800063c:	f000 faf8 	bl	8000c30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000640:	230f      	movs	r3, #15
 8000642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000652:	f001 fb2d 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800065c:	f000 fae8 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000002c 	.word	0x2000002c
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a3f      	ldr	r2, [pc, #252]	@ (8000790 <HAL_ADC_MspInit+0x11c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d178      	bne.n	8000788 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a3d      	ldr	r2, [pc, #244]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b37      	ldr	r3, [pc, #220]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a36      	ldr	r2, [pc, #216]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <HAL_ADC_MspInit+0x120>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Av1_Pin;
 80006ea:	2320      	movs	r3, #32
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Av1_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4826      	ldr	r0, [pc, #152]	@ (8000798 <HAL_ADC_MspInit+0x124>)
 80006fe:	f002 fa1f 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Av2_Pin|Av3_Pin;
 8000702:	2303      	movs	r3, #3
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4821      	ldr	r0, [pc, #132]	@ (800079c <HAL_ADC_MspInit+0x128>)
 8000716:	f002 fa13 	bl	8002b40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <HAL_ADC_MspInit+0x130>)
 800071e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000738:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 800073c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000740:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000748:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800075c:	4810      	ldr	r0, [pc, #64]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 800075e:	f001 fde1 	bl	8002324 <HAL_DMA_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000768:	f000 fa62 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a0c      	ldr	r2, [pc, #48]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000770:	639a      	str	r2, [r3, #56]	@ 0x38
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <HAL_ADC_MspInit+0x12c>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	2012      	movs	r0, #18
 800077e:	f001 fd9a 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000782:	2012      	movs	r0, #18
 8000784:	f001 fdb3 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000074 	.word	0x20000074
 80007a4:	40026410 	.word	0x40026410

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_DMA_Init+0x5c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <MX_DMA_Init+0x5c>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_DMA_Init+0x5c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2038      	movs	r0, #56	@ 0x38
 80007d0:	f001 fd71 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007d4:	2038      	movs	r0, #56	@ 0x38
 80007d6:	f001 fd8a 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	203b      	movs	r0, #59	@ 0x3b
 80007e0:	f001 fd69 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007e4:	203b      	movs	r0, #59	@ 0x3b
 80007e6:	f001 fd82 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2045      	movs	r0, #69	@ 0x45
 80007f0:	f001 fd61 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007f4:	2045      	movs	r0, #69	@ 0x45
 80007f6:	f001 fd7a 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b67      	ldr	r3, [pc, #412]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a66      	ldr	r2, [pc, #408]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b64      	ldr	r3, [pc, #400]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b60      	ldr	r3, [pc, #384]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a5f      	ldr	r2, [pc, #380]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b5d      	ldr	r3, [pc, #372]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b59      	ldr	r3, [pc, #356]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a58      	ldr	r2, [pc, #352]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b56      	ldr	r3, [pc, #344]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b52      	ldr	r3, [pc, #328]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a51      	ldr	r2, [pc, #324]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b4f      	ldr	r3, [pc, #316]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b4b      	ldr	r3, [pc, #300]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a4a      	ldr	r2, [pc, #296]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b48      	ldr	r3, [pc, #288]	@ (80009c0 <MX_GPIO_Init+0x1b8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ErrorLD_Pin|WarnLD_Pin|InfoLD_Pin|SDCardLD_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	211f      	movs	r1, #31
 80008ae:	4845      	ldr	r0, [pc, #276]	@ (80009c4 <MX_GPIO_Init+0x1bc>)
 80008b0:	f002 fae2 	bl	8002e78 <HAL_GPIO_WritePin>
                          |MemOrg_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AV3LD_Pin|AV2LD_Pin|AV1LD_Pin|MemCS_Pin
 80008b4:	2200      	movs	r2, #0
 80008b6:	211f      	movs	r1, #31
 80008b8:	4843      	ldr	r0, [pc, #268]	@ (80009c8 <MX_GPIO_Init+0x1c0>)
 80008ba:	f002 fadd 	bl	8002e78 <HAL_GPIO_WritePin>
                          |SpiCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|ActDa_Pin|ActLa_Pin|ActCk_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 4174 	mov.w	r1, #62464	@ 0xf400
 80008c4:	4841      	ldr	r0, [pc, #260]	@ (80009cc <MX_GPIO_Init+0x1c4>)
 80008c6:	f002 fad7 	bl	8002e78 <HAL_GPIO_WritePin>
                          |ActLd_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = ErrorLD_Pin|WarnLD_Pin|InfoLD_Pin|SDCardLD_Pin
 80008ca:	231f      	movs	r3, #31
 80008cc:	617b      	str	r3, [r7, #20]
                          |MemOrg_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4838      	ldr	r0, [pc, #224]	@ (80009c4 <MX_GPIO_Init+0x1bc>)
 80008e2:	f002 f92d 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = AV3LD_Pin|AV2LD_Pin|AV1LD_Pin|MemCS_Pin
 80008e6:	231f      	movs	r3, #31
 80008e8:	617b      	str	r3, [r7, #20]
                          |SpiCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4832      	ldr	r0, [pc, #200]	@ (80009c8 <MX_GPIO_Init+0x1c0>)
 80008fe:	f002 f91f 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8000902:	2304      	movs	r3, #4
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	482d      	ldr	r0, [pc, #180]	@ (80009cc <MX_GPIO_Init+0x1c4>)
 8000916:	f002 f913 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|ActDa_Pin|ActLa_Pin|ActCk_Pin
 800091a:	f44f 4374 	mov.w	r3, #62464	@ 0xf400
 800091e:	617b      	str	r3, [r7, #20]
                          |ActLd_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4826      	ldr	r0, [pc, #152]	@ (80009cc <MX_GPIO_Init+0x1c4>)
 8000934:	f002 f904 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	@ (80009c8 <MX_GPIO_Init+0x1c0>)
 8000956:	f002 f8f3 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = UsbM_Pin|UsbP_Pin;
 800095a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096c:	230a      	movs	r3, #10
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4814      	ldr	r0, [pc, #80]	@ (80009c8 <MX_GPIO_Init+0x1c0>)
 8000978:	f002 f8e2 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SdioDet_Pin;
 800097c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SdioDet_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_GPIO_Init+0x1c0>)
 8000992:	f002 f8d5 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Evt_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 80009a6:	230f      	movs	r3, #15
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Evt_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4806      	ldr	r0, [pc, #24]	@ (80009cc <MX_GPIO_Init+0x1c4>)
 80009b2:	f002 f8c5 	bl	8002b40 <HAL_GPIO_Init>

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	@ 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400

080009d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009d6:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <MX_I2C1_Init+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <MX_I2C1_Init+0x58>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_I2C1_Init+0x50>)
 8000a0e:	f002 fa4d 	bl	8002eac <HAL_I2C_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a18:	f000 f90a 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000d4 	.word	0x200000d4
 8000a24:	40005400 	.word	0x40005400
 8000a28:	000186a0 	.word	0x000186a0

08000a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <HAL_I2C_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12b      	bne.n	8000aa6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2cCk_Pin|I2cDa_Pin;
 8000a6a:	23c0      	movs	r3, #192	@ 0xc0
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6e:	2312      	movs	r3, #18
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <HAL_I2C_MspInit+0x8c>)
 8000a86:	f002 f85b 	bl	8002b40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 feed 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f83b 	bl	8000b40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f7ff fe9d 	bl	8000808 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ace:	f7ff fe6b 	bl	80007a8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ad2:	f7ff ff7d 	bl	80009d0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000ad6:	f000 f8b1 	bl	8000c3c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000ada:	f000 f95f 	bl	8000d9c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000ade:	f000 fa75 	bl	8000fcc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ae2:	f000 fdd1 	bl	8001688 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ae6:	f000 fdf9 	bl	80016dc <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000aea:	f007 fbc7 	bl	800827c <MX_FATFS_Init>
  MX_ADC1_Init();
 8000aee:	f7ff fd6f 	bl	80005d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000af2:	f000 fbcb 	bl	800128c <MX_TIM3_Init>
  MX_TIM10_Init();
 8000af6:	f000 fc3f 	bl	8001378 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000afa:	f000 fc8b 	bl	8001414 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ActLd_GPIO_Port, ActLd_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <main+0x80>)
 8000b06:	f002 f9b7 	bl	8002e78 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(ActuatorPin pin = ACT_PIN_A1; pin <= ACT_PIN_A8; pin++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e010      	b.n	8000b32 <main+0x76>
		  Actuators_SetPin(pin);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd12 	bl	800053c <Actuators_SetPin>
		  HAL_Delay(100);
 8000b18:	2064      	movs	r0, #100	@ 0x64
 8000b1a:	f000 ff33 	bl	8001984 <HAL_Delay>
		  Actuators_ResetPin(pin);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd29 	bl	8000578 <Actuators_ResetPin>
		  HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	@ 0x64
 8000b28:	f000 ff2c 	bl	8001984 <HAL_Delay>
	  for(ActuatorPin pin = ACT_PIN_A1; pin <= ACT_PIN_A8; pin++) {
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	d9eb      	bls.n	8000b10 <main+0x54>
 8000b38:	e7e7      	b.n	8000b0a <main+0x4e>
 8000b3a:	bf00      	nop
 8000b3c:	40020400 	.word	0x40020400

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	@ 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 fe49 	bl	80087e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <SystemClock_Config+0xec>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b8c:	4a27      	ldr	r2, [pc, #156]	@ (8000c2c <SystemClock_Config+0xec>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <SystemClock_Config+0xec>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc4:	23a8      	movs	r3, #168	@ 0xa8
 8000bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 faad 	bl	8003134 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000be0:	f000 f826 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2302      	movs	r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fd0f 	bl	8003624 <HAL_RCC_ClockConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c0c:	f000 f810 	bl	8000c30 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2000      	movs	r0, #0
 8000c16:	f002 fdeb 	bl	80037f0 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c1a:	f002 fe51 	bl	80038c0 <HAL_RCC_EnableCSS>
}
 8000c1e:	bf00      	nop
 8000c20:	3750      	adds	r7, #80	@ 0x50
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  RTC_TamperTypeDef sTamper = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2220      	movs	r2, #32
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fdc2 	bl	80087e6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c62:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c64:	4a36      	ldr	r2, [pc, #216]	@ (8000d40 <MX_RTC_Init+0x104>)
 8000c66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c6e:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c70:	227f      	movs	r2, #127	@ 0x7f
 8000c72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c76:	22ff      	movs	r2, #255	@ 0xff
 8000c78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c80:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c86:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000c8e:	f003 f865 	bl	8003d5c <HAL_RTC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c98:	f7ff ffca 	bl	8000c30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sTime.Minutes = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sTime.Seconds = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481f      	ldr	r0, [pc, #124]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000cc0:	f003 f8cf 	bl	8003e62 <HAL_RTC_SetTime>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000cca:	f7ff ffb1 	bl	8000c30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sDate.Date = 0x1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sDate.Year = 0x0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000cf0:	f003 f951 	bl	8003f96 <HAL_RTC_SetDate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000cfa:	f7ff ff99 	bl	8000c30 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	603b      	str	r3, [r7, #0]
  sTamper.PinSelection = RTC_TAMPERPIN_DEFAULT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <MX_RTC_Init+0x100>)
 8000d24:	f003 fa5c 	bl	80041e0 <HAL_RTCEx_SetTamper>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8000d2e:	f7ff ff7f 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	@ 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000128 	.word	0x20000128
 8000d40:	40002800 	.word	0x40002800

08000d44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <HAL_RTC_MspInit+0x50>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d111      	bne.n	8000d8a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d66:	2302      	movs	r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 ff03 	bl	8003b80 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d80:	f7ff ff56 	bl	8000c30 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <HAL_RTC_MspInit+0x54>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40002800 	.word	0x40002800
 8000d98:	42470e3c 	.word	0x42470e3c

08000d9c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDIO_Init 0 */
	hsd.Instance = SDIO;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000da2:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <MX_SDIO_SD_Init+0x4c>)
 8000da4:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */
	if (HAL_SD_Init(&hsd) == HAL_OK) {
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000dcc:	f003 fa65 	bl	800429a <HAL_SD_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <MX_SDIO_SD_Init+0x44>
		HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);
 8000dd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dda:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <MX_SDIO_SD_Init+0x48>)
 8000ddc:	f004 f836 	bl	8004e4c <HAL_SD_ConfigWideBusOperation>
  /* USER CODE END SDIO_Init 1 */
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000148 	.word	0x20000148
 8000de8:	40012c00 	.word	0x40012c00

08000dec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a68      	ldr	r2, [pc, #416]	@ (8000fac <HAL_SD_MspInit+0x1c0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	f040 80c9 	bne.w	8000fa2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b66      	ldr	r3, [pc, #408]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e18:	4a65      	ldr	r2, [pc, #404]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e20:	4b63      	ldr	r3, [pc, #396]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a5e      	ldr	r2, [pc, #376]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a57      	ldr	r2, [pc, #348]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <HAL_SD_MspInit+0x1c4>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000e64:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000e68:	617b      	str	r3, [r7, #20]
                          |SdioCk_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e76:	230c      	movs	r3, #12
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	484c      	ldr	r0, [pc, #304]	@ (8000fb4 <HAL_SD_MspInit+0x1c8>)
 8000e82:	f001 fe5d 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SdioCmd_Pin;
 8000e86:	2304      	movs	r3, #4
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e96:	230c      	movs	r3, #12
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SdioCmd_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4845      	ldr	r0, [pc, #276]	@ (8000fb8 <HAL_SD_MspInit+0x1cc>)
 8000ea2:	f001 fe4d 	bl	8002b40 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ea6:	4b45      	ldr	r3, [pc, #276]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ea8:	4a45      	ldr	r2, [pc, #276]	@ (8000fc0 <HAL_SD_MspInit+0x1d4>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000eac:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb4:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b40      	ldr	r3, [pc, #256]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ed6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000eda:	2220      	movs	r2, #32
 8000edc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000eea:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000ef2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ef8:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000efa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f00:	482e      	ldr	r0, [pc, #184]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000f02:	f001 fa0f 	bl	8002324 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000f0c:	f7ff fe90 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a2a      	ldr	r2, [pc, #168]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f16:	4a29      	ldr	r2, [pc, #164]	@ (8000fbc <HAL_SD_MspInit+0x1d0>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000fc8 <HAL_SD_MspInit+0x1dc>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f22:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f28:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f2c:	2240      	movs	r2, #64	@ 0x40
 8000f2e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f44:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f4c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f50:	2220      	movs	r2, #32
 8000f52:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f70:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f74:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f76:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f78:	f001 f9d4 	bl	8002324 <HAL_DMA_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000f82:	f7ff fe55 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <HAL_SD_MspInit+0x1d8>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2031      	movs	r0, #49	@ 0x31
 8000f98:	f001 f98d 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f9c:	2031      	movs	r0, #49	@ 0x31
 8000f9e:	f001 f9a6 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012c00 	.word	0x40012c00
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	200001cc 	.word	0x200001cc
 8000fc0:	40026458 	.word	0x40026458
 8000fc4:	2000022c 	.word	0x2000022c
 8000fc8:	400264a0 	.word	0x400264a0

08000fcc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fd2:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <MX_SPI1_Init+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ffc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_SPI1_Init+0x64>)
 8001018:	220a      	movs	r2, #10
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_SPI1_Init+0x64>)
 800101e:	f004 fc77 	bl	8005910 <HAL_SPI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001028:	f7ff fe02 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000028c 	.word	0x2000028c
 8001034:	40013000 	.word	0x40013000

08001038 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1d      	ldr	r2, [pc, #116]	@ (80010cc <HAL_SPI_MspInit+0x94>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d133      	bne.n	80010c2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_SPI_MspInit+0x98>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <HAL_SPI_MspInit+0x98>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_SPI_MspInit+0x98>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_SPI_MspInit+0x98>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <HAL_SPI_MspInit+0x98>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_SPI_MspInit+0x98>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SpiCk_Pin|SpiMISO_Pin|SpiMosi_Pin;
 8001092:	23e0      	movs	r3, #224	@ 0xe0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <HAL_SPI_MspInit+0x9c>)
 80010ae:	f001 fd47 	bl	8002b40 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2023      	movs	r0, #35	@ 0x23
 80010b8:	f001 f8fd 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010bc:	2023      	movs	r0, #35	@ 0x23
 80010be:	f001 f916 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013000 	.word	0x40013000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <HAL_MspInit+0x4c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <HAL_MspInit+0x4c>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800112c:	f002 fd0c 	bl	8003b48 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x8>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <MemManage_Handler+0x4>

08001144 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001182:	f000 fbdf 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <ADC_IRQHandler+0x10>)
 8001192:	f000 fc5e 	bl	8001a52 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000002c 	.word	0x2000002c

080011a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011a6:	f004 fdf7 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000032c 	.word	0x2000032c

080011b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80011ba:	f004 fded 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000374 	.word	0x20000374

080011c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <TIM3_IRQHandler+0x10>)
 80011ce:	f004 fde3 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002e4 	.word	0x200002e4

080011dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <SPI1_IRQHandler+0x10>)
 80011e2:	f004 fc1f 	bl	8005a24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000028c 	.word	0x2000028c

080011f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <USART1_IRQHandler+0x10>)
 80011f6:	f005 fbff 	bl	80069f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200003bc 	.word	0x200003bc

08001204 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <SDIO_IRQHandler+0x10>)
 800120a:	f003 fabf 	bl	800478c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000148 	.word	0x20000148

08001218 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <DMA2_Stream0_IRQHandler+0x10>)
 800121e:	f001 fa19 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000074 	.word	0x20000074

0800122c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <DMA2_Stream3_IRQHandler+0x10>)
 8001232:	f001 fa0f 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001cc 	.word	0x200001cc

08001240 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <DMA2_Stream6_IRQHandler+0x10>)
 8001246:	f001 fa05 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000022c 	.word	0x2000022c

08001254 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <USART6_IRQHandler+0x10>)
 800125a:	f005 fbcd 	bl	80069f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000404 	.word	0x20000404

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	@ 0x38
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012be:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <MX_TIM3_Init+0xe8>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ce:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e2:	4823      	ldr	r0, [pc, #140]	@ (8001370 <MX_TIM3_Init+0xe4>)
 80012e4:	f004 fcb0 	bl	8005c48 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012ee:	f7ff fc9f 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fc:	4619      	mov	r1, r3
 80012fe:	481c      	ldr	r0, [pc, #112]	@ (8001370 <MX_TIM3_Init+0xe4>)
 8001300:	f004 fefc 	bl	80060fc <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800130a:	f7ff fc91 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800130e:	4818      	ldr	r0, [pc, #96]	@ (8001370 <MX_TIM3_Init+0xe4>)
 8001310:	f004 fce9 	bl	8005ce6 <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800131a:	f7ff fc89 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	4619      	mov	r1, r3
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <MX_TIM3_Init+0xe4>)
 800132e:	f005 fa91 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001338:	f7ff fc7a 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133c:	2360      	movs	r3, #96	@ 0x60
 800133e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM3_Init+0xe4>)
 8001354:	f004 fe10 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800135e:	f7ff fc67 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM3_Init+0xe4>)
 8001364:	f000 f908 	bl	8001578 <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	@ 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002e4 	.word	0x200002e4
 8001374:	40000400 	.word	0x40000400

08001378 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <MX_TIM10_Init+0x94>)
 8001392:	4a1f      	ldr	r2, [pc, #124]	@ (8001410 <MX_TIM10_Init+0x98>)
 8001394:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_TIM10_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_TIM10_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_TIM10_Init+0x94>)
 80013a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <MX_TIM10_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_TIM10_Init+0x94>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013b6:	4815      	ldr	r0, [pc, #84]	@ (800140c <MX_TIM10_Init+0x94>)
 80013b8:	f004 fc46 	bl	8005c48 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80013c2:	f7ff fc35 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80013c6:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_TIM10_Init+0x94>)
 80013c8:	f004 fc8d 	bl	8005ce6 <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80013d2:	f7ff fc2d 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	@ 0x60
 80013d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	@ (800140c <MX_TIM10_Init+0x94>)
 80013ee:	f004 fdc3 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013f8:	f7ff fc1a 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <MX_TIM10_Init+0x94>)
 80013fe:	f000 f8bb 	bl	8001578 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000032c 	.word	0x2000032c
 8001410:	40014400 	.word	0x40014400

08001414 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_TIM11_Init+0x94>)
 800142e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <MX_TIM11_Init+0x98>)
 8001430:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <MX_TIM11_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <MX_TIM11_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM11_Init+0x94>)
 8001440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_TIM11_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <MX_TIM11_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001452:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <MX_TIM11_Init+0x94>)
 8001454:	f004 fbf8 	bl	8005c48 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800145e:	f7ff fbe7 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001462:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <MX_TIM11_Init+0x94>)
 8001464:	f004 fc3f 	bl	8005ce6 <HAL_TIM_PWM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800146e:	f7ff fbdf 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	@ 0x60
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM11_Init+0x94>)
 800148a:	f004 fd75 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001494:	f7ff fbcc 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM11_Init+0x94>)
 800149a:	f000 f86d 	bl	8001578 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000374 	.word	0x20000374
 80014ac:	40014800 	.word	0x40014800

080014b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <HAL_TIM_Base_MspInit+0xb8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d116      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a28      	ldr	r2, [pc, #160]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	201d      	movs	r0, #29
 80014e4:	f000 fee7 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e8:	201d      	movs	r0, #29
 80014ea:	f000 ff00 	bl	80022ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80014ee:	e036      	b.n	800155e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <HAL_TIM_Base_MspInit+0xc0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d116      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	4a1a      	ldr	r2, [pc, #104]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	6453      	str	r3, [r2, #68]	@ 0x44
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2019      	movs	r0, #25
 800151c:	f000 fecb 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001520:	2019      	movs	r0, #25
 8001522:	f000 fee4 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 8001526:	e01a      	b.n	800155e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <HAL_TIM_Base_MspInit+0xc4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d115      	bne.n	800155e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_TIM_Base_MspInit+0xbc>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	201a      	movs	r0, #26
 8001554:	f000 feaf 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001558:	201a      	movs	r0, #26
 800155a:	f000 fec8 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40000400 	.word	0x40000400
 800156c:	40023800 	.word	0x40023800
 8001570:	40014400 	.word	0x40014400
 8001574:	40014800 	.word	0x40014800

08001578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a37      	ldr	r2, [pc, #220]	@ (8001674 <HAL_TIM_MspPostInit+0xfc>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d11e      	bne.n	80015d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a35      	ldr	r2, [pc, #212]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b6:	2310      	movs	r3, #16
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c6:	2302      	movs	r3, #2
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	482a      	ldr	r0, [pc, #168]	@ (800167c <HAL_TIM_MspPostInit+0x104>)
 80015d2:	f001 fab5 	bl	8002b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80015d6:	e048      	b.n	800166a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <HAL_TIM_MspPostInit+0x108>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11f      	bne.n	8001622 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001610:	2303      	movs	r3, #3
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4818      	ldr	r0, [pc, #96]	@ (800167c <HAL_TIM_MspPostInit+0x104>)
 800161c:	f001 fa90 	bl	8002b40 <HAL_GPIO_Init>
}
 8001620:	e023      	b.n	800166a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_TIM_MspPostInit+0x10c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d11e      	bne.n	800166a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	6313      	str	r3, [r2, #48]	@ 0x30
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_TIM_MspPostInit+0x100>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800165a:	2303      	movs	r3, #3
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	@ (800167c <HAL_TIM_MspPostInit+0x104>)
 8001666:	f001 fa6b 	bl	8002b40 <HAL_GPIO_Init>
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40000400 	.word	0x40000400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020400 	.word	0x40020400
 8001680:	40014400 	.word	0x40014400
 8001684:	40014800 	.word	0x40014800

08001688 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_USART1_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f005 f94a 	bl	8006958 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f7ff fab1 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003bc 	.word	0x200003bc
 80016d8:	40011000 	.word	0x40011000

080016dc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_USART6_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART6_UART_Init+0x4c>)
 8001714:	f005 f920 	bl	8006958 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f7ff fa87 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000404 	.word	0x20000404
 800172c:	40011400 	.word	0x40011400

08001730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	@ 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3a      	ldr	r2, [pc, #232]	@ (8001838 <HAL_UART_MspInit+0x108>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d135      	bne.n	80017be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_UART_MspInit+0x10c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	4a38      	ldr	r2, [pc, #224]	@ (800183c <HAL_UART_MspInit+0x10c>)
 800175c:	f043 0310 	orr.w	r3, r3, #16
 8001760:	6453      	str	r3, [r2, #68]	@ 0x44
 8001762:	4b36      	ldr	r3, [pc, #216]	@ (800183c <HAL_UART_MspInit+0x10c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4b32      	ldr	r3, [pc, #200]	@ (800183c <HAL_UART_MspInit+0x10c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a31      	ldr	r2, [pc, #196]	@ (800183c <HAL_UART_MspInit+0x10c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <HAL_UART_MspInit+0x10c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800178a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179c:	2307      	movs	r3, #7
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4826      	ldr	r0, [pc, #152]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017a8:	f001 f9ca 	bl	8002b40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2025      	movs	r0, #37	@ 0x25
 80017b2:	f000 fd80 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b6:	2025      	movs	r0, #37	@ 0x25
 80017b8:	f000 fd99 	bl	80022ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80017bc:	e038      	b.n	8001830 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a20      	ldr	r2, [pc, #128]	@ (8001844 <HAL_UART_MspInit+0x114>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d133      	bne.n	8001830 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_UART_MspInit+0x10c>)
 80017ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d0:	4a1a      	ldr	r2, [pc, #104]	@ (800183c <HAL_UART_MspInit+0x10c>)
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_UART_MspInit+0x10c>)
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_UART_MspInit+0x10c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	4a13      	ldr	r2, [pc, #76]	@ (800183c <HAL_UART_MspInit+0x10c>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UART_MspInit+0x10c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001800:	23c0      	movs	r3, #192	@ 0xc0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001810:	2308      	movs	r3, #8
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <HAL_UART_MspInit+0x118>)
 800181c:	f001 f990 	bl	8002b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2047      	movs	r0, #71	@ 0x47
 8001826:	f000 fd46 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800182a:	2047      	movs	r0, #71	@ 0x47
 800182c:	f000 fd5f 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 8001830:	bf00      	nop
 8001832:	3730      	adds	r7, #48	@ 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40011000 	.word	0x40011000
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000
 8001844:	40011400 	.word	0x40011400
 8001848:	40020800 	.word	0x40020800

0800184c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800184c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001884 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001850:	f7ff fd0a 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001856:	490d      	ldr	r1, [pc, #52]	@ (800188c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800186c:	4c0a      	ldr	r4, [pc, #40]	@ (8001898 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f006 ffbd 	bl	80087f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187e:	f7ff f91d 	bl	8000abc <main>
  bx  lr    
 8001882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001890:	0800889c 	.word	0x0800889c
  ldr r2, =_sbss
 8001894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001898:	2000046c 	.word	0x2000046c

0800189c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800189c:	e7fe      	b.n	800189c <DMA1_Stream0_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <HAL_Init+0x40>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_Init+0x40>)
 80018b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_Init+0x40>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 fce9 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fc00 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fd01 	bl	800230a <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001920:	f000 fcc9 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000000 	.word	0x20000000
 800193c:	20000008 	.word	0x20000008
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	2000044c 	.word	0x2000044c

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000044c 	.word	0x2000044c

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008

080019cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e033      	b.n	8001a4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fe42 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a12:	f023 0302 	bic.w	r3, r3, #2
 8001a16:	f043 0202 	orr.w	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fa68 	bl	8001ef4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a3a:	e001      	b.n	8001a40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d049      	beq.n	8001b1c <HAL_ADC_IRQHandler+0xca>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d046      	beq.n	8001b1c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d12b      	bne.n	8001b0c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d127      	bne.n	8001b0c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d119      	bne.n	8001b0c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0220 	bic.w	r2, r2, #32
 8001ae6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f8b0 	bl	8001c72 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0212 	mvn.w	r2, #18
 8001b1a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d057      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x190>
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d054      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d139      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d12b      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d124      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d11d      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fa8a 	bl	80020ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 020c 	mvn.w	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d017      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x1d6>
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d014      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10d      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f834 	bl	8001c86 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0201 	mvn.w	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c36:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d015      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x218>
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c48:	f043 0202 	orr.w	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0220 	mvn.w	r2, #32
 8001c58:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f81d 	bl	8001c9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0220 	mvn.w	r2, #32
 8001c68:	601a      	str	r2, [r3, #0]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1c>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e105      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x228>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d925      	bls.n	8001d28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b1e      	subs	r3, #30
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	400a      	ands	r2, r1
 8001d00:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4403      	add	r3, r0
 8001d1a:	3b1e      	subs	r3, #30
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	e022      	b.n	8001d6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	400a      	ands	r2, r1
 8001d4a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4403      	add	r3, r0
 8001d64:	409a      	lsls	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d824      	bhi.n	8001dc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b05      	subs	r3, #5
 8001d88:	221f      	movs	r2, #31
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	400a      	ands	r2, r1
 8001d96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b05      	subs	r3, #5
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dbe:	e04c      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d824      	bhi.n	8001e12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b23      	subs	r3, #35	@ 0x23
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b23      	subs	r3, #35	@ 0x23
 8001e04:	fa00 f203 	lsl.w	r2, r0, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e10:	e023      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	3b41      	subs	r3, #65	@ 0x41
 8001e24:	221f      	movs	r2, #31
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	400a      	ands	r2, r1
 8001e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b41      	subs	r3, #65	@ 0x41
 8001e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x234>)
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x238>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1cc>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b12      	cmp	r3, #18
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x238>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d123      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d003      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x1e6>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b11      	cmp	r3, #17
 8001e94:	d11b      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d111      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_ADC_ConfigChannel+0x23c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a10      	ldr	r2, [pc, #64]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x240>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	0c9a      	lsrs	r2, r3, #18
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40012300 	.word	0x40012300
 8001ee8:	40012000 	.word	0x40012000
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	431bde83 	.word	0x431bde83

08001ef4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001efc:	4b79      	ldr	r3, [pc, #484]	@ (80020e4 <ADC_Init+0x1f0>)
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	021a      	lsls	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	4a58      	ldr	r2, [pc, #352]	@ (80020e8 <ADC_Init+0x1f4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6899      	ldr	r1, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	e00f      	b.n	8001ff2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0202 	bic.w	r2, r2, #2
 8002000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e1b      	ldrb	r3, [r3, #24]
 800200c:	005a      	lsls	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800202e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800203e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	3b01      	subs	r3, #1
 800204c:	035a      	lsls	r2, r3, #13
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	e007      	b.n	8002068 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002066:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	3b01      	subs	r3, #1
 8002084:	051a      	lsls	r2, r3, #20
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800209c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020aa:	025a      	lsls	r2, r3, #9
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	029a      	lsls	r2, r3, #10
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40012300 	.word	0x40012300
 80020e8:	0f000001 	.word	0x0f000001

080020ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002132:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60d3      	str	r3, [r2, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	@ (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	@ (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	@ 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff fb1c 	bl	800196c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e099      	b.n	8002474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002360:	e00f      	b.n	8002382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002362:	f7ff fb03 	bl	800196c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b05      	cmp	r3, #5
 800236e:	d908      	bls.n	8002382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2203      	movs	r2, #3
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e078      	b.n	8002474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e8      	bne.n	8002362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <HAL_DMA_Init+0x158>)
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d107      	bne.n	80023ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	4313      	orrs	r3, r2
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0307 	bic.w	r3, r3, #7
 8002402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	2b04      	cmp	r3, #4
 8002414:	d117      	bne.n	8002446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb0d 	bl	8002a48 <DMA_CheckFifoParam>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002442:	2301      	movs	r3, #1
 8002444:	e016      	b.n	8002474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fac4 	bl	80029dc <DMA_CalcBaseAndBitshift>
 8002454:	4603      	mov	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	223f      	movs	r2, #63	@ 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f010803f 	.word	0xf010803f

08002480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Start_IT+0x26>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e040      	b.n	8002528 <HAL_DMA_Start_IT+0xa8>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d12f      	bne.n	800251a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa56 	bl	8002980 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	223f      	movs	r2, #63	@ 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0216 	orr.w	r2, r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0208 	orr.w	r2, r2, #8
 8002506:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e005      	b.n	8002526 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800253e:	f7ff fa15 	bl	800196c <HAL_GetTick>
 8002542:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d008      	beq.n	8002562 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2280      	movs	r2, #128	@ 0x80
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e052      	b.n	8002608 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0216 	bic.w	r2, r2, #22
 8002570:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002580:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_DMA_Abort+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0208 	bic.w	r2, r2, #8
 80025a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b2:	e013      	b.n	80025dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b4:	f7ff f9da 	bl	800196c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d90c      	bls.n	80025dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e015      	b.n	8002608 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e4      	bne.n	80025b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	223f      	movs	r2, #63	@ 0x3f
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d004      	beq.n	800262e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00c      	b.n	8002648 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2205      	movs	r2, #5
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002660:	4b8e      	ldr	r3, [pc, #568]	@ (800289c <HAL_DMA_IRQHandler+0x248>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a8e      	ldr	r2, [pc, #568]	@ (80028a0 <HAL_DMA_IRQHandler+0x24c>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a9b      	lsrs	r3, r3, #10
 800266c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2208      	movs	r2, #8
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2208      	movs	r2, #8
 80026ae:	409a      	lsls	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	2201      	movs	r2, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f043 0202 	orr.w	r2, r3, #2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2204      	movs	r2, #4
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2204      	movs	r2, #4
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002724:	f043 0204 	orr.w	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	2210      	movs	r2, #16
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d043      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03c      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	2210      	movs	r2, #16
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d024      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e01f      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e016      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0208 	bic.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2220      	movs	r2, #32
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 808f 	beq.w	80028f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8087 	beq.w	80028f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	2220      	movs	r2, #32
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d136      	bne.n	800286c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0216 	bic.w	r2, r2, #22
 800280c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_DMA_IRQHandler+0x1da>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0208 	bic.w	r2, r2, #8
 800283c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	223f      	movs	r2, #63	@ 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285e:	2b00      	cmp	r3, #0
 8002860:	d07e      	beq.n	8002960 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
        }
        return;
 800286a:	e079      	b.n	8002960 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	2b00      	cmp	r3, #0
 800288e:	d031      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e02c      	b.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
 800289a:	bf00      	nop
 800289c:	20000000 	.word	0x20000000
 80028a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e01e      	b.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0210 	bic.w	r2, r2, #16
 80028d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d032      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2205      	movs	r2, #5
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3301      	adds	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	d307      	bcc.n	800293c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f2      	bne.n	8002920 <HAL_DMA_IRQHandler+0x2cc>
 800293a:	e000      	b.n	800293e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800293c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	e000      	b.n	8002962 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002960:	bf00      	nop
    }
  }
}
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800299c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b40      	cmp	r3, #64	@ 0x40
 80029ac:	d108      	bne.n	80029c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029be:	e007      	b.n	80029d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	3b10      	subs	r3, #16
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <DMA_CalcBaseAndBitshift+0x64>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029f6:	4a13      	ldr	r2, [pc, #76]	@ (8002a44 <DMA_CalcBaseAndBitshift+0x68>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d909      	bls.n	8002a1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a1c:	e007      	b.n	8002a2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	aaaaaaab 	.word	0xaaaaaaab
 8002a44:	08008870 	.word	0x08008870

08002a48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11f      	bne.n	8002aa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d856      	bhi.n	8002b16 <DMA_CheckFifoParam+0xce>
 8002a68:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x28>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a93 	.word	0x08002a93
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002b17 	.word	0x08002b17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d046      	beq.n	8002b1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e043      	b.n	8002b1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a9a:	d140      	bne.n	8002b1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa0:	e03d      	b.n	8002b1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aaa:	d121      	bne.n	8002af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d837      	bhi.n	8002b22 <DMA_CheckFifoParam+0xda>
 8002ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <DMA_CheckFifoParam+0x70>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002acf 	.word	0x08002acf
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002ae1 	.word	0x08002ae1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e030      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d025      	beq.n	8002b26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ade:	e022      	b.n	8002b26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ae8:	d11f      	bne.n	8002b2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aee:	e01c      	b.n	8002b2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d903      	bls.n	8002afe <DMA_CheckFifoParam+0xb6>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d003      	beq.n	8002b04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002afc:	e018      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      break;
 8002b02:	e015      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00e      	beq.n	8002b2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e00b      	b.n	8002b2e <DMA_CheckFifoParam+0xe6>
      break;
 8002b16:	bf00      	nop
 8002b18:	e00a      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e008      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e006      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b22:	bf00      	nop
 8002b24:	e004      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
 8002b28:	e002      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	e159      	b.n	8002e10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	f040 8148 	bne.w	8002e0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d005      	beq.n	8002b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d130      	bne.n	8002bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d017      	beq.n	8002c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d123      	bne.n	8002c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	08da      	lsrs	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3208      	adds	r2, #8
 8002c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	08da      	lsrs	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3208      	adds	r2, #8
 8002c7e:	69b9      	ldr	r1, [r7, #24]
 8002c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a2 	beq.w	8002e0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b57      	ldr	r3, [pc, #348]	@ (8002e28 <HAL_GPIO_Init+0x2e8>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	4a56      	ldr	r2, [pc, #344]	@ (8002e28 <HAL_GPIO_Init+0x2e8>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd6:	4b54      	ldr	r3, [pc, #336]	@ (8002e28 <HAL_GPIO_Init+0x2e8>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce2:	4a52      	ldr	r2, [pc, #328]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a49      	ldr	r2, [pc, #292]	@ (8002e30 <HAL_GPIO_Init+0x2f0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d019      	beq.n	8002d42 <HAL_GPIO_Init+0x202>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a48      	ldr	r2, [pc, #288]	@ (8002e34 <HAL_GPIO_Init+0x2f4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_GPIO_Init+0x1fe>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a47      	ldr	r2, [pc, #284]	@ (8002e38 <HAL_GPIO_Init+0x2f8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00d      	beq.n	8002d3a <HAL_GPIO_Init+0x1fa>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a46      	ldr	r2, [pc, #280]	@ (8002e3c <HAL_GPIO_Init+0x2fc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <HAL_GPIO_Init+0x1f6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a45      	ldr	r2, [pc, #276]	@ (8002e40 <HAL_GPIO_Init+0x300>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_GPIO_Init+0x1f2>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e008      	b.n	8002d44 <HAL_GPIO_Init+0x204>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x204>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e004      	b.n	8002d44 <HAL_GPIO_Init+0x204>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e002      	b.n	8002d44 <HAL_GPIO_Init+0x204>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_GPIO_Init+0x204>
 8002d42:	2300      	movs	r3, #0
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f002 0203 	and.w	r2, r2, #3
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	4093      	lsls	r3, r2
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d54:	4935      	ldr	r1, [pc, #212]	@ (8002e2c <HAL_GPIO_Init+0x2ec>)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d62:	4b38      	ldr	r3, [pc, #224]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d86:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db0:	4a24      	ldr	r2, [pc, #144]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db6:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dda:	4a1a      	ldr	r2, [pc, #104]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de0:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e04:	4a0f      	ldr	r2, [pc, #60]	@ (8002e44 <HAL_GPIO_Init+0x304>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	f67f aea2 	bls.w	8002b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40013800 	.word	0x40013800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40013c00 	.word	0x40013c00

08002e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e001      	b.n	8002e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e12b      	b.n	8003116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fdaa 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f10:	f000 fdf2 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a81      	ldr	r2, [pc, #516]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d807      	bhi.n	8002f30 <HAL_I2C_Init+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a80      	ldr	r2, [pc, #512]	@ (8003124 <HAL_I2C_Init+0x278>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e006      	b.n	8002f3e <HAL_I2C_Init+0x92>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a7d      	ldr	r2, [pc, #500]	@ (8003128 <HAL_I2C_Init+0x27c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0e7      	b.n	8003116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a78      	ldr	r2, [pc, #480]	@ (800312c <HAL_I2C_Init+0x280>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a6a      	ldr	r2, [pc, #424]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d802      	bhi.n	8002f80 <HAL_I2C_Init+0xd4>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	e009      	b.n	8002f94 <HAL_I2C_Init+0xe8>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	4a69      	ldr	r2, [pc, #420]	@ (8003130 <HAL_I2C_Init+0x284>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	3301      	adds	r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fa6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	495c      	ldr	r1, [pc, #368]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d819      	bhi.n	8002fe8 <HAL_I2C_Init+0x13c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1e59      	subs	r1, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fc8:	400b      	ands	r3, r1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_I2C_Init+0x138>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e59      	subs	r1, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe2:	e051      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e04f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_I2C_Init+0x168>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_I2C_Init+0x18e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x196>
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_I2C_Init+0x1bc>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e58      	subs	r0, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	fbb0 f3f3 	udiv	r3, r0, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6809      	ldr	r1, [r1, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6911      	ldr	r1, [r2, #16]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	000186a0 	.word	0x000186a0
 8003124:	001e847f 	.word	0x001e847f
 8003128:	003d08ff 	.word	0x003d08ff
 800312c:	431bde83 	.word	0x431bde83
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e267      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003152:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d00c      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b85      	ldr	r3, [pc, #532]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	2b08      	cmp	r3, #8
 8003168:	d112      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b82      	ldr	r3, [pc, #520]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b7e      	ldr	r3, [pc, #504]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e242      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b70      	ldr	r3, [pc, #448]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6d      	ldr	r3, [pc, #436]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b69      	ldr	r3, [pc, #420]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a68      	ldr	r2, [pc, #416]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fbbe 	bl	800196c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fbba 	bl	800196c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	@ 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e207      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5b      	ldr	r3, [pc, #364]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fbaa 	bl	800196c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fba6 	bl	800196c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1f3      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b51      	ldr	r3, [pc, #324]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b44      	ldr	r3, [pc, #272]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1c7      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4937      	ldr	r1, [pc, #220]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_OscConfig+0x244>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fb5f 	bl	800196c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe fb5b 	bl	800196c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1a8      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b28      	ldr	r3, [pc, #160]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4925      	ldr	r1, [pc, #148]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <HAL_RCC_OscConfig+0x244>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fb3e 	bl	800196c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fe fb3a 	bl	800196c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e187      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d036      	beq.n	800338c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <HAL_RCC_OscConfig+0x248>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fb1e 	bl	800196c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe fb1a 	bl	800196c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e167      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
 8003352:	e01b      	b.n	800338c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_RCC_OscConfig+0x248>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7fe fb07 	bl	800196c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e00e      	b.n	8003380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003362:	f7fe fb03 	bl	800196c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d907      	bls.n	8003380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e150      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b88      	ldr	r3, [pc, #544]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ea      	bne.n	8003362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8097 	beq.w	80034c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b81      	ldr	r3, [pc, #516]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b7d      	ldr	r3, [pc, #500]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	4a7c      	ldr	r2, [pc, #496]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ba:	4b7a      	ldr	r3, [pc, #488]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b77      	ldr	r3, [pc, #476]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b74      	ldr	r3, [pc, #464]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a73      	ldr	r2, [pc, #460]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fac3 	bl	800196c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fabf 	bl	800196c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e10c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x2ea>
 8003410:	4b64      	ldr	r3, [pc, #400]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	4a63      	ldr	r2, [pc, #396]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	@ 0x70
 800341c:	e01c      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x30c>
 8003426:	4b5f      	ldr	r3, [pc, #380]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	4a5e      	ldr	r2, [pc, #376]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	@ 0x70
 8003432:	4b5c      	ldr	r3, [pc, #368]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a5b      	ldr	r2, [pc, #364]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 8003440:	4b58      	ldr	r3, [pc, #352]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	4a57      	ldr	r2, [pc, #348]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	@ 0x70
 800344c:	4b55      	ldr	r3, [pc, #340]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a54      	ldr	r2, [pc, #336]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe fa84 	bl	800196c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fe fa80 	bl	800196c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0cb      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCC_OscConfig+0x334>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fe fa6e 	bl	800196c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe fa6a 	bl	800196c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0b5      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	4b3e      	ldr	r3, [pc, #248]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a1 	beq.w	8003614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d2:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d05c      	beq.n	8003598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d141      	bne.n	800356a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fa3e 	bl	800196c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fa3a 	bl	800196c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e087      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	491b      	ldr	r1, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x478>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe fa13 	bl	800196c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe fa0f 	bl	800196c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e05c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x416>
 8003568:	e054      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_RCC_OscConfig+0x478>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe f9fc 	bl	800196c <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f9f8 	bl	800196c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e045      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
 8003596:	e03d      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e038      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x4ec>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d028      	beq.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d121      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cc      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b68      	ldr	r3, [pc, #416]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d90c      	bls.n	8003660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b65      	ldr	r3, [pc, #404]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a58      	ldr	r2, [pc, #352]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800369a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d044      	beq.n	8003744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d119      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b3f      	ldr	r3, [pc, #252]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e067      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4934      	ldr	r1, [pc, #208]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003714:	f7fe f92a 	bl	800196c <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe f926 	bl	800196c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e04f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b25      	ldr	r3, [pc, #148]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d20c      	bcs.n	800376c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003796:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f895 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe f88a 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08008858 	.word	0x08008858
 80037e8:	20000000 	.word	0x20000000
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	@ 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d129      	bne.n	8003856 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	4b2b      	ldr	r3, [pc, #172]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b28      	ldr	r3, [pc, #160]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800381e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003830:	2300      	movs	r3, #0
 8003832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4619      	mov	r1, r3
 800383a:	481f      	ldr	r0, [pc, #124]	@ (80038b8 <HAL_RCC_MCOConfig+0xc8>)
 800383c:	f7ff f980 	bl	8002b40 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003840:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	430b      	orrs	r3, r1
 800384e:	4919      	ldr	r1, [pc, #100]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003854:	e029      	b.n	80038aa <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	4b16      	ldr	r3, [pc, #88]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6313      	str	r3, [r2, #48]	@ 0x30
 8003866:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003878:	2302      	movs	r3, #2
 800387a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003884:	2300      	movs	r3, #0
 8003886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	4619      	mov	r1, r3
 800388e:	480b      	ldr	r0, [pc, #44]	@ (80038bc <HAL_RCC_MCOConfig+0xcc>)
 8003890:	f7ff f956 	bl	8002b40 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003894:	4b07      	ldr	r3, [pc, #28]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	00d9      	lsls	r1, r3, #3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	430b      	orrs	r3, r1
 80038a4:	4903      	ldr	r1, [pc, #12]	@ (80038b4 <HAL_RCC_MCOConfig+0xc4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
}
 80038aa:	bf00      	nop
 80038ac:	3730      	adds	r7, #48	@ 0x30
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40020000 	.word	0x40020000
 80038bc:	40020800 	.word	0x40020800

080038c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <HAL_RCC_EnableCSS+0x14>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	4247004c 	.word	0x4247004c

080038d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b094      	sub	sp, #80	@ 0x50
 80038de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e4:	2300      	movs	r3, #0
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e8:	2300      	movs	r3, #0
 80038ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f0:	4b79      	ldr	r3, [pc, #484]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d00d      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x40>
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	f200 80e1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x34>
 8003906:	2b04      	cmp	r3, #4
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x3a>
 800390a:	e0db      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b73      	ldr	r3, [pc, #460]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x204>)
 800390e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003910:	e0db      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003912:	4b72      	ldr	r3, [pc, #456]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x204>)
 8003914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003916:	e0d8      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003918:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003922:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	099b      	lsrs	r3, r3, #6
 8003934:	2200      	movs	r2, #0
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003938:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	633b      	str	r3, [r7, #48]	@ 0x30
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	@ 0x34
 8003946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	0159      	lsls	r1, r3, #5
 8003958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395c:	0150      	lsls	r0, r2, #5
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4621      	mov	r1, r4
 8003964:	1a51      	subs	r1, r2, r1
 8003966:	6139      	str	r1, [r7, #16]
 8003968:	4629      	mov	r1, r5
 800396a:	eb63 0301 	sbc.w	r3, r3, r1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800397c:	4659      	mov	r1, fp
 800397e:	018b      	lsls	r3, r1, #6
 8003980:	4651      	mov	r1, sl
 8003982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003986:	4651      	mov	r1, sl
 8003988:	018a      	lsls	r2, r1, #6
 800398a:	4651      	mov	r1, sl
 800398c:	ebb2 0801 	subs.w	r8, r2, r1
 8003990:	4659      	mov	r1, fp
 8003992:	eb63 0901 	sbc.w	r9, r3, r1
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039aa:	4690      	mov	r8, r2
 80039ac:	4699      	mov	r9, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	eb18 0303 	adds.w	r3, r8, r3
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	462b      	mov	r3, r5
 80039b8:	eb49 0303 	adc.w	r3, r9, r3
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ca:	4629      	mov	r1, r5
 80039cc:	028b      	lsls	r3, r1, #10
 80039ce:	4621      	mov	r1, r4
 80039d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d4:	4621      	mov	r1, r4
 80039d6:	028a      	lsls	r2, r1, #10
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039de:	2200      	movs	r2, #0
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039e8:	f7fc fbf4 	bl	80001d4 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f4:	e058      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	4611      	mov	r1, r2
 8003a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	0159      	lsls	r1, r3, #5
 8003a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a22:	0150      	lsls	r0, r2, #5
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4641      	mov	r1, r8
 8003a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a2e:	4649      	mov	r1, r9
 8003a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a48:	ebb2 040a 	subs.w	r4, r2, sl
 8003a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	00eb      	lsls	r3, r5, #3
 8003a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a5e:	00e2      	lsls	r2, r4, #3
 8003a60:	4614      	mov	r4, r2
 8003a62:	461d      	mov	r5, r3
 8003a64:	4643      	mov	r3, r8
 8003a66:	18e3      	adds	r3, r4, r3
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	eb45 0303 	adc.w	r3, r5, r3
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a92:	2200      	movs	r2, #0
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	61fa      	str	r2, [r7, #28]
 8003a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a9c:	f7fc fb9a 	bl	80001d4 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3750      	adds	r7, #80	@ 0x50
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	@ (8003af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000000 	.word	0x20000000

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003afc:	f7ff fff0 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0a9b      	lsrs	r3, r3, #10
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08008868 	.word	0x08008868

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b24:	f7ff ffdc 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0b5b      	lsrs	r3, r3, #13
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	08008868 	.word	0x08008868

08003b48 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b54:	2b80      	cmp	r3, #128	@ 0x80
 8003b56:	d104      	bne.n	8003b62 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003b58:	f000 f80a 	bl	8003b70 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	701a      	strb	r2, [r3, #0]
  }
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	4002380e 	.word	0x4002380e

08003b70 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d035      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ba8:	4b67      	ldr	r3, [pc, #412]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bae:	f7fd fedd 	bl	800196c <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bb6:	f7fd fed9 	bl	800196c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0ba      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bc8:	4b60      	ldr	r3, [pc, #384]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	019a      	lsls	r2, r3, #6
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	071b      	lsls	r3, r3, #28
 8003be0:	495a      	ldr	r1, [pc, #360]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003be8:	4b57      	ldr	r3, [pc, #348]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bee:	f7fd febd 	bl	800196c <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bf6:	f7fd feb9 	bl	800196c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e09a      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c08:	4b50      	ldr	r3, [pc, #320]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8083 	beq.w	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b49      	ldr	r3, [pc, #292]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	4a48      	ldr	r2, [pc, #288]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c32:	4b46      	ldr	r3, [pc, #280]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c3e:	4b44      	ldr	r3, [pc, #272]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a43      	ldr	r2, [pc, #268]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4a:	f7fd fe8f 	bl	800196c <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fd fe8b 	bl	800196c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e06c      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c64:	4b3a      	ldr	r3, [pc, #232]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c70:	4b36      	ldr	r3, [pc, #216]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02f      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c98:	4b2e      	ldr	r3, [pc, #184]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ca4:	4a29      	ldr	r2, [pc, #164]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003caa:	4b28      	ldr	r3, [pc, #160]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d114      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fe59 	bl	800196c <HAL_GetTick>
 8003cba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fd fe55 	bl	800196c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e034      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ee      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cec:	d10d      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cee:	4b17      	ldr	r3, [pc, #92]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d02:	4912      	ldr	r1, [pc, #72]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]
 8003d08:	e005      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d14:	6093      	str	r3, [r2, #8]
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	490a      	ldr	r1, [pc, #40]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7c1a      	ldrb	r2, [r3, #16]
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d3a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	42470068 	.word	0x42470068
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40007000 	.word	0x40007000
 8003d54:	42470e40 	.word	0x42470e40
 8003d58:	424711e0 	.word	0x424711e0

08003d5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e073      	b.n	8003e5a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7f5b      	ldrb	r3, [r3, #29]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc ffde 	bl	8000d44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d055      	beq.n	8003e48 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	22ca      	movs	r2, #202	@ 0xca
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2253      	movs	r2, #83	@ 0x53
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f99d 	bl	80040ec <RTC_EnterInitMode>
 8003db2:	4603      	mov	r3, r0
 8003db4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d12c      	bne.n	8003e16 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	041a      	lsls	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9a4 	bl	800415a <RTC_ExitInitMode>
 8003e12:	4603      	mov	r3, r0
 8003e14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d110      	bne.n	8003e3e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e2a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	22ff      	movs	r2, #255	@ 0xff
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e46:	e001      	b.n	8003e4c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e62:	b590      	push	{r4, r7, lr}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	7f1b      	ldrb	r3, [r3, #28]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_RTC_SetTime+0x1c>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e087      	b.n	8003f8e <HAL_RTC_SetTime+0x12c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2202      	movs	r2, #2
 8003e88:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d126      	bne.n	8003ede <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f97b 	bl	80041a4 <RTC_ByteToBcd2>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f974 	bl	80041a4 <RTC_ByteToBcd2>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ec0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	789b      	ldrb	r3, [r3, #2]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f96c 	bl	80041a4 <RTC_ByteToBcd2>
 8003ecc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ece:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	78db      	ldrb	r3, [r3, #3]
 8003ed6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e018      	b.n	8003f10 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003efe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f04:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	78db      	ldrb	r3, [r3, #3]
 8003f0a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	22ca      	movs	r2, #202	@ 0xca
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2253      	movs	r2, #83	@ 0x53
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f8e3 	bl	80040ec <RTC_EnterInitMode>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d120      	bne.n	8003f72 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8f6 	bl	800415a <RTC_ExitInitMode>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	22ff      	movs	r2, #255	@ 0xff
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]

  return status;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}

08003f96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f96:	b590      	push	{r4, r7, lr}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	7f1b      	ldrb	r3, [r3, #28]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_RTC_SetDate+0x1c>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e071      	b.n	8004096 <HAL_RTC_SetDate+0x100>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_RTC_SetDate+0x4c>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	330a      	adds	r3, #10
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d11c      	bne.n	8004022 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f8d9 	bl	80041a4 <RTC_ByteToBcd2>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f8d2 	bl	80041a4 <RTC_ByteToBcd2>
 8004000:	4603      	mov	r3, r0
 8004002:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004004:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	789b      	ldrb	r3, [r3, #2]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f8ca 	bl	80041a4 <RTC_ByteToBcd2>
 8004010:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004012:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e00e      	b.n	8004040 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	78db      	ldrb	r3, [r3, #3]
 8004026:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800402e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004034:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	22ca      	movs	r2, #202	@ 0xca
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2253      	movs	r2, #83	@ 0x53
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f84b 	bl	80040ec <RTC_EnterInitMode>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10c      	bne.n	800407a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800406a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800406e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f872 	bl	800415a <RTC_ExitInitMode>
 8004076:	4603      	mov	r3, r0
 8004078:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	22ff      	movs	r2, #255	@ 0xff
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]

  return status;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
}
 8004096:	4618      	mov	r0, r3
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd90      	pop	{r4, r7, pc}
	...

080040a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0d      	ldr	r2, [pc, #52]	@ (80040e8 <HAL_RTC_WaitForSynchro+0x48>)
 80040b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b4:	f7fd fc5a 	bl	800196c <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040ba:	e009      	b.n	80040d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040bc:	f7fd fc56 	bl	800196c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040ca:	d901      	bls.n	80040d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e007      	b.n	80040e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0ee      	beq.n	80040bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00013f5f 	.word	0x00013f5f

080040ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d122      	bne.n	8004150 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004118:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800411a:	f7fd fc27 	bl	800196c <HAL_GetTick>
 800411e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004120:	e00c      	b.n	800413c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004122:	f7fd fc23 	bl	800196c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004130:	d904      	bls.n	800413c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <RTC_EnterInitMode+0x64>
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d1e8      	bne.n	8004122 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004174:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff8b 	bl	80040a0 <HAL_RTC_WaitForSynchro>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2204      	movs	r2, #4
 8004194:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80041b2:	e005      	b.n	80041c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3301      	adds	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	3b0a      	subs	r3, #10
 80041be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b09      	cmp	r3, #9
 80041c4:	d8f6      	bhi.n	80041b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b2db      	uxtb	r3, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_RTCEx_SetTamper>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7f1b      	ldrb	r3, [r3, #28]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_RTCEx_SetTamper+0x1a>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e049      	b.n	800428e <HAL_RTCEx_SetTamper+0xae>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	775a      	strb	r2, [r3, #29]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAFCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d106      	bne.n	800422e <HAL_RTCEx_SetTamper+0x4e>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e006      	b.n	800423c <HAL_RTCEx_SetTamper+0x5c>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	43db      	mvns	r3, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8004242:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004246:	60fb      	str	r3, [r7, #12]
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TAFCR_TAMP1INSEL               | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
             (uint32_t)sTamper->SamplingFrequency | \
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8004250:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8004256:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
             (uint32_t)sTamper->PrechargeDuration | \
 800425c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PinSelection      | \
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
             (uint32_t)sTamper->TamperPullUp      | \
 8004262:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->PinSelection      | \
 8004268:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Disable tamper global interrupt in case it is enabled */
  tmpreg &= (uint32_t)~RTC_TAFCR_TAMPIE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAFCR = tmpreg;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e022      	b.n	80042f2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fd94 	bl	8000dec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2203      	movs	r2, #3
 80042c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f815 	bl	80042fc <HAL_SD_InitCard>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e00a      	b.n	80042f2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042fc:	b5b0      	push	{r4, r5, r7, lr}
 80042fe:	b08e      	sub	sp, #56	@ 0x38
 8004300:	af04      	add	r7, sp, #16
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004318:	2376      	movs	r3, #118	@ 0x76
 800431a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681d      	ldr	r5, [r3, #0]
 8004320:	466c      	mov	r4, sp
 8004322:	f107 0314 	add.w	r3, r7, #20
 8004326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800432a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004334:	4628      	mov	r0, r5
 8004336:	f003 fa2d 	bl	8007794 <SDIO_Init>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e04f      	b.n	80043ec <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_SD_InitCard+0xf8>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f003 fa65 	bl	8007826 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800435c:	4b25      	ldr	r3, [pc, #148]	@ (80043f4 <HAL_SD_InitCard+0xf8>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004362:	2002      	movs	r0, #2
 8004364:	f7fd fb0e 	bl	8001984 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 f805 	bl	8005378 <SD_PowerON>
 800436e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02e      	b.n	80043ec <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 ff24 	bl	80051dc <SD_InitCard>
 8004394:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e01b      	b.n	80043ec <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 fac4 	bl	800794a <SDMMC_CmdBlockLength>
 80043c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00f      	beq.n	80043ea <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <HAL_SD_InitCard+0xfc>)
 80043d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3728      	adds	r7, #40	@ 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdb0      	pop	{r4, r5, r7, pc}
 80043f4:	422580a0 	.word	0x422580a0
 80043f8:	004005ff 	.word	0x004005ff

080043fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	@ 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0c0      	b.n	80045a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	f040 80b9 	bne.w	80045a4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	429a      	cmp	r2, r3
 8004444:	d907      	bls.n	8004456 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0a7      	b.n	80045a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	4a4c      	ldr	r2, [pc, #304]	@ (80045b0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a4b      	ldr	r2, [pc, #300]	@ (80045b4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004488:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2200      	movs	r2, #0
 8004490:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3380      	adds	r3, #128	@ 0x80
 80044c0:	4619      	mov	r1, r3
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	f7fd ffd9 	bl	8002480 <HAL_DMA_Start_IT>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d017      	beq.n	8004504 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80044e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a33      	ldr	r2, [pc, #204]	@ (80045b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e050      	b.n	80045a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004504:	4b2d      	ldr	r3, [pc, #180]	@ (80045bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	2b01      	cmp	r3, #1
 8004510:	d002      	beq.n	8004518 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800451c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	025b      	lsls	r3, r3, #9
 8004522:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004524:	2390      	movs	r3, #144	@ 0x90
 8004526:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004528:	2302      	movs	r3, #2
 800452a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004530:	2301      	movs	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f107 0210 	add.w	r2, r7, #16
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f003 f9d7 	bl	80078f2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d90a      	bls.n	8004560 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2282      	movs	r2, #130	@ 0x82
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004556:	4618      	mov	r0, r3
 8004558:	f003 fa3b 	bl	80079d2 <SDMMC_CmdReadMultiBlock>
 800455c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800455e:	e009      	b.n	8004574 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2281      	movs	r2, #129	@ 0x81
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456c:	4618      	mov	r0, r3
 800456e:	f003 fa0e 	bl	800798e <SDMMC_CmdReadSingleBlock>
 8004572:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a0e      	ldr	r2, [pc, #56]	@ (80045b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004580:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e002      	b.n	80045a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3730      	adds	r7, #48	@ 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	08004feb 	.word	0x08004feb
 80045b4:	0800505d 	.word	0x0800505d
 80045b8:	004005ff 	.word	0x004005ff
 80045bc:	4225858c 	.word	0x4225858c

080045c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	@ 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0c5      	b.n	8004774 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	f040 80be 	bne.w	8004772 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	441a      	add	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	429a      	cmp	r2, r3
 8004608:	d907      	bls.n	800461a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0ac      	b.n	8004774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2203      	movs	r2, #3
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	4a4e      	ldr	r2, [pc, #312]	@ (800477c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	4a4d      	ldr	r2, [pc, #308]	@ (8004780 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800464c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	2200      	movs	r2, #0
 8004654:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	2b01      	cmp	r3, #1
 800465c:	d002      	beq.n	8004664 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d90a      	bls.n	8004680 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	22a0      	movs	r2, #160	@ 0xa0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004676:	4618      	mov	r0, r3
 8004678:	f003 f9ef 	bl	8007a5a <SDMMC_CmdWriteMultiBlock>
 800467c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800467e:	e009      	b.n	8004694 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2290      	movs	r2, #144	@ 0x90
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800468c:	4618      	mov	r0, r3
 800468e:	f003 f9c2 	bl	8007a16 <SDMMC_CmdWriteSingleBlock>
 8004692:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d012      	beq.n	80046c0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a39      	ldr	r2, [pc, #228]	@ (8004784 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e059      	b.n	8004774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80046c0:	4b31      	ldr	r3, [pc, #196]	@ (8004788 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ca:	2240      	movs	r2, #64	@ 0x40
 80046cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3380      	adds	r3, #128	@ 0x80
 80046f6:	461a      	mov	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	f7fd febf 	bl	8002480 <HAL_DMA_Start_IT>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01c      	beq.n	8004742 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004716:	f023 0302 	bic.w	r3, r3, #2
 800471a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e018      	b.n	8004774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004746:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	025b      	lsls	r3, r3, #9
 800474c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800474e:	2390      	movs	r3, #144	@ 0x90
 8004750:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004756:	2300      	movs	r3, #0
 8004758:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800475a:	2301      	movs	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f107 0210 	add.w	r2, r7, #16
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f003 f8c2 	bl	80078f2 <SDIO_ConfigData>

      return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004772:	2302      	movs	r3, #2
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3730      	adds	r7, #48	@ 0x30
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	08004fc1 	.word	0x08004fc1
 8004780:	0800505d 	.word	0x0800505d
 8004784:	004005ff 	.word	0x004005ff
 8004788:	4225858c 	.word	0x4225858c

0800478c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_SD_IRQHandler+0x2e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 f806 	bl	80057c4 <SD_Read_IT>
 80047b8:	e165      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 808f 	beq.w	80048e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047d2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80047e2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80047e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d039      	beq.n	8004876 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_SD_IRQHandler+0x8a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f003 f940 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 8004820:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f92f 	bl	8004a98 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_SD_IRQHandler+0xda>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f003 fda6 	bl	80083b8 <HAL_SD_RxCpltCallback>
 800486c:	e10b      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f003 fd98 	bl	80083a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004874:	e107      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8102 	beq.w	8004a86 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d011      	beq.n	80048b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f003 f905 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 8004896:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8f4 	bl	8004a98 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 80e5 	bne.w	8004a86 <HAL_SD_IRQHandler+0x2fa>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 80df 	bne.w	8004a86 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0208 	bic.w	r2, r2, #8
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f003 fd5f 	bl	80083a4 <HAL_SD_TxCpltCallback>
}
 80048e6:	e0ce      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_SD_IRQHandler+0x17c>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 ffb0 	bl	8005866 <SD_Write_IT>
 8004906:	e0be      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490e:	f240 233a 	movw	r3, #570	@ 0x23a
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80b6 	beq.w	8004a86 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	f043 0202 	orr.w	r2, r3, #2
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	f043 0208 	orr.w	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	f043 0210 	orr.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	f043 0208 	orr.w	r2, r3, #8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f240 723a 	movw	r2, #1850	@ 0x73a
 80049a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80049b4:	f023 0302 	bic.w	r3, r3, #2
 80049b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f003 f86e 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 80049c4:	4602      	mov	r2, r0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f855 	bl	8004a98 <HAL_SD_ErrorCallback>
}
 80049ee:	e04a      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d045      	beq.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_SD_IRQHandler+0x282>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d011      	beq.n	8004a32 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <HAL_SD_IRQHandler+0x304>)
 8004a14:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fd fdf8 	bl	8002610 <HAL_DMA_Abort_IT>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02f      	beq.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fb68 	bl	8005100 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a30:	e029      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_SD_IRQHandler+0x2ba>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d011      	beq.n	8004a6a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	4a12      	ldr	r2, [pc, #72]	@ (8004a94 <HAL_SD_IRQHandler+0x308>)
 8004a4c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fd fddc 	bl	8002610 <HAL_DMA_Abort_IT>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d013      	beq.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb83 	bl	800516e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004a68:	e00d      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f003 fc86 	bl	8008390 <HAL_SD_AbortCallback>
}
 8004a84:	e7ff      	b.n	8004a86 <HAL_SD_IRQHandler+0x2fa>
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	08005101 	.word	0x08005101
 8004a94:	0800516f 	.word	0x0800516f

08004a98 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aba:	0f9b      	lsrs	r3, r3, #30
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac6:	0e9b      	lsrs	r3, r3, #26
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aea:	0c1b      	lsrs	r3, r3, #16
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b2a:	0bdb      	lsrs	r3, r3, #15
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b3c:	0b9b      	lsrs	r3, r3, #14
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b60:	0b1b      	lsrs	r3, r3, #12
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d163      	bne.n	8004c44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b86:	4013      	ands	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004b8c:	0f92      	lsrs	r2, r2, #30
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b98:	0edb      	lsrs	r3, r3, #27
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004baa:	0e1b      	lsrs	r3, r3, #24
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bbc:	0d5b      	lsrs	r3, r3, #21
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bce:	0c9b      	lsrs	r3, r3, #18
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be0:	0bdb      	lsrs	r3, r3, #15
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	7e1b      	ldrb	r3, [r3, #24]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	3302      	adds	r3, #2
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c0e:	fb03 f202 	mul.w	r2, r3, r2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	7a1b      	ldrb	r3, [r3, #8]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004c30:	0a52      	lsrs	r2, r2, #9
 8004c32:	fb03 f202 	mul.w	r2, r3, r2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c40:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c42:	e031      	b.n	8004ca8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d11d      	bne.n	8004c88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	3301      	adds	r3, #1
 8004c68:	029a      	lsls	r2, r3, #10
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c7c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c86:	e00f      	b.n	8004ca8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a58      	ldr	r2, [pc, #352]	@ (8004df0 <HAL_SD_GetCardCSD+0x344>)
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e09d      	b.n	8004de4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cac:	0b9b      	lsrs	r3, r3, #14
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	0fdb      	lsrs	r3, r3, #31
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cec:	0f5b      	lsrs	r3, r3, #29
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	0e9b      	lsrs	r3, r3, #26
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d10:	0d9b      	lsrs	r3, r3, #22
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	0d5b      	lsrs	r3, r3, #21
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	0bdb      	lsrs	r3, r3, #15
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	0b9b      	lsrs	r3, r3, #14
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	0b5b      	lsrs	r3, r3, #13
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	0a9b      	lsrs	r3, r3, #10
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	004005ff 	.word	0x004005ff

08004df4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b08e      	sub	sp, #56	@ 0x38
 8004e50:	af04      	add	r7, sp, #16
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d02e      	beq.n	8004eca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e72:	d106      	bne.n	8004e82 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e80:	e029      	b.n	8004ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e88:	d10a      	bne.n	8004ea0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fb2a 	bl	80054e4 <SD_WideBus_Enable>
 8004e90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e9e:	e01a      	b.n	8004ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb67 	bl	800557a <SD_WideBus_Disable>
 8004eac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004eba:	e00c      	b.n	8004ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ec8:	e005      	b.n	8004ed6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a26      	ldr	r2, [pc, #152]	@ (8004f7c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004ef4:	e01f      	b.n	8004f36 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681d      	ldr	r5, [r3, #0]
 8004f1c:	466c      	mov	r4, sp
 8004f1e:	f107 0314 	add.w	r3, r7, #20
 8004f22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f30:	4628      	mov	r0, r5
 8004f32:	f002 fc2f 	bl	8007794 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f002 fd03 	bl	800794a <SDMMC_CmdBlockLength>
 8004f44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	@ (8004f7c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3728      	adds	r7, #40	@ 0x28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	004005ff 	.word	0x004005ff

08004f80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004f8c:	f107 030c 	add.w	r3, r7, #12
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa7e 	bl	8005494 <SD_SendStatus>
 8004f98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	0a5b      	lsrs	r3, r3, #9
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004fb6:	693b      	ldr	r3, [r7, #16]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	2b82      	cmp	r3, #130	@ 0x82
 8004ffe:	d111      	bne.n	8005024 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f002 fd4b 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 800500a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fd3a 	bl	8004a98 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0208 	bic.w	r2, r2, #8
 8005032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f240 523a 	movw	r2, #1338	@ 0x53a
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f003 f9b3 	bl	80083b8 <HAL_SD_RxCpltCallback>
#endif
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005068:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fd fc7c 	bl	8002968 <HAL_DMA_GetError>
 8005070:	4603      	mov	r3, r0
 8005072:	2b02      	cmp	r3, #2
 8005074:	d03e      	beq.n	80050f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d002      	beq.n	8005092 <SD_DMAError+0x36>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d12d      	bne.n	80050ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <SD_DMAError+0xa0>)
 8005098:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80050a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f7ff ff62 	bl	8004f80 <HAL_SD_GetCardState>
 80050bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b06      	cmp	r3, #6
 80050c2:	d002      	beq.n	80050ca <SD_DMAError+0x6e>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d10a      	bne.n	80050e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 fce6 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 80050d4:	4602      	mov	r2, r0
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	431a      	orrs	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7ff fcd2 	bl	8004a98 <HAL_SD_ErrorCallback>
#endif
  }
}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	004005ff 	.word	0x004005ff

08005100 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff31 	bl	8004f80 <HAL_SD_GetCardState>
 800511e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b06      	cmp	r3, #6
 8005132:	d002      	beq.n	800513a <SD_DMATxAbort+0x3a>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d10a      	bne.n	8005150 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f002 fcae 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	431a      	orrs	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f003 f919 	bl	8008390 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800515e:	e002      	b.n	8005166 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff fc99 	bl	8004a98 <HAL_SD_ErrorCallback>
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fefa 	bl	8004f80 <HAL_SD_GetCardState>
 800518c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d002      	beq.n	80051a8 <SD_DMARxAbort+0x3a>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d10a      	bne.n	80051be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f002 fc77 	bl	8007aa0 <SDMMC_CmdStopTransfer>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b8:	431a      	orrs	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f003 f8e2 	bl	8008390 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80051cc:	e002      	b.n	80051d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fc62 	bl	8004a98 <HAL_SD_ErrorCallback>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80051dc:	b5b0      	push	{r4, r5, r7, lr}
 80051de:	b094      	sub	sp, #80	@ 0x50
 80051e0:	af04      	add	r7, sp, #16
 80051e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80051e4:	2301      	movs	r3, #1
 80051e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f002 fb28 	bl	8007842 <SDIO_GetPowerState>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80051fc:	e0b8      	b.n	8005370 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	2b03      	cmp	r3, #3
 8005204:	d02f      	beq.n	8005266 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fd52 	bl	8007cb4 <SDMMC_CmdSendCID>
 8005210:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <SD_InitCard+0x40>
    {
      return errorstate;
 8005218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521a:	e0a9      	b.n	8005370 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f002 fb52 	bl	80078cc <SDIO_GetResponse>
 8005228:	4602      	mov	r2, r0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2104      	movs	r1, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f002 fb49 	bl	80078cc <SDIO_GetResponse>
 800523a:	4602      	mov	r2, r0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2108      	movs	r1, #8
 8005246:	4618      	mov	r0, r3
 8005248:	f002 fb40 	bl	80078cc <SDIO_GetResponse>
 800524c:	4602      	mov	r2, r0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	210c      	movs	r1, #12
 8005258:	4618      	mov	r0, r3
 800525a:	f002 fb37 	bl	80078cc <SDIO_GetResponse>
 800525e:	4602      	mov	r2, r0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	2b03      	cmp	r3, #3
 800526c:	d00d      	beq.n	800528a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f107 020e 	add.w	r2, r7, #14
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f002 fd58 	bl	8007d2e <SDMMC_CmdSetRelAdd>
 800527e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <SD_InitCard+0xae>
    {
      return errorstate;
 8005286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005288:	e072      	b.n	8005370 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	2b03      	cmp	r3, #3
 8005290:	d036      	beq.n	8005300 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	461a      	mov	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f002 fd22 	bl	8007cf0 <SDMMC_CmdSendCSD>
 80052ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80052b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b6:	e05b      	b.n	8005370 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f002 fb04 	bl	80078cc <SDIO_GetResponse>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2104      	movs	r1, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 fafb 	bl	80078cc <SDIO_GetResponse>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2108      	movs	r1, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f002 faf2 	bl	80078cc <SDIO_GetResponse>
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	210c      	movs	r1, #12
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 fae9 	bl	80078cc <SDIO_GetResponse>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2104      	movs	r1, #4
 8005306:	4618      	mov	r0, r3
 8005308:	f002 fae0 	bl	80078cc <SDIO_GetResponse>
 800530c:	4603      	mov	r3, r0
 800530e:	0d1a      	lsrs	r2, r3, #20
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fbc6 	bl	8004aac <HAL_SD_GetCardCSD>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005326:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800532a:	e021      	b.n	8005370 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	2200      	movs	r2, #0
 8005338:	461c      	mov	r4, r3
 800533a:	4615      	mov	r5, r2
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	4608      	mov	r0, r1
 8005342:	f002 fbcf 	bl	8007ae4 <SDMMC_CmdSelDesel>
 8005346:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <SD_InitCard+0x176>
  {
    return errorstate;
 800534e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005350:	e00e      	b.n	8005370 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681d      	ldr	r5, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	466c      	mov	r4, sp
 800535a:	f103 0210 	add.w	r2, r3, #16
 800535e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005364:	3304      	adds	r3, #4
 8005366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005368:	4628      	mov	r0, r5
 800536a:	f002 fa13 	bl	8007794 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3740      	adds	r7, #64	@ 0x40
 8005374:	46bd      	mov	sp, r7
 8005376:	bdb0      	pop	{r4, r5, r7, pc}

08005378 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f002 fbca 	bl	8007b2a <SDMMC_CmdGoIdleState>
 8005396:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	e072      	b.n	8005488 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f002 fbdd 	bl	8007b66 <SDMMC_CmdOperCond>
 80053ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f002 fbb3 	bl	8007b2a <SDMMC_CmdGoIdleState>
 80053c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	e05b      	b.n	8005488 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d137      	bne.n	800544e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fbdd 	bl	8007ba4 <SDMMC_CmdAppCommand>
 80053ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d02d      	beq.n	800544e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80053f6:	e047      	b.n	8005488 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f002 fbd0 	bl	8007ba4 <SDMMC_CmdAppCommand>
 8005404:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <SD_PowerON+0x98>
    {
      return errorstate;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e03b      	b.n	8005488 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	491e      	ldr	r1, [pc, #120]	@ (8005490 <SD_PowerON+0x118>)
 8005416:	4618      	mov	r0, r3
 8005418:	f002 fbe6 	bl	8007be8 <SDMMC_CmdAppOperCommand>
 800541c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005424:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005428:	e02e      	b.n	8005488 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f002 fa4b 	bl	80078cc <SDIO_GetResponse>
 8005436:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	0fdb      	lsrs	r3, r3, #31
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <SD_PowerON+0xcc>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <SD_PowerON+0xce>
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]

    count++;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	3301      	adds	r3, #1
 800544c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005454:	4293      	cmp	r3, r2
 8005456:	d802      	bhi.n	800545e <SD_PowerON+0xe6>
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0cc      	beq.n	80053f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005464:	4293      	cmp	r3, r2
 8005466:	d902      	bls.n	800546e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800546c:	e00c      	b.n	8005488 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
 800547e:	e002      	b.n	8005486 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	c1100000 	.word	0xc1100000

08005494 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80054a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054a8:	e018      	b.n	80054dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f002 fc5a 	bl	8007d70 <SDMMC_CmdSendStatus>
 80054bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	e009      	b.n	80054dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f002 f9fc 	bl	80078cc <SDIO_GetResponse>
 80054d4:	4602      	mov	r2, r0
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 f9e6 	bl	80078cc <SDIO_GetResponse>
 8005500:	4603      	mov	r3, r0
 8005502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800550a:	d102      	bne.n	8005512 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800550c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005510:	e02f      	b.n	8005572 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f879 	bl	8005610 <SD_FindSCR>
 800551e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	e023      	b.n	8005572 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01c      	beq.n	800556e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f002 fb2f 	bl	8007ba4 <SDMMC_CmdAppCommand>
 8005546:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	e00f      	b.n	8005572 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2102      	movs	r1, #2
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fb68 	bl	8007c2e <SDMMC_CmdBusWidth>
 800555e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e003      	b.n	8005572 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800556a:	2300      	movs	r3, #0
 800556c:	e001      	b.n	8005572 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800556e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f002 f99b 	bl	80078cc <SDIO_GetResponse>
 8005596:	4603      	mov	r3, r0
 8005598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055a0:	d102      	bne.n	80055a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055a6:	e02f      	b.n	8005608 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f82e 	bl	8005610 <SD_FindSCR>
 80055b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	e023      	b.n	8005608 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01c      	beq.n	8005604 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f002 fae4 	bl	8007ba4 <SDMMC_CmdAppCommand>
 80055dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	e00f      	b.n	8005608 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 fb1d 	bl	8007c2e <SDMMC_CmdBusWidth>
 80055f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	e003      	b.n	8005608 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005600:	2300      	movs	r3, #0
 8005602:	e001      	b.n	8005608 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005604:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b08f      	sub	sp, #60	@ 0x3c
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800561a:	f7fc f9a7 	bl	800196c <HAL_GetTick>
 800561e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2108      	movs	r1, #8
 8005636:	4618      	mov	r0, r3
 8005638:	f002 f987 	bl	800794a <SDMMC_CmdBlockLength>
 800563c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	e0b9      	b.n	80057bc <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f002 faa5 	bl	8007ba4 <SDMMC_CmdAppCommand>
 800565a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	e0aa      	b.n	80057bc <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800566a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800566c:	2308      	movs	r3, #8
 800566e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005670:	2330      	movs	r3, #48	@ 0x30
 8005672:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005674:	2302      	movs	r3, #2
 8005676:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005678:	2300      	movs	r3, #0
 800567a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800567c:	2301      	movs	r3, #1
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f107 0210 	add.w	r2, r7, #16
 8005688:	4611      	mov	r1, r2
 800568a:	4618      	mov	r0, r3
 800568c:	f002 f931 	bl	80078f2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f002 faec 	bl	8007c72 <SDMMC_CmdSendSCR>
 800569a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02a      	beq.n	80056f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	e08a      	b.n	80057bc <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00f      	beq.n	80056d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6819      	ldr	r1, [r3, #0]
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	f107 0208 	add.w	r2, r7, #8
 80056c0:	18d4      	adds	r4, r2, r3
 80056c2:	4608      	mov	r0, r1
 80056c4:	f002 f891 	bl	80077ea <SDIO_ReadFIFO>
 80056c8:	4603      	mov	r3, r0
 80056ca:	6023      	str	r3, [r4, #0]
      index++;
 80056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ce:	3301      	adds	r3, #1
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d2:	e006      	b.n	80056e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d012      	beq.n	8005708 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80056e2:	f7fc f943 	bl	800196c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056f0:	d102      	bne.n	80056f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80056f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80056f6:	e061      	b.n	80057bc <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0cf      	beq.n	80056a6 <SD_FindSCR+0x96>
 8005706:	e000      	b.n	800570a <SD_FindSCR+0xfa>
      break;
 8005708:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <SD_FindSCR+0x116>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2208      	movs	r2, #8
 800572c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800572e:	2308      	movs	r3, #8
 8005730:	e044      	b.n	80057bc <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2202      	movs	r2, #2
 8005746:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005748:	2302      	movs	r3, #2
 800574a:	e037      	b.n	80057bc <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2220      	movs	r2, #32
 8005760:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005762:	2320      	movs	r3, #32
 8005764:	e02a      	b.n	80057bc <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800576e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	061a      	lsls	r2, r3, #24
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800577c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005786:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	0e1b      	lsrs	r3, r3, #24
 800578c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005790:	601a      	str	r2, [r3, #0]
    scr++;
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	3304      	adds	r3, #4
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	061a      	lsls	r2, r3, #24
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	0e1b      	lsrs	r3, r3, #24
 80057b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	373c      	adds	r7, #60	@ 0x3c
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd90      	pop	{r4, r7, pc}

080057c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d03f      	beq.n	800585e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e033      	b.n	800584c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fffe 	bl	80077ea <SDIO_ReadFIFO>
 80057ee:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3b01      	subs	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3301      	adds	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3b01      	subs	r3, #1
 8005818:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3b01      	subs	r3, #1
 800582e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	0e1b      	lsrs	r3, r3, #24
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	701a      	strb	r2, [r3, #0]
      tmp++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	3b01      	subs	r3, #1
 8005844:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	3301      	adds	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b07      	cmp	r3, #7
 8005850:	d9c8      	bls.n	80057e4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800585e:	bf00      	nop
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d043      	beq.n	8005908 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e037      	b.n	80058f6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3b01      	subs	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	021a      	lsls	r2, r3, #8
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	041a      	lsls	r2, r3, #16
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	061a      	lsls	r2, r3, #24
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	3b01      	subs	r3, #1
 80058de:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f107 0208 	add.w	r2, r7, #8
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 ff8a 	bl	8007804 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	3301      	adds	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d9c4      	bls.n	8005886 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005908:	bf00      	nop
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e07b      	b.n	8005a1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005932:	d009      	beq.n	8005948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	61da      	str	r2, [r3, #28]
 800593a:	e005      	b.n	8005948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb fb68 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800597e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059cc:	ea42 0103 	orr.w	r1, r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	f003 0104 	and.w	r1, r3, #4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	f003 0210 	and.w	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10e      	bne.n	8005a64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
    return;
 8005a62:	e0ce      	b.n	8005c02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <HAL_SPI_IRQHandler+0x5e>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
    return;
 8005a80:	e0bf      	b.n	8005c02 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <HAL_SPI_IRQHandler+0x7e>
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80b0 	beq.w	8005c02 <HAL_SPI_IRQHandler+0x1de>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80aa 	beq.w	8005c02 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d023      	beq.n	8005b00 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d011      	beq.n	8005ae8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac8:	f043 0204 	orr.w	r2, r3, #4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	e00b      	b.n	8005b00 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	693b      	ldr	r3, [r7, #16]
        return;
 8005afe:	e080      	b.n	8005c02 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d014      	beq.n	8005b34 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0e:	f043 0201 	orr.w	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	f043 0208 	orr.w	r2, r3, #8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d04f      	beq.n	8005c00 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <HAL_SPI_IRQHandler+0x168>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d034      	beq.n	8005bf6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0203 	bic.w	r2, r2, #3
 8005b9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d011      	beq.n	8005bc8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba8:	4a17      	ldr	r2, [pc, #92]	@ (8005c08 <HAL_SPI_IRQHandler+0x1e4>)
 8005baa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fc fd2d 	bl	8002610 <HAL_DMA_Abort_IT>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c08 <HAL_SPI_IRQHandler+0x1e4>)
 8005bd6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fc fd17 	bl	8002610 <HAL_DMA_Abort_IT>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005bf4:	e003      	b.n	8005bfe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f808 	bl	8005c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bfc:	e000      	b.n	8005c00 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005bfe:	bf00      	nop
    return;
 8005c00:	bf00      	nop
  }
}
 8005c02:	3720      	adds	r7, #32
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08005c21 	.word	0x08005c21

08005c0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff ffe6 	bl	8005c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e041      	b.n	8005cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb fc1e 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f000 fb32 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e041      	b.n	8005d7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f839 	bl	8005d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f000 fae3 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d020      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01b      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0202 	mvn.w	r2, #2
 8005dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa65 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa57 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa68 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d020      	beq.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0204 	mvn.w	r2, #4
 8005e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa3f 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa31 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fa42 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d020      	beq.n	8005e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01b      	beq.n	8005e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0208 	mvn.w	r2, #8
 8005e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa19 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa0b 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa1c 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d020      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0210 	mvn.w	r2, #16
 8005eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9f3 	bl	80062b2 <HAL_TIM_IC_CaptureCallback>
 8005ecc:	e005      	b.n	8005eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9e5 	bl	800629e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f9f6 	bl	80062c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0201 	mvn.w	r2, #1
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f9c3 	bl	800628a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fd0e 	bl	8006944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00c      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9c7 	bl	80062da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0220 	mvn.w	r2, #32
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fce0 	bl	8006930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e0ae      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	f200 809f 	bhi.w	80060e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fe1 	.word	0x08005fe1
 8005fb0:	080060e5 	.word	0x080060e5
 8005fb4:	080060e5 	.word	0x080060e5
 8005fb8:	080060e5 	.word	0x080060e5
 8005fbc:	08006021 	.word	0x08006021
 8005fc0:	080060e5 	.word	0x080060e5
 8005fc4:	080060e5 	.word	0x080060e5
 8005fc8:	080060e5 	.word	0x080060e5
 8005fcc:	08006063 	.word	0x08006063
 8005fd0:	080060e5 	.word	0x080060e5
 8005fd4:	080060e5 	.word	0x080060e5
 8005fd8:	080060e5 	.word	0x080060e5
 8005fdc:	080060a3 	.word	0x080060a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fa0e 	bl	8006408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6999      	ldr	r1, [r3, #24]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	619a      	str	r2, [r3, #24]
      break;
 800601e:	e064      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fa54 	bl	80064d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800603a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800604a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6999      	ldr	r1, [r3, #24]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	619a      	str	r2, [r3, #24]
      break;
 8006060:	e043      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fa9f 	bl	80065ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0208 	orr.w	r2, r2, #8
 800607c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0204 	bic.w	r2, r2, #4
 800608c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69d9      	ldr	r1, [r3, #28]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	61da      	str	r2, [r3, #28]
      break;
 80060a0:	e023      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fae9 	bl	8006680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69d9      	ldr	r1, [r3, #28]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	021a      	lsls	r2, r3, #8
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	61da      	str	r2, [r3, #28]
      break;
 80060e2:	e002      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
      break;
 80060e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0b4      	b.n	8006282 <HAL_TIM_ConfigClockSource+0x186>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800613e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006150:	d03e      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006156:	f200 8087 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	f000 8086 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x172>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006166:	d87f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b70      	cmp	r3, #112	@ 0x70
 800616a:	d01a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xa6>
 800616c:	2b70      	cmp	r3, #112	@ 0x70
 800616e:	d87b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b60      	cmp	r3, #96	@ 0x60
 8006172:	d050      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x11a>
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d877      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b50      	cmp	r3, #80	@ 0x50
 800617a:	d03c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xfa>
 800617c:	2b50      	cmp	r3, #80	@ 0x50
 800617e:	d873      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d058      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x13a>
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d86f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d064      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d86b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d060      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d867      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d05a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 80061a0:	e062      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b2:	f000 fb2f 	bl	8006814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
      break;
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e0:	f000 fb18 	bl	8006814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061f2:	609a      	str	r2, [r3, #8]
      break;
 80061f4:	e03c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	461a      	mov	r2, r3
 8006204:	f000 fa8c 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2150      	movs	r1, #80	@ 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fae5 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006214:	e02c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	461a      	mov	r2, r3
 8006224:	f000 faab 	bl	800677e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2160      	movs	r1, #96	@ 0x60
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fad5 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006234:	e01c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	461a      	mov	r2, r3
 8006244:	f000 fa6c 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2140      	movs	r1, #64	@ 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fac5 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006254:	e00c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 fabc 	bl	80067de <TIM_ITRx_SetConfig>
      break;
 8006266:	e003      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800626e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a3a      	ldr	r2, [pc, #232]	@ (80063ec <TIM_Base_SetConfig+0xfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a37      	ldr	r2, [pc, #220]	@ (80063f0 <TIM_Base_SetConfig+0x100>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a36      	ldr	r2, [pc, #216]	@ (80063f4 <TIM_Base_SetConfig+0x104>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a35      	ldr	r2, [pc, #212]	@ (80063f8 <TIM_Base_SetConfig+0x108>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2b      	ldr	r2, [pc, #172]	@ (80063ec <TIM_Base_SetConfig+0xfc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01b      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006348:	d017      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a28      	ldr	r2, [pc, #160]	@ (80063f0 <TIM_Base_SetConfig+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a27      	ldr	r2, [pc, #156]	@ (80063f4 <TIM_Base_SetConfig+0x104>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00f      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a26      	ldr	r2, [pc, #152]	@ (80063f8 <TIM_Base_SetConfig+0x108>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00b      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a25      	ldr	r2, [pc, #148]	@ (80063fc <TIM_Base_SetConfig+0x10c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a24      	ldr	r2, [pc, #144]	@ (8006400 <TIM_Base_SetConfig+0x110>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a23      	ldr	r2, [pc, #140]	@ (8006404 <TIM_Base_SetConfig+0x114>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d108      	bne.n	800638c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a0e      	ldr	r2, [pc, #56]	@ (80063ec <TIM_Base_SetConfig+0xfc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d103      	bne.n	80063c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d105      	bne.n	80063de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	611a      	str	r2, [r3, #16]
  }
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0201 	bic.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 0302 	bic.w	r3, r3, #2
 8006450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a1c      	ldr	r2, [pc, #112]	@ (80064d0 <TIM_OC1_SetConfig+0xc8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d10c      	bne.n	800647e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0308 	bic.w	r3, r3, #8
 800646a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0304 	bic.w	r3, r3, #4
 800647c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <TIM_OC1_SetConfig+0xc8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d111      	bne.n	80064aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	621a      	str	r2, [r3, #32]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40010000 	.word	0x40010000

080064d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 0210 	bic.w	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800650a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0320 	bic.w	r3, r3, #32
 800651e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1e      	ldr	r2, [pc, #120]	@ (80065a8 <TIM_OC2_SetConfig+0xd4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10d      	bne.n	8006550 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_OC2_SetConfig+0xd4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d113      	bne.n	8006580 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800655e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000

080065ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0303 	bic.w	r3, r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1d      	ldr	r2, [pc, #116]	@ (800667c <TIM_OC3_SetConfig+0xd0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d10d      	bne.n	8006626 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a14      	ldr	r2, [pc, #80]	@ (800667c <TIM_OC3_SetConfig+0xd0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d113      	bne.n	8006656 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	621a      	str	r2, [r3, #32]
}
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40010000 	.word	0x40010000

08006680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a10      	ldr	r2, [pc, #64]	@ (800671c <TIM_OC4_SetConfig+0x9c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d109      	bne.n	80066f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	019b      	lsls	r3, r3, #6
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40010000 	.word	0x40010000

08006720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800674a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f023 030a 	bic.w	r3, r3, #10
 800675c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677e:	b480      	push	{r7}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f023 0210 	bic.w	r2, r3, #16
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	031b      	lsls	r3, r3, #12
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f043 0307 	orr.w	r3, r3, #7
 8006800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800682e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	431a      	orrs	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e050      	b.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1c      	ldr	r2, [pc, #112]	@ (800691c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d018      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b8:	d013      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10c      	bne.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	40014000 	.word	0x40014000

08006930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e042      	b.n	80069f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fa fed6 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	@ 0x24
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800699a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc85 	bl	80072ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695a      	ldr	r2, [r3, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b0ba      	sub	sp, #232	@ 0xe8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <HAL_UART_IRQHandler+0x66>
 8006a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb69 	bl	800712e <UART_Receive_IT>
      return;
 8006a5c:	e25b      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80de 	beq.w	8006c24 <HAL_UART_IRQHandler+0x22c>
 8006a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80d1 	beq.w	8006c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xae>
 8006a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HAL_UART_IRQHandler+0xd2>
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac2:	f043 0202 	orr.w	r2, r3, #2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <HAL_UART_IRQHandler+0xf6>
 8006ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae6:	f043 0204 	orr.w	r2, r3, #4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <HAL_UART_IRQHandler+0x126>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d105      	bne.n	8006b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b16:	f043 0208 	orr.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 81f2 	beq.w	8006f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <HAL_UART_IRQHandler+0x14e>
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 faf4 	bl	800712e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b40      	cmp	r3, #64	@ 0x40
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <HAL_UART_IRQHandler+0x17a>
 8006b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d04f      	beq.n	8006c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9fc 	bl	8006f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d141      	bne.n	8006c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3314      	adds	r3, #20
 8006bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1d9      	bne.n	8006b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d013      	beq.n	8006c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bde:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd8 <HAL_UART_IRQHandler+0x3e0>)
 8006be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fb fd12 	bl	8002610 <HAL_DMA_Abort_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d016      	beq.n	8006c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c00:	e00e      	b.n	8006c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f99e 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	e00a      	b.n	8006c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f99a 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c10:	e006      	b.n	8006c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f996 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c1e:	e175      	b.n	8006f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c20:	bf00      	nop
    return;
 8006c22:	e173      	b.n	8006f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	f040 814f 	bne.w	8006ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8148 	beq.w	8006ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8141 	beq.w	8006ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6a:	2b40      	cmp	r3, #64	@ 0x40
 8006c6c:	f040 80b6 	bne.w	8006ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8145 	beq.w	8006f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f080 813e 	bcs.w	8006f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca6:	f000 8088 	beq.w	8006dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1d9      	bne.n	8006caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3314      	adds	r3, #20
 8006cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e1      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3314      	adds	r3, #20
 8006d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e3      	bne.n	8006d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e3      	bne.n	8006d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fb fbbb 	bl	8002530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8c1 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dd6:	e09b      	b.n	8006f10 <HAL_UART_IRQHandler+0x518>
 8006dd8:	08007037 	.word	0x08007037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 808e 	beq.w	8006f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8089 	beq.w	8006f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e3      	bne.n	8006e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	623b      	str	r3, [r7, #32]
   return(result);
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e3      	bne.n	8006e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0310 	bic.w	r3, r3, #16
 8006e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ea4:	61fa      	str	r2, [r7, #28]
 8006ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	69b9      	ldr	r1, [r7, #24]
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e3      	bne.n	8006e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f847 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eca:	e023      	b.n	8006f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <HAL_UART_IRQHandler+0x4f4>
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f8ba 	bl	800705e <UART_Transmit_IT>
    return;
 8006eea:	e014      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <HAL_UART_IRQHandler+0x51e>
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8fa 	bl	80070fe <UART_EndTransmit_IT>
    return;
 8006f0a:	e004      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f14:	bf00      	nop
  }
}
 8006f16:	37e8      	adds	r7, #232	@ 0xe8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b095      	sub	sp, #84	@ 0x54
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f98:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3314      	adds	r3, #20
 8006fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3314      	adds	r3, #20
 8006fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e5      	bne.n	8006fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d119      	bne.n	800701c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f023 0310 	bic.w	r3, r3, #16
 8006ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007008:	61ba      	str	r2, [r7, #24]
 800700a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6979      	ldr	r1, [r7, #20]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	613b      	str	r3, [r7, #16]
   return(result);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e5      	bne.n	8006fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800702a:	bf00      	nop
 800702c:	3754      	adds	r7, #84	@ 0x54
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f7ff ff77 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b21      	cmp	r3, #33	@ 0x21
 8007070:	d13e      	bne.n	80070f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d114      	bne.n	80070a6 <UART_Transmit_IT+0x48>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d110      	bne.n	80070a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	621a      	str	r2, [r3, #32]
 80070a4:	e008      	b.n	80070b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6211      	str	r1, [r2, #32]
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4619      	mov	r1, r3
 80070c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10f      	bne.n	80070ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e000      	b.n	80070f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
  }
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fefc 	bl	8006f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b08c      	sub	sp, #48	@ 0x30
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b22      	cmp	r3, #34	@ 0x22
 8007140:	f040 80ae 	bne.w	80072a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800714c:	d117      	bne.n	800717e <UART_Receive_IT+0x50>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d113      	bne.n	800717e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	b29a      	uxth	r2, r3
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	1c9a      	adds	r2, r3, #2
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	@ 0x28
 800717c:	e026      	b.n	80071cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007190:	d007      	beq.n	80071a2 <UART_Receive_IT+0x74>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <UART_Receive_IT+0x82>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e008      	b.n	80071c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4619      	mov	r1, r3
 80071da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d15d      	bne.n	800729c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0220 	bic.w	r2, r2, #32
 80071ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0201 	bic.w	r2, r2, #1
 800720e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	2b01      	cmp	r3, #1
 8007224:	d135      	bne.n	8007292 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	613b      	str	r3, [r7, #16]
   return(result);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f023 0310 	bic.w	r3, r3, #16
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800724c:	623a      	str	r2, [r7, #32]
 800724e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	69f9      	ldr	r1, [r7, #28]
 8007252:	6a3a      	ldr	r2, [r7, #32]
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	61bb      	str	r3, [r7, #24]
   return(result);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b10      	cmp	r3, #16
 800726c:	d10a      	bne.n	8007284 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fe64 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
 8007290:	e002      	b.n	8007298 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fe4c 	bl	8006f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	e002      	b.n	80072a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	e000      	b.n	80072a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072a0:	2302      	movs	r3, #2
  }
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3730      	adds	r7, #48	@ 0x30
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b0:	b0c0      	sub	sp, #256	@ 0x100
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	68d9      	ldr	r1, [r3, #12]
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	ea40 0301 	orr.w	r3, r0, r1
 80072d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007304:	f021 010c 	bic.w	r1, r1, #12
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007312:	430b      	orrs	r3, r1
 8007314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007326:	6999      	ldr	r1, [r3, #24]
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	ea40 0301 	orr.w	r3, r0, r1
 8007332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b8f      	ldr	r3, [pc, #572]	@ (8007578 <UART_SetConfig+0x2cc>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d005      	beq.n	800734c <UART_SetConfig+0xa0>
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b8d      	ldr	r3, [pc, #564]	@ (800757c <UART_SetConfig+0x2d0>)
 8007348:	429a      	cmp	r2, r3
 800734a:	d104      	bne.n	8007356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800734c:	f7fc fbe8 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8007350:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007354:	e003      	b.n	800735e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007356:	f7fc fbcf 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800735a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007368:	f040 810c 	bne.w	8007584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800736c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007370:	2200      	movs	r2, #0
 8007372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007376:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800737a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800737e:	4622      	mov	r2, r4
 8007380:	462b      	mov	r3, r5
 8007382:	1891      	adds	r1, r2, r2
 8007384:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007386:	415b      	adcs	r3, r3
 8007388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800738a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800738e:	4621      	mov	r1, r4
 8007390:	eb12 0801 	adds.w	r8, r2, r1
 8007394:	4629      	mov	r1, r5
 8007396:	eb43 0901 	adc.w	r9, r3, r1
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ae:	4690      	mov	r8, r2
 80073b0:	4699      	mov	r9, r3
 80073b2:	4623      	mov	r3, r4
 80073b4:	eb18 0303 	adds.w	r3, r8, r3
 80073b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073bc:	462b      	mov	r3, r5
 80073be:	eb49 0303 	adc.w	r3, r9, r3
 80073c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073da:	460b      	mov	r3, r1
 80073dc:	18db      	adds	r3, r3, r3
 80073de:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e0:	4613      	mov	r3, r2
 80073e2:	eb42 0303 	adc.w	r3, r2, r3
 80073e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073f0:	f7f8 fef0 	bl	80001d4 <__aeabi_uldivmod>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4b61      	ldr	r3, [pc, #388]	@ (8007580 <UART_SetConfig+0x2d4>)
 80073fa:	fba3 2302 	umull	r2, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	011c      	lsls	r4, r3, #4
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800740c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007414:	4642      	mov	r2, r8
 8007416:	464b      	mov	r3, r9
 8007418:	1891      	adds	r1, r2, r2
 800741a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800741c:	415b      	adcs	r3, r3
 800741e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007424:	4641      	mov	r1, r8
 8007426:	eb12 0a01 	adds.w	sl, r2, r1
 800742a:	4649      	mov	r1, r9
 800742c:	eb43 0b01 	adc.w	fp, r3, r1
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800743c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007444:	4692      	mov	sl, r2
 8007446:	469b      	mov	fp, r3
 8007448:	4643      	mov	r3, r8
 800744a:	eb1a 0303 	adds.w	r3, sl, r3
 800744e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007452:	464b      	mov	r3, r9
 8007454:	eb4b 0303 	adc.w	r3, fp, r3
 8007458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007468:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800746c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007470:	460b      	mov	r3, r1
 8007472:	18db      	adds	r3, r3, r3
 8007474:	643b      	str	r3, [r7, #64]	@ 0x40
 8007476:	4613      	mov	r3, r2
 8007478:	eb42 0303 	adc.w	r3, r2, r3
 800747c:	647b      	str	r3, [r7, #68]	@ 0x44
 800747e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007486:	f7f8 fea5 	bl	80001d4 <__aeabi_uldivmod>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4611      	mov	r1, r2
 8007490:	4b3b      	ldr	r3, [pc, #236]	@ (8007580 <UART_SetConfig+0x2d4>)
 8007492:	fba3 2301 	umull	r2, r3, r3, r1
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2264      	movs	r2, #100	@ 0x64
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	1acb      	subs	r3, r1, r3
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074a6:	4b36      	ldr	r3, [pc, #216]	@ (8007580 <UART_SetConfig+0x2d4>)
 80074a8:	fba3 2302 	umull	r2, r3, r3, r2
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074b4:	441c      	add	r4, r3
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80074c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	1891      	adds	r1, r2, r2
 80074ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074d0:	415b      	adcs	r3, r3
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074d8:	4641      	mov	r1, r8
 80074da:	1851      	adds	r1, r2, r1
 80074dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80074de:	4649      	mov	r1, r9
 80074e0:	414b      	adcs	r3, r1
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074f0:	4659      	mov	r1, fp
 80074f2:	00cb      	lsls	r3, r1, #3
 80074f4:	4651      	mov	r1, sl
 80074f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fa:	4651      	mov	r1, sl
 80074fc:	00ca      	lsls	r2, r1, #3
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	4603      	mov	r3, r0
 8007504:	4642      	mov	r2, r8
 8007506:	189b      	adds	r3, r3, r2
 8007508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800750c:	464b      	mov	r3, r9
 800750e:	460a      	mov	r2, r1
 8007510:	eb42 0303 	adc.w	r3, r2, r3
 8007514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007524:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800752c:	460b      	mov	r3, r1
 800752e:	18db      	adds	r3, r3, r3
 8007530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007532:	4613      	mov	r3, r2
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800753a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800753e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007542:	f7f8 fe47 	bl	80001d4 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <UART_SetConfig+0x2d4>)
 800754c:	fba3 1302 	umull	r1, r3, r3, r2
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	2164      	movs	r1, #100	@ 0x64
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	3332      	adds	r3, #50	@ 0x32
 800755e:	4a08      	ldr	r2, [pc, #32]	@ (8007580 <UART_SetConfig+0x2d4>)
 8007560:	fba2 2303 	umull	r2, r3, r2, r3
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	f003 0207 	and.w	r2, r3, #7
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4422      	add	r2, r4
 8007572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007574:	e106      	b.n	8007784 <UART_SetConfig+0x4d8>
 8007576:	bf00      	nop
 8007578:	40011000 	.word	0x40011000
 800757c:	40011400 	.word	0x40011400
 8007580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007588:	2200      	movs	r2, #0
 800758a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800758e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007596:	4642      	mov	r2, r8
 8007598:	464b      	mov	r3, r9
 800759a:	1891      	adds	r1, r2, r2
 800759c:	6239      	str	r1, [r7, #32]
 800759e:	415b      	adcs	r3, r3
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075a6:	4641      	mov	r1, r8
 80075a8:	1854      	adds	r4, r2, r1
 80075aa:	4649      	mov	r1, r9
 80075ac:	eb43 0501 	adc.w	r5, r3, r1
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	00eb      	lsls	r3, r5, #3
 80075ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075be:	00e2      	lsls	r2, r4, #3
 80075c0:	4614      	mov	r4, r2
 80075c2:	461d      	mov	r5, r3
 80075c4:	4643      	mov	r3, r8
 80075c6:	18e3      	adds	r3, r4, r3
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075cc:	464b      	mov	r3, r9
 80075ce:	eb45 0303 	adc.w	r3, r5, r3
 80075d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075f2:	4629      	mov	r1, r5
 80075f4:	008b      	lsls	r3, r1, #2
 80075f6:	4621      	mov	r1, r4
 80075f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fc:	4621      	mov	r1, r4
 80075fe:	008a      	lsls	r2, r1, #2
 8007600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007604:	f7f8 fde6 	bl	80001d4 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4b60      	ldr	r3, [pc, #384]	@ (8007790 <UART_SetConfig+0x4e4>)
 800760e:	fba3 2302 	umull	r2, r3, r3, r2
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	011c      	lsls	r4, r3, #4
 8007616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	61b9      	str	r1, [r7, #24]
 8007630:	415b      	adcs	r3, r3
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007638:	4641      	mov	r1, r8
 800763a:	1851      	adds	r1, r2, r1
 800763c:	6139      	str	r1, [r7, #16]
 800763e:	4649      	mov	r1, r9
 8007640:	414b      	adcs	r3, r1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007650:	4659      	mov	r1, fp
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	4651      	mov	r1, sl
 8007656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765a:	4651      	mov	r1, sl
 800765c:	00ca      	lsls	r2, r1, #3
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	4603      	mov	r3, r0
 8007664:	4642      	mov	r2, r8
 8007666:	189b      	adds	r3, r3, r2
 8007668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800766c:	464b      	mov	r3, r9
 800766e:	460a      	mov	r2, r1
 8007670:	eb42 0303 	adc.w	r3, r2, r3
 8007674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007682:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007690:	4649      	mov	r1, r9
 8007692:	008b      	lsls	r3, r1, #2
 8007694:	4641      	mov	r1, r8
 8007696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769a:	4641      	mov	r1, r8
 800769c:	008a      	lsls	r2, r1, #2
 800769e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076a2:	f7f8 fd97 	bl	80001d4 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	4b38      	ldr	r3, [pc, #224]	@ (8007790 <UART_SetConfig+0x4e4>)
 80076ae:	fba3 2301 	umull	r2, r3, r3, r1
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	2264      	movs	r2, #100	@ 0x64
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	1acb      	subs	r3, r1, r3
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	3332      	adds	r3, #50	@ 0x32
 80076c0:	4a33      	ldr	r2, [pc, #204]	@ (8007790 <UART_SetConfig+0x4e4>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076cc:	441c      	add	r4, r3
 80076ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d2:	2200      	movs	r2, #0
 80076d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80076d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80076d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	1891      	adds	r1, r2, r2
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	415b      	adcs	r3, r3
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ec:	4641      	mov	r1, r8
 80076ee:	1851      	adds	r1, r2, r1
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	4649      	mov	r1, r9
 80076f4:	414b      	adcs	r3, r1
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007704:	4659      	mov	r1, fp
 8007706:	00cb      	lsls	r3, r1, #3
 8007708:	4651      	mov	r1, sl
 800770a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800770e:	4651      	mov	r1, sl
 8007710:	00ca      	lsls	r2, r1, #3
 8007712:	4610      	mov	r0, r2
 8007714:	4619      	mov	r1, r3
 8007716:	4603      	mov	r3, r0
 8007718:	4642      	mov	r2, r8
 800771a:	189b      	adds	r3, r3, r2
 800771c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800771e:	464b      	mov	r3, r9
 8007720:	460a      	mov	r2, r1
 8007722:	eb42 0303 	adc.w	r3, r2, r3
 8007726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	663b      	str	r3, [r7, #96]	@ 0x60
 8007732:	667a      	str	r2, [r7, #100]	@ 0x64
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007740:	4649      	mov	r1, r9
 8007742:	008b      	lsls	r3, r1, #2
 8007744:	4641      	mov	r1, r8
 8007746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774a:	4641      	mov	r1, r8
 800774c:	008a      	lsls	r2, r1, #2
 800774e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007752:	f7f8 fd3f 	bl	80001d4 <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4b0d      	ldr	r3, [pc, #52]	@ (8007790 <UART_SetConfig+0x4e4>)
 800775c:	fba3 1302 	umull	r1, r3, r3, r2
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	2164      	movs	r1, #100	@ 0x64
 8007764:	fb01 f303 	mul.w	r3, r1, r3
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	3332      	adds	r3, #50	@ 0x32
 800776e:	4a08      	ldr	r2, [pc, #32]	@ (8007790 <UART_SetConfig+0x4e4>)
 8007770:	fba2 2303 	umull	r2, r3, r2, r3
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4422      	add	r2, r4
 8007782:	609a      	str	r2, [r3, #8]
}
 8007784:	bf00      	nop
 8007786:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800778a:	46bd      	mov	sp, r7
 800778c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007790:	51eb851f 	.word	0x51eb851f

08007794 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007794:	b084      	sub	sp, #16
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	f107 001c 	add.w	r0, r7, #28
 80077a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80077aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80077ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80077ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80077b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80077b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80077b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80077ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80077be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80077ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	b004      	add	sp, #16
 80077e8:	4770      	bx	lr

080077ea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2203      	movs	r2, #3
 8007832:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0303 	and.w	r3, r3, #3
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800787c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007882:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007888:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007898:	f023 030f 	bic.w	r3, r3, #15
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	b2db      	uxtb	r3, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3314      	adds	r3, #20
 80078da:	461a      	mov	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	4413      	add	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
}  
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007918:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800791e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007924:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800793c:	2300      	movs	r3, #0

}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b088      	sub	sp, #32
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007958:	2310      	movs	r3, #16
 800795a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800795c:	2340      	movs	r3, #64	@ 0x40
 800795e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff74 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800797a:	2110      	movs	r1, #16
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fa19 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007984:	69fb      	ldr	r3, [r7, #28]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b088      	sub	sp, #32
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800799c:	2311      	movs	r3, #17
 800799e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079a0:	2340      	movs	r3, #64	@ 0x40
 80079a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff ff52 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80079ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079be:	2111      	movs	r1, #17
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9f7 	bl	8007db4 <SDMMC_GetCmdResp1>
 80079c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c8:	69fb      	ldr	r3, [r7, #28]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3720      	adds	r7, #32
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b088      	sub	sp, #32
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80079e0:	2312      	movs	r3, #18
 80079e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079e4:	2340      	movs	r3, #64	@ 0x40
 80079e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff ff30 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a02:	2112      	movs	r1, #18
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9d5 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007a24:	2318      	movs	r3, #24
 8007a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a28:	2340      	movs	r3, #64	@ 0x40
 8007a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a36:	f107 0308 	add.w	r3, r7, #8
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff ff0e 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a46:	2118      	movs	r1, #24
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9b3 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007a4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a50:	69fb      	ldr	r3, [r7, #28]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007a68:	2319      	movs	r3, #25
 8007a6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a6c:	2340      	movs	r3, #64	@ 0x40
 8007a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff feec 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a8a:	2119      	movs	r1, #25
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f991 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a94:	69fb      	ldr	r3, [r7, #28]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007aac:	230c      	movs	r3, #12
 8007aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ab0:	2340      	movs	r3, #64	@ 0x40
 8007ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007abc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007abe:	f107 0308 	add.w	r3, r7, #8
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff feca 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007aca:	4a05      	ldr	r2, [pc, #20]	@ (8007ae0 <SDMMC_CmdStopTransfer+0x40>)
 8007acc:	210c      	movs	r1, #12
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f970 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	05f5e100 	.word	0x05f5e100

08007ae4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	@ 0x28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007af4:	2307      	movs	r3, #7
 8007af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007af8:	2340      	movs	r3, #64	@ 0x40
 8007afa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b04:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b06:	f107 0310 	add.w	r3, r7, #16
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff fea6 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b16:	2107      	movs	r1, #7
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f94b 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007b1e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3728      	adds	r7, #40	@ 0x28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b088      	sub	sp, #32
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b48:	f107 0308 	add.w	r3, r7, #8
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fe85 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fb65 	bl	8008224 <SDMMC_GetCmdError>
 8007b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b088      	sub	sp, #32
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007b6e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007b74:	2308      	movs	r3, #8
 8007b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b78:	2340      	movs	r3, #64	@ 0x40
 8007b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fe66 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 faf8 	bl	8008188 <SDMMC_GetCmdResp7>
 8007b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3720      	adds	r7, #32
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007bb2:	2337      	movs	r3, #55	@ 0x37
 8007bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bb6:	2340      	movs	r3, #64	@ 0x40
 8007bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bc4:	f107 0308 	add.w	r3, r7, #8
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff fe47 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bd4:	2137      	movs	r1, #55	@ 0x37
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8ec 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bde:	69fb      	ldr	r3, [r7, #28]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007bfe:	2329      	movs	r3, #41	@ 0x29
 8007c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c02:	2340      	movs	r3, #64	@ 0x40
 8007c04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c10:	f107 0308 	add.w	r3, r7, #8
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fe21 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9ff 	bl	8008020 <SDMMC_GetCmdResp3>
 8007c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c24:	69fb      	ldr	r3, [r7, #28]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b088      	sub	sp, #32
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007c3c:	2306      	movs	r3, #6
 8007c3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c40:	2340      	movs	r3, #64	@ 0x40
 8007c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c4e:	f107 0308 	add.w	r3, r7, #8
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff fe02 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c5e:	2106      	movs	r1, #6
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f8a7 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c68:	69fb      	ldr	r3, [r7, #28]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b088      	sub	sp, #32
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007c7e:	2333      	movs	r3, #51	@ 0x33
 8007c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c82:	2340      	movs	r3, #64	@ 0x40
 8007c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c90:	f107 0308 	add.w	r3, r7, #8
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff fde1 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ca0:	2133      	movs	r1, #51	@ 0x33
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f886 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007caa:	69fb      	ldr	r3, [r7, #28]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007cc4:	23c0      	movs	r3, #192	@ 0xc0
 8007cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fdc0 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f956 	bl	8007f90 <SDMMC_GetCmdResp2>
 8007ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007cfe:	2309      	movs	r3, #9
 8007d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d02:	23c0      	movs	r3, #192	@ 0xc0
 8007d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d10:	f107 0308 	add.w	r3, r7, #8
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff fda1 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f937 	bl	8007f90 <SDMMC_GetCmdResp2>
 8007d22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d24:	69fb      	ldr	r3, [r7, #28]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b088      	sub	sp, #32
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d40:	2340      	movs	r3, #64	@ 0x40
 8007d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d4e:	f107 0308 	add.w	r3, r7, #8
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fd82 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	2103      	movs	r1, #3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f99c 	bl	800809c <SDMMC_GetCmdResp6>
 8007d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d66:	69fb      	ldr	r3, [r7, #28]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3720      	adds	r7, #32
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007d7e:	230d      	movs	r3, #13
 8007d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d82:	2340      	movs	r3, #64	@ 0x40
 8007d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d90:	f107 0308 	add.w	r3, r7, #8
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fd61 	bl	800785e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da0:	210d      	movs	r1, #13
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f806 	bl	8007db4 <SDMMC_GetCmdResp1>
 8007da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007daa:	69fb      	ldr	r3, [r7, #28]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3720      	adds	r7, #32
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007dc2:	4b70      	ldr	r3, [pc, #448]	@ (8007f84 <SDMMC_GetCmdResp1+0x1d0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a70      	ldr	r2, [pc, #448]	@ (8007f88 <SDMMC_GetCmdResp1+0x1d4>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	0a5a      	lsrs	r2, r3, #9
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	61fa      	str	r2, [r7, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007de0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007de4:	e0c9      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ef      	beq.n	8007dd6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1ea      	bne.n	8007dd6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2204      	movs	r2, #4
 8007e10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e12:	2304      	movs	r3, #4
 8007e14:	e0b1      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0a6      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	22c5      	movs	r2, #197	@ 0xc5
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff fd3d 	bl	80078b2 <SDIO_GetCommandResponse>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d001      	beq.n	8007e46 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e099      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fd3f 	bl	80078cc <SDIO_GetResponse>
 8007e4e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4b4e      	ldr	r3, [pc, #312]	@ (8007f8c <SDMMC_GetCmdResp1+0x1d8>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e08d      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da02      	bge.n	8007e6a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e68:	e087      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e74:	2340      	movs	r3, #64	@ 0x40
 8007e76:	e080      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	e079      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e94:	e071      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ea4:	e069      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eb4:	e061      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ec4:	e059      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ed4:	e051      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ee4:	e049      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ef0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ef4:	e041      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f04:	e039      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007f10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007f14:	e031      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007f24:	e029      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f34:	e021      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007f44:	e019      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007f50:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f54:	e011      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007f60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007f64:	e009      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 0308 	and.w	r3, r3, #8
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f70:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007f74:	e001      	b.n	8007f7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3720      	adds	r7, #32
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000000 	.word	0x20000000
 8007f88:	10624dd3 	.word	0x10624dd3
 8007f8c:	fdffe008 	.word	0xfdffe008

08007f90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f98:	4b1f      	ldr	r3, [pc, #124]	@ (8008018 <SDMMC_GetCmdResp2+0x88>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800801c <SDMMC_GetCmdResp2+0x8c>)
 8007f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa2:	0a5b      	lsrs	r3, r3, #9
 8007fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fa8:	fb02 f303 	mul.w	r3, r2, r3
 8007fac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1e5a      	subs	r2, r3, #1
 8007fb2:	60fa      	str	r2, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fbc:	e026      	b.n	800800c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0ef      	beq.n	8007fae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1ea      	bne.n	8007fae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2204      	movs	r2, #4
 8007fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fea:	2304      	movs	r3, #4
 8007fec:	e00e      	b.n	800800c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008000:	2301      	movs	r3, #1
 8008002:	e003      	b.n	800800c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	22c5      	movs	r2, #197	@ 0xc5
 8008008:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20000000 	.word	0x20000000
 800801c:	10624dd3 	.word	0x10624dd3

08008020 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008028:	4b1a      	ldr	r3, [pc, #104]	@ (8008094 <SDMMC_GetCmdResp3+0x74>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1a      	ldr	r2, [pc, #104]	@ (8008098 <SDMMC_GetCmdResp3+0x78>)
 800802e:	fba2 2303 	umull	r2, r3, r2, r3
 8008032:	0a5b      	lsrs	r3, r3, #9
 8008034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008038:	fb02 f303 	mul.w	r3, r2, r3
 800803c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1e5a      	subs	r2, r3, #1
 8008042:	60fa      	str	r2, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008048:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800804c:	e01b      	b.n	8008086 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008052:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0ef      	beq.n	800803e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ea      	bne.n	800803e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d004      	beq.n	800807e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2204      	movs	r2, #4
 8008078:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800807a:	2304      	movs	r3, #4
 800807c:	e003      	b.n	8008086 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	22c5      	movs	r2, #197	@ 0xc5
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000000 	.word	0x20000000
 8008098:	10624dd3 	.word	0x10624dd3

0800809c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	460b      	mov	r3, r1
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080aa:	4b35      	ldr	r3, [pc, #212]	@ (8008180 <SDMMC_GetCmdResp6+0xe4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a35      	ldr	r2, [pc, #212]	@ (8008184 <SDMMC_GetCmdResp6+0xe8>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	0a5b      	lsrs	r3, r3, #9
 80080b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	61fa      	str	r2, [r7, #28]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80080ce:	e052      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0ef      	beq.n	80080c0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1ea      	bne.n	80080c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2204      	movs	r2, #4
 80080fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080fc:	2304      	movs	r3, #4
 80080fe:	e03a      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008112:	2301      	movs	r3, #1
 8008114:	e02f      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f7ff fbcb 	bl	80078b2 <SDIO_GetCommandResponse>
 800811c:	4603      	mov	r3, r0
 800811e:	461a      	mov	r2, r3
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	4293      	cmp	r3, r2
 8008124:	d001      	beq.n	800812a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008126:	2301      	movs	r3, #1
 8008128:	e025      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	22c5      	movs	r2, #197	@ 0xc5
 800812e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008130:	2100      	movs	r1, #0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fbca 	bl	80078cc <SDIO_GetResponse>
 8008138:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800814e:	2300      	movs	r3, #0
 8008150:	e011      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800815c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008160:	e009      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800816c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008170:	e001      	b.n	8008176 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000000 	.word	0x20000000
 8008184:	10624dd3 	.word	0x10624dd3

08008188 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008190:	4b22      	ldr	r3, [pc, #136]	@ (800821c <SDMMC_GetCmdResp7+0x94>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a22      	ldr	r2, [pc, #136]	@ (8008220 <SDMMC_GetCmdResp7+0x98>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	0a5b      	lsrs	r3, r3, #9
 800819c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	60fa      	str	r2, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80081b4:	e02c      	b.n	8008210 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0ef      	beq.n	80081a6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ea      	bne.n	80081a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2204      	movs	r2, #4
 80081e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081e2:	2304      	movs	r3, #4
 80081e4:	e014      	b.n	8008210 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e009      	b.n	8008210 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2240      	movs	r2, #64	@ 0x40
 800820c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800820e:	2300      	movs	r3, #0
  
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	20000000 	.word	0x20000000
 8008220:	10624dd3 	.word	0x10624dd3

08008224 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800822c:	4b11      	ldr	r3, [pc, #68]	@ (8008274 <SDMMC_GetCmdError+0x50>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a11      	ldr	r2, [pc, #68]	@ (8008278 <SDMMC_GetCmdError+0x54>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	0a5b      	lsrs	r3, r3, #9
 8008238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800823c:	fb02 f303 	mul.w	r3, r2, r3
 8008240:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1e5a      	subs	r2, r3, #1
 8008246:	60fa      	str	r2, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800824c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008250:	e009      	b.n	8008266 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f1      	beq.n	8008242 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	22c5      	movs	r2, #197	@ 0xc5
 8008262:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	20000000 	.word	0x20000000
 8008278:	10624dd3 	.word	0x10624dd3

0800827c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008280:	4904      	ldr	r1, [pc, #16]	@ (8008294 <MX_FATFS_Init+0x18>)
 8008282:	4805      	ldr	r0, [pc, #20]	@ (8008298 <MX_FATFS_Init+0x1c>)
 8008284:	f000 faa0 	bl	80087c8 <FATFS_LinkDriver>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	4b03      	ldr	r3, [pc, #12]	@ (800829c <MX_FATFS_Init+0x20>)
 800828e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000454 	.word	0x20000454
 8008298:	08008878 	.word	0x08008878
 800829c:	20000450 	.word	0x20000450

080082a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80082aa:	f000 f896 	bl	80083da <BSP_SD_IsDetected>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d001      	beq.n	80082b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e012      	b.n	80082de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80082b8:	480b      	ldr	r0, [pc, #44]	@ (80082e8 <BSP_SD_Init+0x48>)
 80082ba:	f7fb ffee 	bl	800429a <HAL_SD_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d109      	bne.n	80082dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80082c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082cc:	4806      	ldr	r0, [pc, #24]	@ (80082e8 <BSP_SD_Init+0x48>)
 80082ce:	f7fc fdbd 	bl	8004e4c <HAL_SD_ConfigWideBusOperation>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80082dc:	79fb      	ldrb	r3, [r7, #7]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000148 	.word	0x20000148

080082ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	68f9      	ldr	r1, [r7, #12]
 8008302:	4806      	ldr	r0, [pc, #24]	@ (800831c <BSP_SD_ReadBlocks_DMA+0x30>)
 8008304:	f7fc f87a 	bl	80043fc <HAL_SD_ReadBlocks_DMA>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000148 	.word	0x20000148

08008320 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	68f9      	ldr	r1, [r7, #12]
 8008336:	4806      	ldr	r0, [pc, #24]	@ (8008350 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008338:	f7fc f942 	bl	80045c0 <HAL_SD_WriteBlocks_DMA>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000148 	.word	0x20000148

08008354 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008358:	4805      	ldr	r0, [pc, #20]	@ (8008370 <BSP_SD_GetCardState+0x1c>)
 800835a:	f7fc fe11 	bl	8004f80 <HAL_SD_GetCardState>
 800835e:	4603      	mov	r3, r0
 8008360:	2b04      	cmp	r3, #4
 8008362:	bf14      	ite	ne
 8008364:	2301      	movne	r3, #1
 8008366:	2300      	moveq	r3, #0
 8008368:	b2db      	uxtb	r3, r3
}
 800836a:	4618      	mov	r0, r3
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000148 	.word	0x20000148

08008374 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800837c:	6879      	ldr	r1, [r7, #4]
 800837e:	4803      	ldr	r0, [pc, #12]	@ (800838c <BSP_SD_GetCardInfo+0x18>)
 8008380:	f7fc fd38 	bl	8004df4 <HAL_SD_GetCardInfo>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20000148 	.word	0x20000148

08008390 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008398:	f000 f818 	bl	80083cc <BSP_SD_AbortCallback>
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80083ac:	f000 f9a8 	bl	8008700 <BSP_SD_WriteCpltCallback>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80083c0:	f000 f9aa 	bl	8008718 <BSP_SD_ReadCpltCallback>
}
 80083c4:	bf00      	nop
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0

}
 80083d0:	bf00      	nop
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80083e0:	2301      	movs	r3, #1
 80083e2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80083e4:	f000 f80c 	bl	8008400 <BSP_PlatformIsDetected>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80083ee:	2300      	movs	r3, #0
 80083f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	b2db      	uxtb	r3, r3
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008406:	2301      	movs	r3, #1
 8008408:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800840a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800840e:	4806      	ldr	r0, [pc, #24]	@ (8008428 <BSP_PlatformIsDetected+0x28>)
 8008410:	f7fa fd1a 	bl	8002e48 <HAL_GPIO_ReadPin>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800841a:	2300      	movs	r3, #0
 800841c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800841e:	79fb      	ldrb	r3, [r7, #7]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40020000 	.word	0x40020000

0800842c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008434:	f7f9 fa9a 	bl	800196c <HAL_GetTick>
 8008438:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800843a:	e006      	b.n	800844a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800843c:	f7ff ff8a 	bl	8008354 <BSP_SD_GetCardState>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008446:	2300      	movs	r3, #0
 8008448:	e009      	b.n	800845e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800844a:	f7f9 fa8f 	bl	800196c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d8f0      	bhi.n	800843c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800845a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008472:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <SD_CheckStatus+0x38>)
 8008474:	2201      	movs	r2, #1
 8008476:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008478:	f7ff ff6c 	bl	8008354 <BSP_SD_GetCardState>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d107      	bne.n	8008492 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008482:	4b07      	ldr	r3, [pc, #28]	@ (80084a0 <SD_CheckStatus+0x38>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f023 0301 	bic.w	r3, r3, #1
 800848c:	b2da      	uxtb	r2, r3
 800848e:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <SD_CheckStatus+0x38>)
 8008490:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008492:	4b03      	ldr	r3, [pc, #12]	@ (80084a0 <SD_CheckStatus+0x38>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b2db      	uxtb	r3, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000009 	.word	0x20000009

080084a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80084ae:	f7ff fef7 	bl	80082a0 <BSP_SD_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d107      	bne.n	80084c8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ffd4 	bl	8008468 <SD_CheckStatus>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	4b04      	ldr	r3, [pc, #16]	@ (80084d8 <SD_initialize+0x34>)
 80084c6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80084c8:	4b03      	ldr	r3, [pc, #12]	@ (80084d8 <SD_initialize+0x34>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	b2db      	uxtb	r3, r3
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000009 	.word	0x20000009

080084dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff ffbd 	bl	8008468 <SD_CheckStatus>
 80084ee:	4603      	mov	r3, r0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800850c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008510:	f7ff ff8c 	bl	800842c <SD_CheckStatusWithTimeout>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	da01      	bge.n	800851e <SD_read+0x26>
  {
    return res;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	e03b      	b.n	8008596 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	68b8      	ldr	r0, [r7, #8]
 8008524:	f7ff fee2 	bl	80082ec <BSP_SD_ReadBlocks_DMA>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d132      	bne.n	8008594 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800852e:	4b1c      	ldr	r3, [pc, #112]	@ (80085a0 <SD_read+0xa8>)
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008534:	f7f9 fa1a 	bl	800196c <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800853a:	bf00      	nop
 800853c:	4b18      	ldr	r3, [pc, #96]	@ (80085a0 <SD_read+0xa8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d108      	bne.n	8008556 <SD_read+0x5e>
 8008544:	f7f9 fa12 	bl	800196c <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008552:	4293      	cmp	r3, r2
 8008554:	d9f2      	bls.n	800853c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008556:	4b12      	ldr	r3, [pc, #72]	@ (80085a0 <SD_read+0xa8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	75fb      	strb	r3, [r7, #23]
 8008562:	e017      	b.n	8008594 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008564:	4b0e      	ldr	r3, [pc, #56]	@ (80085a0 <SD_read+0xa8>)
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800856a:	f7f9 f9ff 	bl	800196c <HAL_GetTick>
 800856e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008570:	e007      	b.n	8008582 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008572:	f7ff feef 	bl	8008354 <BSP_SD_GetCardState>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <SD_read+0x8a>
          {
            res = RES_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008580:	e008      	b.n	8008594 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008582:	f7f9 f9f3 	bl	800196c <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008590:	4293      	cmp	r3, r2
 8008592:	d9ee      	bls.n	8008572 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	2000045c 	.word	0x2000045c

080085a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80085b8:	4b24      	ldr	r3, [pc, #144]	@ (800864c <SD_write+0xa8>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80085be:	f247 5030 	movw	r0, #30000	@ 0x7530
 80085c2:	f7ff ff33 	bl	800842c <SD_CheckStatusWithTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da01      	bge.n	80085d0 <SD_write+0x2c>
  {
    return res;
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	e038      	b.n	8008642 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	68b8      	ldr	r0, [r7, #8]
 80085d6:	f7ff fea3 	bl	8008320 <BSP_SD_WriteBlocks_DMA>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d12f      	bne.n	8008640 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80085e0:	f7f9 f9c4 	bl	800196c <HAL_GetTick>
 80085e4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80085e6:	bf00      	nop
 80085e8:	4b18      	ldr	r3, [pc, #96]	@ (800864c <SD_write+0xa8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d108      	bne.n	8008602 <SD_write+0x5e>
 80085f0:	f7f9 f9bc 	bl	800196c <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80085fe:	4293      	cmp	r3, r2
 8008600:	d9f2      	bls.n	80085e8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008602:	4b12      	ldr	r3, [pc, #72]	@ (800864c <SD_write+0xa8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d102      	bne.n	8008610 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75fb      	strb	r3, [r7, #23]
 800860e:	e017      	b.n	8008640 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008610:	4b0e      	ldr	r3, [pc, #56]	@ (800864c <SD_write+0xa8>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008616:	f7f9 f9a9 	bl	800196c <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800861c:	e007      	b.n	800862e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800861e:	f7ff fe99 	bl	8008354 <BSP_SD_GetCardState>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <SD_write+0x8a>
          {
            res = RES_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	75fb      	strb	r3, [r7, #23]
            break;
 800862c:	e008      	b.n	8008640 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800862e:	f7f9 f99d 	bl	800196c <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	f247 522f 	movw	r2, #29999	@ 0x752f
 800863c:	4293      	cmp	r3, r2
 800863e:	d9ee      	bls.n	800861e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000458 	.word	0x20000458

08008650 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08c      	sub	sp, #48	@ 0x30
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	603a      	str	r2, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
 800865c:	460b      	mov	r3, r1
 800865e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008666:	4b25      	ldr	r3, [pc, #148]	@ (80086fc <SD_ioctl+0xac>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <SD_ioctl+0x28>
 8008674:	2303      	movs	r3, #3
 8008676:	e03c      	b.n	80086f2 <SD_ioctl+0xa2>

  switch (cmd)
 8008678:	79bb      	ldrb	r3, [r7, #6]
 800867a:	2b03      	cmp	r3, #3
 800867c:	d834      	bhi.n	80086e8 <SD_ioctl+0x98>
 800867e:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <SD_ioctl+0x34>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008695 	.word	0x08008695
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086cf 	.word	0x080086cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800869a:	e028      	b.n	80086ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800869c:	f107 030c 	add.w	r3, r7, #12
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fe67 	bl	8008374 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80086a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80086b2:	e01c      	b.n	80086ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80086b4:	f107 030c 	add.w	r3, r7, #12
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff fe5b 	bl	8008374 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80086cc:	e00f      	b.n	80086ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fe4e 	bl	8008374 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	0a5a      	lsrs	r2, r3, #9
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80086e6:	e002      	b.n	80086ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80086e8:	2304      	movs	r3, #4
 80086ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80086ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3730      	adds	r7, #48	@ 0x30
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000009 	.word	0x20000009

08008700 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008704:	4b03      	ldr	r3, [pc, #12]	@ (8008714 <BSP_SD_WriteCpltCallback+0x14>)
 8008706:	2201      	movs	r2, #1
 8008708:	601a      	str	r2, [r3, #0]
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	20000458 	.word	0x20000458

08008718 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800871c:	4b03      	ldr	r3, [pc, #12]	@ (800872c <BSP_SD_ReadCpltCallback+0x14>)
 800871e:	2201      	movs	r2, #1
 8008720:	601a      	str	r2, [r3, #0]
}
 8008722:	bf00      	nop
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	2000045c 	.word	0x2000045c

08008730 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008746:	4b1f      	ldr	r3, [pc, #124]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008748:	7a5b      	ldrb	r3, [r3, #9]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d131      	bne.n	80087b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008750:	4b1c      	ldr	r3, [pc, #112]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008752:	7a5b      	ldrb	r3, [r3, #9]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	4b1a      	ldr	r3, [pc, #104]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 800875a:	2100      	movs	r1, #0
 800875c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800875e:	4b19      	ldr	r3, [pc, #100]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008760:	7a5b      	ldrb	r3, [r3, #9]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4a17      	ldr	r2, [pc, #92]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800876e:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008770:	7a5b      	ldrb	r3, [r3, #9]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	4b13      	ldr	r3, [pc, #76]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008778:	4413      	add	r3, r2
 800877a:	79fa      	ldrb	r2, [r7, #7]
 800877c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800877e:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 8008780:	7a5b      	ldrb	r3, [r3, #9]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	b2d1      	uxtb	r1, r2
 8008788:	4a0e      	ldr	r2, [pc, #56]	@ (80087c4 <FATFS_LinkDriverEx+0x94>)
 800878a:	7251      	strb	r1, [r2, #9]
 800878c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800878e:	7dbb      	ldrb	r3, [r7, #22]
 8008790:	3330      	adds	r3, #48	@ 0x30
 8008792:	b2da      	uxtb	r2, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3301      	adds	r3, #1
 800879c:	223a      	movs	r2, #58	@ 0x3a
 800879e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3302      	adds	r3, #2
 80087a4:	222f      	movs	r2, #47	@ 0x2f
 80087a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3303      	adds	r3, #3
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	20000460 	.word	0x20000460

080087c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087d2:	2200      	movs	r2, #0
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff ffaa 	bl	8008730 <FATFS_LinkDriverEx>
 80087dc:	4603      	mov	r3, r0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <memset>:
 80087e6:	4402      	add	r2, r0
 80087e8:	4603      	mov	r3, r0
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d100      	bne.n	80087f0 <memset+0xa>
 80087ee:	4770      	bx	lr
 80087f0:	f803 1b01 	strb.w	r1, [r3], #1
 80087f4:	e7f9      	b.n	80087ea <memset+0x4>
	...

080087f8 <__libc_init_array>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008830 <__libc_init_array+0x38>)
 80087fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008834 <__libc_init_array+0x3c>)
 80087fe:	1b64      	subs	r4, r4, r5
 8008800:	10a4      	asrs	r4, r4, #2
 8008802:	2600      	movs	r6, #0
 8008804:	42a6      	cmp	r6, r4
 8008806:	d109      	bne.n	800881c <__libc_init_array+0x24>
 8008808:	4d0b      	ldr	r5, [pc, #44]	@ (8008838 <__libc_init_array+0x40>)
 800880a:	4c0c      	ldr	r4, [pc, #48]	@ (800883c <__libc_init_array+0x44>)
 800880c:	f000 f818 	bl	8008840 <_init>
 8008810:	1b64      	subs	r4, r4, r5
 8008812:	10a4      	asrs	r4, r4, #2
 8008814:	2600      	movs	r6, #0
 8008816:	42a6      	cmp	r6, r4
 8008818:	d105      	bne.n	8008826 <__libc_init_array+0x2e>
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008820:	4798      	blx	r3
 8008822:	3601      	adds	r6, #1
 8008824:	e7ee      	b.n	8008804 <__libc_init_array+0xc>
 8008826:	f855 3b04 	ldr.w	r3, [r5], #4
 800882a:	4798      	blx	r3
 800882c:	3601      	adds	r6, #1
 800882e:	e7f2      	b.n	8008816 <__libc_init_array+0x1e>
 8008830:	08008894 	.word	0x08008894
 8008834:	08008894 	.word	0x08008894
 8008838:	08008894 	.word	0x08008894
 800883c:	08008898 	.word	0x08008898

08008840 <_init>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr

0800884c <_fini>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	bf00      	nop
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr
