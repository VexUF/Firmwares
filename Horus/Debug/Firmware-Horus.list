
Firmware-Horus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800d950  0800d950  0000e950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9cc  0800d9cc  0000f0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9cc  0800d9cc  0000e9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9d4  0800d9d4  0000f0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9d4  0800d9d4  0000e9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9d8  0800d9d8  0000e9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800d9dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  200000fc  0800dad8  0000f0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001924  0800dad8  0000f924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d28  00000000  00000000  0000f12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f74  00000000  00000000  00034e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002148  00000000  00000000  0003adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019a0  00000000  00000000  0003cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020675  00000000  00000000  0003e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e467  00000000  00000000  0005ef25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae37c  00000000  00000000  0008d38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a40  00000000  00000000  0013b74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800d938 	.word	0x0800d938

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800d938 	.word	0x0800d938

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	@ (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <MX_ADC1_Init+0x98>)
 80004de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fe:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b15      	ldr	r3, [pc, #84]	@ (800055c <MX_ADC1_Init+0x98>)
 8000506:	4a17      	ldr	r2, [pc, #92]	@ (8000564 <MX_ADC1_Init+0xa0>)
 8000508:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050a:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000510:	4b12      	ldr	r3, [pc, #72]	@ (800055c <MX_ADC1_Init+0x98>)
 8000512:	2201      	movs	r2, #1
 8000514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_ADC1_Init+0x98>)
 8000520:	2201      	movs	r2, #1
 8000522:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <MX_ADC1_Init+0x98>)
 8000526:	f001 fa0d 	bl	8001944 <HAL_ADC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000530:	f000 fa96 	bl	8000a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000534:	230f      	movs	r3, #15
 8000536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <MX_ADC1_Init+0x98>)
 8000546:	f001 fa41 	bl	80019cc <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000550:	f000 fa86 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000118 	.word	0x20000118
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a24      	ldr	r2, [pc, #144]	@ (8000618 <HAL_ADC_MspInit+0xb0>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d141      	bne.n	800060e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b23      	ldr	r3, [pc, #140]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	4a22      	ldr	r2, [pc, #136]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000598:	6453      	str	r3, [r2, #68]	@ 0x44
 800059a:	4b20      	ldr	r3, [pc, #128]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a1b      	ldr	r2, [pc, #108]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_ADC_MspInit+0xb4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Av1_Pin;
 80005de:	2320      	movs	r3, #32
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Av1_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	480b      	ldr	r0, [pc, #44]	@ (8000620 <HAL_ADC_MspInit+0xb8>)
 80005f2:	f002 f929 	bl	8002848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Av2_Pin|Av3_Pin;
 80005f6:	2303      	movs	r3, #3
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fa:	2303      	movs	r3, #3
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4806      	ldr	r0, [pc, #24]	@ (8000624 <HAL_ADC_MspInit+0xbc>)
 800060a:	f002 f91d 	bl	8002848 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	@ 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40012000 	.word	0x40012000
 800061c:	40023800 	.word	0x40023800
 8000620:	40020800 	.word	0x40020800
 8000624:	40020400 	.word	0x40020400

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_DMA_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <MX_DMA_Init+0x4c>)
 8000638:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_DMA_Init+0x4c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	203b      	movs	r0, #59	@ 0x3b
 8000650:	f001 fcb5 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000654:	203b      	movs	r0, #59	@ 0x3b
 8000656:	f001 fcce 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2045      	movs	r0, #69	@ 0x45
 8000660:	f001 fcad 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000664:	2045      	movs	r0, #69	@ 0x45
 8000666:	f001 fcc6 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b65      	ldr	r3, [pc, #404]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a64      	ldr	r2, [pc, #400]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b62      	ldr	r3, [pc, #392]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b5e      	ldr	r3, [pc, #376]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a5d      	ldr	r2, [pc, #372]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b57      	ldr	r3, [pc, #348]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a56      	ldr	r2, [pc, #344]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b54      	ldr	r3, [pc, #336]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a4f      	ldr	r2, [pc, #316]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b49      	ldr	r3, [pc, #292]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a48      	ldr	r2, [pc, #288]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b46      	ldr	r3, [pc, #280]	@ (8000828 <MX_GPIO_Init+0x1b0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ErrorLD_Pin|WarnLD_Pin|InfoLD_Pin|SDCardLD_Pin
 800071a:	2200      	movs	r2, #0
 800071c:	211f      	movs	r1, #31
 800071e:	4843      	ldr	r0, [pc, #268]	@ (800082c <MX_GPIO_Init+0x1b4>)
 8000720:	f002 fa2e 	bl	8002b80 <HAL_GPIO_WritePin>
                          |MemOrg_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AV3LD_Pin|AV2LD_Pin|AV1LD_Pin|MemCS_Pin
 8000724:	2200      	movs	r2, #0
 8000726:	211f      	movs	r1, #31
 8000728:	4841      	ldr	r0, [pc, #260]	@ (8000830 <MX_GPIO_Init+0x1b8>)
 800072a:	f002 fa29 	bl	8002b80 <HAL_GPIO_WritePin>
                          |SpiCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ActDa_Pin|ActLa_Pin|ActCk_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000734:	483f      	ldr	r0, [pc, #252]	@ (8000834 <MX_GPIO_Init+0x1bc>)
 8000736:	f002 fa23 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = ErrorLD_Pin|WarnLD_Pin|InfoLD_Pin|SDCardLD_Pin
 800073a:	231f      	movs	r3, #31
 800073c:	617b      	str	r3, [r7, #20]
                          |MemOrg_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4836      	ldr	r0, [pc, #216]	@ (800082c <MX_GPIO_Init+0x1b4>)
 8000752:	f002 f879 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = AV3LD_Pin|AV2LD_Pin|AV1LD_Pin|MemCS_Pin
 8000756:	231f      	movs	r3, #31
 8000758:	617b      	str	r3, [r7, #20]
                          |SpiCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4830      	ldr	r0, [pc, #192]	@ (8000830 <MX_GPIO_Init+0x1b8>)
 800076e:	f002 f86b 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8000772:	2304      	movs	r3, #4
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	482b      	ldr	r0, [pc, #172]	@ (8000834 <MX_GPIO_Init+0x1bc>)
 8000786:	f002 f85f 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ActDa_Pin|ActLa_Pin|ActCk_Pin;
 800078a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4824      	ldr	r0, [pc, #144]	@ (8000834 <MX_GPIO_Init+0x1bc>)
 80007a4:	f002 f850 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ActLD_Pin;
 80007a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ActLD_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	481d      	ldr	r0, [pc, #116]	@ (8000834 <MX_GPIO_Init+0x1bc>)
 80007c0:	f002 f842 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80007c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <MX_GPIO_Init+0x1b8>)
 80007e2:	f002 f831 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SdioDet_Pin;
 80007e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SdioDet_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_GPIO_Init+0x1b8>)
 80007fc:	f002 f824 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Evt_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8000810:	230f      	movs	r3, #15
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Evt_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <MX_GPIO_Init+0x1bc>)
 800081c:	f002 f814 	bl	8002848 <HAL_GPIO_Init>

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020800 	.word	0x40020800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400

08000838 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_I2C1_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_I2C1_Init+0x50>)
 8000876:	f002 f99d 	bl	8002bb4 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 f8ee 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000160 	.word	0x20000160
 800088c:	40005400 	.word	0x40005400
 8000890:	000186a0 	.word	0x000186a0

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	@ (8000918 <HAL_I2C_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_I2C_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a17      	ldr	r2, [pc, #92]	@ (800091c <HAL_I2C_MspInit+0x88>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2cCk_Pin|I2cDa_Pin;
 80008d2:	23c0      	movs	r3, #192	@ 0xc0
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <HAL_I2C_MspInit+0x8c>)
 80008ee:	f001 ffab 	bl	8002848 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <HAL_I2C_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	@ (800091c <HAL_I2C_MspInit+0x88>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_I2C_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	@ 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 ff76 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f820 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff fea2 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000934:	f7ff fe78 	bl	8000628 <MX_DMA_Init>
  MX_I2C1_Init();
 8000938:	f7ff ff7e 	bl	8000838 <MX_I2C1_Init>
  MX_RTC_Init();
 800093c:	f000 f896 	bl	8000a6c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000940:	f000 f944 	bl	8000bcc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000944:	f000 fa5a 	bl	8000dfc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000948:	f000 fe5a 	bl	8001600 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800094c:	f000 fe82 	bl	8001654 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000950:	f00a f8a0 	bl	800aa94 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000954:	f00c fada 	bl	800cf0c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000958:	f7ff fdb4 	bl	80004c4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800095c:	f000 fbae 	bl	80010bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000960:	f000 fc22 	bl	80011a8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000964:	f000 fc7a 	bl	800125c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000968:	f000 fcc6 	bl	80012f8 <MX_TIM11_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <main+0x48>

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	@ 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00c ffae 	bl	800d8e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <SystemClock_Config+0xe8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <SystemClock_Config+0xe8>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <SystemClock_Config+0xe8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemClock_Config+0xec>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009bc:	4a27      	ldr	r2, [pc, #156]	@ (8000a5c <SystemClock_Config+0xec>)
 80009be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <SystemClock_Config+0xec>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80009d0:	2307      	movs	r3, #7
 80009d2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009de:	2301      	movs	r3, #1
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2310      	movs	r3, #16
 80009e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f0:	2308      	movs	r3, #8
 80009f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f4:	23a8      	movs	r3, #168	@ 0xa8
 80009f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fc69 	bl	80042dc <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a10:	f000 f826 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fecb 	bl	80047cc <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a3c:	f000 f810 	bl	8000a60 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f003 ffa7 	bl	8004998 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a4a:	f004 f80d 	bl	8004a68 <HAL_RCC_EnableCSS>
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	@ 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	@ 0x38
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  RTC_TamperTypeDef sTamper = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00c ff27 	bl	800d8e0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a92:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000a94:	4a36      	ldr	r2, [pc, #216]	@ (8000b70 <MX_RTC_Init+0x104>)
 8000a96:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a9e:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000aa0:	227f      	movs	r2, #127	@ 0x7f
 8000aa2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000aa6:	22ff      	movs	r2, #255	@ 0xff
 8000aa8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aaa:	4b30      	ldr	r3, [pc, #192]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000abc:	482b      	ldr	r0, [pc, #172]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000abe:	f004 fa21 	bl	8004f04 <HAL_RTC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ac8:	f7ff ffca 	bl	8000a60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sTime.Minutes = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sTime.Seconds = 0x0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aea:	2201      	movs	r2, #1
 8000aec:	4619      	mov	r1, r3
 8000aee:	481f      	ldr	r0, [pc, #124]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000af0:	f004 fa8b 	bl	800500a <HAL_RTC_SetTime>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000afa:	f7ff ffb1 	bl	8000a60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sDate.Date = 0x1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sDate.Year = 0x0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b16:	f107 0320 	add.w	r3, r7, #32
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000b20:	f004 fb0d 	bl	800513e <HAL_RTC_SetDate>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000b2a:	f7ff ff99 	bl	8000a60 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	603b      	str	r3, [r7, #0]
  sTamper.PinSelection = RTC_TAMPERPIN_DEFAULT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000b4a:	2380      	movs	r3, #128	@ 0x80
 8000b4c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_RTC_Init+0x100>)
 8000b54:	f004 fc18 	bl	8005388 <HAL_RTCEx_SetTamper>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8000b5e:	f7ff ff7f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3738      	adds	r7, #56	@ 0x38
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001b4 	.word	0x200001b4
 8000b70:	40002800 	.word	0x40002800

08000b74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <HAL_RTC_MspInit+0x50>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d111      	bne.n	8000bba <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 f8bf 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000bb0:	f7ff ff56 	bl	8000a60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <HAL_RTC_MspInit+0x54>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40002800 	.word	0x40002800
 8000bc8:	42470e3c 	.word	0x42470e3c

08000bcc <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDIO_Init 0 */
	hsd.Instance = SDIO;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bd2:	4a11      	ldr	r2, [pc, #68]	@ (8000c18 <MX_SDIO_SD_Init+0x4c>)
 8000bd4:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */
	if (HAL_SD_Init(&hsd) == HAL_OK) {
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000bfc:	f004 fc21 	bl	8005442 <HAL_SD_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d104      	bne.n	8000c10 <MX_SDIO_SD_Init+0x44>
		HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B);
 8000c06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c0a:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <MX_SDIO_SD_Init+0x48>)
 8000c0c:	f005 f9f2 	bl	8005ff4 <HAL_SD_ConfigWideBusOperation>
  /* USER CODE END SDIO_Init 1 */
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200001d4 	.word	0x200001d4
 8000c18:	40012c00 	.word	0x40012c00

08000c1c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a68      	ldr	r2, [pc, #416]	@ (8000ddc <HAL_SD_MspInit+0x1c0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f040 80c9 	bne.w	8000dd2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b66      	ldr	r3, [pc, #408]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c48:	4a65      	ldr	r2, [pc, #404]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c50:	4b63      	ldr	r3, [pc, #396]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b5f      	ldr	r3, [pc, #380]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	4a5e      	ldr	r2, [pc, #376]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b58      	ldr	r3, [pc, #352]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	4a57      	ldr	r2, [pc, #348]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c88:	4b55      	ldr	r3, [pc, #340]	@ (8000de0 <HAL_SD_MspInit+0x1c4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000c94:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000c98:	617b      	str	r3, [r7, #20]
                          |SdioCk_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	484c      	ldr	r0, [pc, #304]	@ (8000de4 <HAL_SD_MspInit+0x1c8>)
 8000cb2:	f001 fdc9 	bl	8002848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SdioCmd_Pin;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SdioCmd_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4845      	ldr	r0, [pc, #276]	@ (8000de8 <HAL_SD_MspInit+0x1cc>)
 8000cd2:	f001 fdb9 	bl	8002848 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000cd6:	4b45      	ldr	r3, [pc, #276]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000cd8:	4a45      	ldr	r2, [pc, #276]	@ (8000df0 <HAL_SD_MspInit+0x1d4>)
 8000cda:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000cdc:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000cde:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce4:	4b41      	ldr	r3, [pc, #260]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b40      	ldr	r3, [pc, #256]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000cfa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d00:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d06:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d08:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d14:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d1a:	4b34      	ldr	r3, [pc, #208]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d20:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d2a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d30:	482e      	ldr	r0, [pc, #184]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d32:	f001 f97b 	bl	800202c <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000d3c:	f7ff fe90 	bl	8000a60 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a2a      	ldr	r2, [pc, #168]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d44:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <HAL_SD_MspInit+0x1d0>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000df8 <HAL_SD_MspInit+0x1dc>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d52:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d54:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d5c:	2240      	movs	r2, #64	@ 0x40
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000d98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000da0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000da4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000da6:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000da8:	f001 f940 	bl	800202c <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000db2:	f7ff fe55 	bl	8000a60 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000dba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_SD_MspInit+0x1d8>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2031      	movs	r0, #49	@ 0x31
 8000dc8:	f001 f8f9 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000dcc:	2031      	movs	r0, #49	@ 0x31
 8000dce:	f001 f912 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	20000258 	.word	0x20000258
 8000df0:	40026458 	.word	0x40026458
 8000df4:	200002b8 	.word	0x200002b8
 8000df8:	400264a0 	.word	0x400264a0

08000dfc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e02:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <MX_SPI1_Init+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_SPI1_Init+0x64>)
 8000e4e:	f005 fe33 	bl	8006ab8 <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e58:	f7ff fe02 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000318 	.word	0x20000318
 8000e64:	40013000 	.word	0x40013000

08000e68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <HAL_SPI_MspInit+0x94>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d133      	bne.n	8000ef2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a1b      	ldr	r2, [pc, #108]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SpiCk_Pin|SpiMISO_Pin|SpiMosi_Pin;
 8000ec2:	23e0      	movs	r3, #224	@ 0xe0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <HAL_SPI_MspInit+0x9c>)
 8000ede:	f001 fcb3 	bl	8002848 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2023      	movs	r0, #35	@ 0x23
 8000ee8:	f001 f869 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000eec:	2023      	movs	r0, #35	@ 0x23
 8000eee:	f001 f882 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	@ 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40013000 	.word	0x40013000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	@ (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000f5c:	f003 fec8 	bl	8004cf0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x8>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 fc83 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fc2:	f005 ffb3 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000400 	.word	0x20000400

08000fd0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000fd6:	f005 ffa9 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000448 	.word	0x20000448

08000fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <TIM2_IRQHandler+0x10>)
 8000fea:	f005 ff9f 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000370 	.word	0x20000370

08000ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <TIM3_IRQHandler+0x10>)
 8000ffe:	f005 ff95 	bl	8006f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003b8 	.word	0x200003b8

0800100c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <SPI1_IRQHandler+0x10>)
 8001012:	f005 fddb 	bl	8006bcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000318 	.word	0x20000318

08001020 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <USART1_IRQHandler+0x10>)
 8001026:	f006 fdb1 	bl	8007b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000490 	.word	0x20000490

08001034 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <SDIO_IRQHandler+0x10>)
 800103a:	f004 fc7b 	bl	8005934 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001d4 	.word	0x200001d4

08001048 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA2_Stream3_IRQHandler+0x10>)
 800104e:	f001 f985 	bl	800235c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000258 	.word	0x20000258

0800105c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <OTG_FS_IRQHandler+0x10>)
 8001062:	f002 f82f 	bl	80030c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20001220 	.word	0x20001220

08001070 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <DMA2_Stream6_IRQHandler+0x10>)
 8001076:	f001 f971 	bl	800235c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002b8 	.word	0x200002b8

08001084 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <USART6_IRQHandler+0x10>)
 800108a:	f006 fd7f 	bl	8007b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200004d8 	.word	0x200004d8

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	@ 0x38
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]
 80010ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001106:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001114:	4823      	ldr	r0, [pc, #140]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001116:	f005 fe6b 	bl	8006df0 <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001120:	f7ff fc9e 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112e:	4619      	mov	r1, r3
 8001130:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001132:	f006 f8ad 	bl	8007290 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800113c:	f7ff fc90 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001140:	4818      	ldr	r0, [pc, #96]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001142:	f005 fea4 	bl	8006e8e <HAL_TIM_PWM_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800114c:	f7ff fc88 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4619      	mov	r1, r3
 800115e:	4811      	ldr	r0, [pc, #68]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001160:	f006 fc42 	bl	80079e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800116a:	f7ff fc79 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116e:	2360      	movs	r3, #96	@ 0x60
 8001170:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2208      	movs	r2, #8
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001186:	f005 ffc1 	bl	800710c <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001190:	f7ff fc66 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001194:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <MX_TIM2_Init+0xe8>)
 8001196:	f000 f987 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	@ 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000370 	.word	0x20000370

080011a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011cc:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <MX_TIM3_Init+0xb0>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011d0:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f0:	4818      	ldr	r0, [pc, #96]	@ (8001254 <MX_TIM3_Init+0xac>)
 80011f2:	f005 fe4c 	bl	8006e8e <HAL_TIM_PWM_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011fc:	f7ff fc30 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <MX_TIM3_Init+0xac>)
 8001210:	f006 fbea 	bl	80079e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800121a:	f7ff fc21 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	@ 0x60
 8001220:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_TIM3_Init+0xac>)
 8001236:	f005 ff69 	bl	800710c <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001240:	f7ff fc0e 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <MX_TIM3_Init+0xac>)
 8001246:	f000 f92f 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200003b8 	.word	0x200003b8
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MX_TIM10_Init+0x94>)
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <MX_TIM10_Init+0x98>)
 8001278:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_TIM10_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_TIM10_Init+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_TIM10_Init+0x94>)
 8001288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_TIM10_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_TIM10_Init+0x94>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800129a:	4815      	ldr	r0, [pc, #84]	@ (80012f0 <MX_TIM10_Init+0x94>)
 800129c:	f005 fda8 	bl	8006df0 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80012a6:	f7ff fbdb 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80012aa:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_TIM10_Init+0x94>)
 80012ac:	f005 fdef 	bl	8006e8e <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80012b6:	f7ff fbd3 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ba:	2360      	movs	r3, #96	@ 0x60
 80012bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <MX_TIM10_Init+0x94>)
 80012d2:	f005 ff1b 	bl	800710c <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80012dc:	f7ff fbc0 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <MX_TIM10_Init+0x94>)
 80012e2:	f000 f8e1 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000400 	.word	0x20000400
 80012f4:	40014400 	.word	0x40014400

080012f8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	615a      	str	r2, [r3, #20]
 800130e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_TIM11_Init+0x94>)
 8001312:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <MX_TIM11_Init+0x98>)
 8001314:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_TIM11_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_TIM11_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_TIM11_Init+0x94>)
 8001324:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001328:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_TIM11_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_TIM11_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001336:	4815      	ldr	r0, [pc, #84]	@ (800138c <MX_TIM11_Init+0x94>)
 8001338:	f005 fd5a 	bl	8006df0 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001342:	f7ff fb8d 	bl	8000a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001346:	4811      	ldr	r0, [pc, #68]	@ (800138c <MX_TIM11_Init+0x94>)
 8001348:	f005 fda1 	bl	8006e8e <HAL_TIM_PWM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001352:	f7ff fb85 	bl	8000a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001356:	2360      	movs	r3, #96	@ 0x60
 8001358:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <MX_TIM11_Init+0x94>)
 800136e:	f005 fecd 	bl	800710c <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001378:	f7ff fb72 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <MX_TIM11_Init+0x94>)
 800137e:	f000 f893 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000448 	.word	0x20000448
 8001390:	40014800 	.word	0x40014800

08001394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a4:	d116      	bne.n	80013d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b25      	ldr	r3, [pc, #148]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201c      	movs	r0, #28
 80013c8:	f000 fdf9 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013cc:	201c      	movs	r0, #28
 80013ce:	f000 fe12 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80013d2:	e036      	b.n	8001442 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_TIM_Base_MspInit+0xbc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d116      	bne.n	800140c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a19      	ldr	r2, [pc, #100]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2019      	movs	r0, #25
 8001400:	f000 fddd 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001404:	2019      	movs	r0, #25
 8001406:	f000 fdf6 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 800140a:	e01a      	b.n	8001442 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_TIM_Base_MspInit+0xc0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d115      	bne.n	8001442 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_TIM_Base_MspInit+0xb8>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	201a      	movs	r0, #26
 8001438:	f000 fdc1 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800143c:	201a      	movs	r0, #26
 800143e:	f000 fdda 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40014400 	.word	0x40014400
 8001454:	40014800 	.word	0x40014800

08001458 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d115      	bne.n	8001496 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6413      	str	r3, [r2, #64]	@ 0x40
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201d      	movs	r0, #29
 800148c:	f000 fd97 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001490:	201d      	movs	r0, #29
 8001492:	f000 fdb0 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000400 	.word	0x40000400
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c8:	d11f      	bne.n	800150a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a46      	ldr	r2, [pc, #280]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b44      	ldr	r3, [pc, #272]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80014e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	483b      	ldr	r0, [pc, #236]	@ (80015f0 <HAL_TIM_MspPostInit+0x148>)
 8001504:	f001 f9a0 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001508:	e06c      	b.n	80015e4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a39      	ldr	r2, [pc, #228]	@ (80015f4 <HAL_TIM_MspPostInit+0x14c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d11e      	bne.n	8001552 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	4a33      	ldr	r2, [pc, #204]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6313      	str	r3, [r2, #48]	@ 0x30
 8001524:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LcdLD_Pin;
 8001530:	2310      	movs	r3, #16
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001540:	2302      	movs	r3, #2
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LcdLD_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4829      	ldr	r0, [pc, #164]	@ (80015f0 <HAL_TIM_MspPostInit+0x148>)
 800154c:	f001 f97c 	bl	8002848 <HAL_GPIO_Init>
}
 8001550:	e048      	b.n	80015e4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <HAL_TIM_MspPostInit+0x150>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d11f      	bne.n	800159c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2_Pin;
 8001578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800158a:	2303      	movs	r3, #3
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo2_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4816      	ldr	r0, [pc, #88]	@ (80015f0 <HAL_TIM_MspPostInit+0x148>)
 8001596:	f001 f957 	bl	8002848 <HAL_GPIO_Init>
}
 800159a:	e023      	b.n	80015e4 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a16      	ldr	r2, [pc, #88]	@ (80015fc <HAL_TIM_MspPostInit+0x154>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11e      	bne.n	80015e4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_TIM_MspPostInit+0x144>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_Pin;
 80015c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80015d4:	2303      	movs	r3, #3
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo1_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <HAL_TIM_MspPostInit+0x148>)
 80015e0:	f001 f932 	bl	8002848 <HAL_GPIO_Init>
}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40000400 	.word	0x40000400
 80015f8:	40014400 	.word	0x40014400
 80015fc:	40014800 	.word	0x40014800

08001600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_USART1_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001638:	f006 fa58 	bl	8007aec <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff fa0d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000490 	.word	0x20000490
 8001650:	40011000 	.word	0x40011000

08001654 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <MX_USART6_UART_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART6_UART_Init+0x4c>)
 800168c:	f006 fa2e 	bl	8007aec <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001696:	f7ff f9e3 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200004d8 	.word	0x200004d8
 80016a4:	40011400 	.word	0x40011400

080016a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3a      	ldr	r2, [pc, #232]	@ (80017b0 <HAL_UART_MspInit+0x108>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d135      	bne.n	8001736 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a38      	ldr	r2, [pc, #224]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	4b32      	ldr	r3, [pc, #200]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a31      	ldr	r2, [pc, #196]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001702:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001714:	2307      	movs	r3, #7
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4826      	ldr	r0, [pc, #152]	@ (80017b8 <HAL_UART_MspInit+0x110>)
 8001720:	f001 f892 	bl	8002848 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2025      	movs	r0, #37	@ 0x25
 800172a:	f000 fc48 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800172e:	2025      	movs	r0, #37	@ 0x25
 8001730:	f000 fc61 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001734:	e038      	b.n	80017a8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a20      	ldr	r2, [pc, #128]	@ (80017bc <HAL_UART_MspInit+0x114>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d133      	bne.n	80017a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001748:	4a1a      	ldr	r2, [pc, #104]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 800174a:	f043 0320 	orr.w	r3, r3, #32
 800174e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	4a13      	ldr	r2, [pc, #76]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6313      	str	r3, [r2, #48]	@ 0x30
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001778:	23c0      	movs	r3, #192	@ 0xc0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001788:	2308      	movs	r3, #8
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <HAL_UART_MspInit+0x118>)
 8001794:	f001 f858 	bl	8002848 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2047      	movs	r0, #71	@ 0x47
 800179e:	f000 fc0e 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017a2:	2047      	movs	r0, #71	@ 0x47
 80017a4:	f000 fc27 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 80017a8:	bf00      	nop
 80017aa:	3730      	adds	r7, #48	@ 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40020800 	.word	0x40020800

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c8:	f7ff fc66 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ce:	490d      	ldr	r1, [pc, #52]	@ (8001804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f00c f87d 	bl	800d8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7ff f895 	bl	8000924 <main>
  bx  lr    
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001808:	0800d9dc 	.word	0x0800d9dc
  ldr r2, =_sbss
 800180c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001810:	20001924 	.word	0x20001924

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_Init+0x40>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_Init+0x40>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_Init+0x40>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 fbb1 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fb5c 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fbc9 	bl	8002012 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001898:	f000 fb91 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	@ (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000520 	.word	0x20000520

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000520 	.word	0x20000520

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e033      	b.n	80019c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe fe00 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	f043 0202 	orr.w	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f93a 	bl	8001c10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019b2:	e001      	b.n	80019b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1c>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e105      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x228>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d925      	bls.n	8001a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68d9      	ldr	r1, [r3, #12]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b1e      	subs	r3, #30
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43da      	mvns	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4403      	add	r3, r0
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	2207      	movs	r2, #7
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	400a      	ands	r2, r1
 8001a66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4403      	add	r3, r0
 8001a80:	409a      	lsls	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d824      	bhi.n	8001adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b05      	subs	r3, #5
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b05      	subs	r3, #5
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ada:	e04c      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d824      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b23      	subs	r3, #35	@ 0x23
 8001af6:	221f      	movs	r2, #31
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b23      	subs	r3, #35	@ 0x23
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2c:	e023      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	@ 0x41
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b41      	subs	r3, #65	@ 0x41
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_ADC_ConfigChannel+0x234>)
 8001b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_ADC_ConfigChannel+0x238>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d109      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_ADC_ConfigChannel+0x238>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d123      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x1e6>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d11b      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d111      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_ADC_ConfigChannel+0x23c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <HAL_ADC_ConfigChannel+0x240>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0c9a      	lsrs	r2, r3, #18
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	40012000 	.word	0x40012000
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <ADC_Init+0x1f0>)
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <ADC_Init+0x1f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e00f      	b.n	8001d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0202 	bic.w	r2, r2, #2
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	3b01      	subs	r3, #1
 8001d68:	035a      	lsls	r2, r3, #13
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e007      	b.n	8001d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	051a      	lsls	r2, r3, #20
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dc6:	025a      	lsls	r2, r3, #9
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	029a      	lsls	r2, r3, #10
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	@ (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	@ (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	@ (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff fc54 	bl	80018e4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e099      	b.n	800217c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002068:	e00f      	b.n	800208a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206a:	f7ff fc3b 	bl	80018e4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b05      	cmp	r3, #5
 8002076:	d908      	bls.n	800208a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2203      	movs	r2, #3
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e078      	b.n	800217c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e8      	bne.n	800206a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <HAL_DMA_Init+0x158>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d107      	bne.n	80020f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	4313      	orrs	r3, r2
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f023 0307 	bic.w	r3, r3, #7
 800210a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	2b04      	cmp	r3, #4
 800211c:	d117      	bne.n	800214e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fb0d 	bl	8002750 <DMA_CheckFifoParam>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2240      	movs	r2, #64	@ 0x40
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800214a:	2301      	movs	r3, #1
 800214c:	e016      	b.n	800217c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fac4 	bl	80026e4 <DMA_CalcBaseAndBitshift>
 800215c:	4603      	mov	r3, r0
 800215e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	223f      	movs	r2, #63	@ 0x3f
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	f010803f 	.word	0xf010803f

08002188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_DMA_Start_IT+0x26>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e040      	b.n	8002230 <HAL_DMA_Start_IT+0xa8>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d12f      	bne.n	8002222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa56 	bl	8002688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	223f      	movs	r2, #63	@ 0x3f
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0216 	orr.w	r2, r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e005      	b.n	800222e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800222a:	2302      	movs	r3, #2
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002246:	f7ff fb4d 	bl	80018e4 <HAL_GetTick>
 800224a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d008      	beq.n	800226a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2280      	movs	r2, #128	@ 0x80
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e052      	b.n	8002310 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0216 	bic.w	r2, r2, #22
 8002278:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002288:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <HAL_DMA_Abort+0x62>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0208 	bic.w	r2, r2, #8
 80022a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ba:	e013      	b.n	80022e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022bc:	f7ff fb12 	bl	80018e4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d90c      	bls.n	80022e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e015      	b.n	8002310 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1e4      	bne.n	80022bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	223f      	movs	r2, #63	@ 0x3f
 80022f8:	409a      	lsls	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d004      	beq.n	8002336 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2280      	movs	r2, #128	@ 0x80
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00c      	b.n	8002350 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2205      	movs	r2, #5
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002368:	4b8e      	ldr	r3, [pc, #568]	@ (80025a4 <HAL_DMA_IRQHandler+0x248>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a8e      	ldr	r2, [pc, #568]	@ (80025a8 <HAL_DMA_IRQHandler+0x24c>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a9b      	lsrs	r3, r3, #10
 8002374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2208      	movs	r2, #8
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01a      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2208      	movs	r2, #8
 80023b6:	409a      	lsls	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	2201      	movs	r2, #1
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d012      	beq.n	80023fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	2201      	movs	r2, #1
 80023ec:	409a      	lsls	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	2204      	movs	r2, #4
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	2204      	movs	r2, #4
 8002422:	409a      	lsls	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	2210      	movs	r2, #16
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d043      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03c      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002456:	2210      	movs	r2, #16
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d018      	beq.n	800249e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d024      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
 800248a:	e01f      	b.n	80024cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
 800249c:	e016      	b.n	80024cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0208 	bic.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	2220      	movs	r2, #32
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808f 	beq.w	80025fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8087 	beq.w	80025fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	2220      	movs	r2, #32
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b05      	cmp	r3, #5
 8002504:	d136      	bne.n	8002574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0216 	bic.w	r2, r2, #22
 8002514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_DMA_IRQHandler+0x1da>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	223f      	movs	r2, #63	@ 0x3f
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	d07e      	beq.n	8002668 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
        }
        return;
 8002572:	e079      	b.n	8002668 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01d      	beq.n	80025be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	2b00      	cmp	r3, #0
 8002596:	d031      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
 80025a0:	e02c      	b.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
 80025a2:	bf00      	nop
 80025a4:	20000000 	.word	0x20000000
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
 80025bc:	e01e      	b.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0210 	bic.w	r2, r2, #16
 80025da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002600:	2b00      	cmp	r3, #0
 8002602:	d032      	beq.n	800266a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d022      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2205      	movs	r2, #5
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3301      	adds	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	d307      	bcc.n	8002644 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f2      	bne.n	8002628 <HAL_DMA_IRQHandler+0x2cc>
 8002642:	e000      	b.n	8002646 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002644:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
 8002666:	e000      	b.n	800266a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002668:	bf00      	nop
    }
  }
}
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b40      	cmp	r3, #64	@ 0x40
 80026b4:	d108      	bne.n	80026c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026c6:	e007      	b.n	80026d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	3b10      	subs	r3, #16
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <DMA_CalcBaseAndBitshift+0x64>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026fe:	4a13      	ldr	r2, [pc, #76]	@ (800274c <DMA_CalcBaseAndBitshift+0x68>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d909      	bls.n	8002726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	1d1a      	adds	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	659a      	str	r2, [r3, #88]	@ 0x58
 8002724:	e007      	b.n	8002736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	aaaaaaab 	.word	0xaaaaaaab
 800274c:	0800d9b0 	.word	0x0800d9b0

08002750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11f      	bne.n	80027aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d856      	bhi.n	800281e <DMA_CheckFifoParam+0xce>
 8002770:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <DMA_CheckFifoParam+0x28>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	08002789 	.word	0x08002789
 800277c:	0800279b 	.word	0x0800279b
 8002780:	08002789 	.word	0x08002789
 8002784:	0800281f 	.word	0x0800281f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d046      	beq.n	8002822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e043      	b.n	8002822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027a2:	d140      	bne.n	8002826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a8:	e03d      	b.n	8002826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b2:	d121      	bne.n	80027f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d837      	bhi.n	800282a <DMA_CheckFifoParam+0xda>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <DMA_CheckFifoParam+0x70>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d7 	.word	0x080027d7
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	080027e9 	.word	0x080027e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e030      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d025      	beq.n	800282e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e6:	e022      	b.n	800282e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027f0:	d11f      	bne.n	8002832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027f6:	e01c      	b.n	8002832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d903      	bls.n	8002806 <DMA_CheckFifoParam+0xb6>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d003      	beq.n	800280c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002804:	e018      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      break;
 800280a:	e015      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e00b      	b.n	8002836 <DMA_CheckFifoParam+0xe6>
      break;
 800281e:	bf00      	nop
 8002820:	e00a      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e008      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e006      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e004      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;   
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <DMA_CheckFifoParam+0xe8>
      break;
 8002836:	bf00      	nop
    }
  } 
  
  return status; 
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	@ 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e159      	b.n	8002b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8148 	bne.w	8002b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	2b02      	cmp	r3, #2
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b03      	cmp	r3, #3
 8002906:	d017      	beq.n	8002938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d123      	bne.n	800298c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a2 	beq.w	8002b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b57      	ldr	r3, [pc, #348]	@ (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	4a56      	ldr	r2, [pc, #344]	@ (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029de:	4b54      	ldr	r3, [pc, #336]	@ (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ea:	4a52      	ldr	r2, [pc, #328]	@ (8002b34 <HAL_GPIO_Init+0x2ec>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a49      	ldr	r2, [pc, #292]	@ (8002b38 <HAL_GPIO_Init+0x2f0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d019      	beq.n	8002a4a <HAL_GPIO_Init+0x202>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a48      	ldr	r2, [pc, #288]	@ (8002b3c <HAL_GPIO_Init+0x2f4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x1fe>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a47      	ldr	r2, [pc, #284]	@ (8002b40 <HAL_GPIO_Init+0x2f8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x1fa>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a46      	ldr	r2, [pc, #280]	@ (8002b44 <HAL_GPIO_Init+0x2fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x1f6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a45      	ldr	r2, [pc, #276]	@ (8002b48 <HAL_GPIO_Init+0x300>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x1f2>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5c:	4935      	ldr	r1, [pc, #212]	@ (8002b34 <HAL_GPIO_Init+0x2ec>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a24      	ldr	r2, [pc, #144]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002abe:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b4c <HAL_GPIO_Init+0x304>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	f67f aea2 	bls.w	8002864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3724      	adds	r7, #36	@ 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40020c00 	.word	0x40020c00
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e001      	b.n	8002b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b9c:	e003      	b.n	8002ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e12b      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd fe5a 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	@ 0x24
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c18:	f002 f842 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a81      	ldr	r2, [pc, #516]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d807      	bhi.n	8002c38 <HAL_I2C_Init+0x84>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a80      	ldr	r2, [pc, #512]	@ (8002e2c <HAL_I2C_Init+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf94      	ite	ls
 8002c30:	2301      	movls	r3, #1
 8002c32:	2300      	movhi	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e006      	b.n	8002c46 <HAL_I2C_Init+0x92>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e30 <HAL_I2C_Init+0x27c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0e7      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a78      	ldr	r2, [pc, #480]	@ (8002e34 <HAL_I2C_Init+0x280>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9b      	lsrs	r3, r3, #18
 8002c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d802      	bhi.n	8002c88 <HAL_I2C_Init+0xd4>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	e009      	b.n	8002c9c <HAL_I2C_Init+0xe8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4a69      	ldr	r2, [pc, #420]	@ (8002e38 <HAL_I2C_Init+0x284>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	495c      	ldr	r1, [pc, #368]	@ (8002e28 <HAL_I2C_Init+0x274>)
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d819      	bhi.n	8002cf0 <HAL_I2C_Init+0x13c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e59      	subs	r1, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_I2C_Init+0x138>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e59      	subs	r1, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	e051      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e04f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d111      	bne.n	8002d1c <HAL_I2C_Init+0x168>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e012      	b.n	8002d42 <HAL_I2C_Init+0x18e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x196>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e022      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <HAL_I2C_Init+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e58      	subs	r0, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	440b      	add	r3, r1
 8002d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d6e:	e00f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6911      	ldr	r1, [r2, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	001e847f 	.word	0x001e847f
 8002e30:	003d08ff 	.word	0x003d08ff
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e101      	b.n	8003052 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f00a fa2f 	bl	800d2cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e7c:	d102      	bne.n	8002e84 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f006 fbd8 	bl	800963e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7c1a      	ldrb	r2, [r3, #16]
 8002e96:	f88d 2000 	strb.w	r2, [sp]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e9e:	f006 fab7 	bl	8009410 <USB_CoreInit>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0ce      	b.n	8003052 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f006 fbd0 	bl	8009660 <USB_SetCurrentMode>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0bf      	b.n	8003052 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e04a      	b.n	8002f6e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3315      	adds	r3, #21
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3314      	adds	r3, #20
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	b298      	uxth	r0, r3
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	332e      	adds	r3, #46	@ 0x2e
 8002f14:	4602      	mov	r2, r0
 8002f16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3318      	adds	r3, #24
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	331c      	adds	r3, #28
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3320      	adds	r3, #32
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3324      	adds	r3, #36	@ 0x24
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	791b      	ldrb	r3, [r3, #4]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3af      	bcc.n	8002ed8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e044      	b.n	8003008 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3301      	adds	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	791b      	ldrb	r3, [r3, #4]
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3b5      	bcc.n	8002f7e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7c1a      	ldrb	r2, [r3, #16]
 800301a:	f88d 2000 	strb.w	r2, [sp]
 800301e:	3304      	adds	r3, #4
 8003020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003022:	f006 fb69 	bl	80096f8 <USB_DevInit>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e00c      	b.n	8003052 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f007 fbad 	bl	800a7aa <USB_DevDisconnect>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_PCD_Start+0x1c>
 8003072:	2302      	movs	r3, #2
 8003074:	e022      	b.n	80030bc <HAL_PCD_Start+0x62>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003096:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f006 faba 	bl	800961c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f007 fb5b 	bl	800a768 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b08d      	sub	sp, #52	@ 0x34
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f007 fc19 	bl	800a912 <USB_GetMode>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 848c 	bne.w	8003a00 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f007 fb7d 	bl	800a7ec <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8482 	beq.w	80039fe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f007 fb6a 	bl	800a7ec <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 0202 	and.w	r2, r2, #2
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f007 fb58 	bl	800a7ec <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b10      	cmp	r3, #16
 8003144:	d161      	bne.n	800320a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0210 	bic.w	r2, r2, #16
 8003154:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	0c5b      	lsrs	r3, r3, #17
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	2b02      	cmp	r3, #2
 8003180:	d124      	bne.n	80031cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d035      	beq.n	80031fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	6a38      	ldr	r0, [r7, #32]
 80031a2:	f007 f98f 	bl	800a4c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b2:	441a      	add	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c4:	441a      	add	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	615a      	str	r2, [r3, #20]
 80031ca:	e016      	b.n	80031fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	0c5b      	lsrs	r3, r3, #17
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d110      	bne.n	80031fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031de:	2208      	movs	r2, #8
 80031e0:	4619      	mov	r1, r3
 80031e2:	6a38      	ldr	r0, [r7, #32]
 80031e4:	f007 f96e 	bl	800a4c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031f4:	441a      	add	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0210 	orr.w	r2, r2, #16
 8003208:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f007 faec 	bl	800a7ec <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800321a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800321e:	f040 80a7 	bne.w	8003370 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f007 faf1 	bl	800a812 <USB_ReadDevAllOutEpInterrupt>
 8003230:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003232:	e099      	b.n	8003368 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 808e 	beq.w	800335c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f007 fb15 	bl	800a87a <USB_ReadDevOutEPInterrupt>
 8003250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800326e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fea1 	bl	8003fb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00c      	beq.n	800329a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2308      	movs	r3, #8
 8003290:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 ff77 	bl	8004188 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	2310      	movs	r3, #16
 80032b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d030      	beq.n	8003322 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c8:	2b80      	cmp	r3, #128	@ 0x80
 80032ca:	d109      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	78db      	ldrb	r3, [r3, #3]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f00a f8da 	bl	800d4c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	2302      	movs	r3, #2
 8003320:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2320      	movs	r3, #32
 800333c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800335a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	3301      	adds	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	f47f af62 	bne.w	8003234 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f007 fa39 	bl	800a7ec <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003384:	f040 80db 	bne.w	800353e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f007 fa5a 	bl	800a846 <USB_ReadDevAllInEpInterrupt>
 8003392:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003398:	e0cd      	b.n	8003536 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800339a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80c2 	beq.w	800352a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f007 fa80 	bl	800a8b6 <USB_ReadDevInEPInterrupt>
 80033b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d057      	beq.n	8003472 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2201      	movs	r2, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69f9      	ldr	r1, [r7, #28]
 80033de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033e2:	4013      	ands	r3, r2
 80033e4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	799b      	ldrb	r3, [r3, #6]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d132      	bne.n	8003466 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3320      	adds	r3, #32
 8003410:	6819      	ldr	r1, [r3, #0]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4403      	add	r3, r0
 8003420:	331c      	adds	r3, #28
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4419      	add	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4403      	add	r3, r0
 8003434:	3320      	adds	r3, #32
 8003436:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <HAL_PCD_IRQHandler+0x3a2>
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3324      	adds	r3, #36	@ 0x24
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800345e:	461a      	mov	r2, r3
 8003460:	2101      	movs	r1, #1
 8003462:	f007 fa87 	bl	800a974 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f009 ffae 	bl	800d3ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003488:	461a      	mov	r2, r3
 800348a:	2308      	movs	r3, #8
 800348c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a4:	461a      	mov	r2, r3
 80034a6:	2310      	movs	r3, #16
 80034a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c0:	461a      	mov	r2, r3
 80034c2:	2340      	movs	r3, #64	@ 0x40
 80034c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d023      	beq.n	8003518 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034d2:	6a38      	ldr	r0, [r7, #32]
 80034d4:	f006 fa74 	bl	80099c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	3310      	adds	r3, #16
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f009 fff1 	bl	800d4e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003512:	461a      	mov	r2, r3
 8003514:	2302      	movs	r3, #2
 8003516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fcbb 	bl	8003ea0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f af2e 	bne.w	800339a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f007 f952 	bl	800a7ec <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800354e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003552:	d122      	bne.n	800359a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800356e:	2b01      	cmp	r3, #1
 8003570:	d108      	bne.n	8003584 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800357a:	2100      	movs	r1, #0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fea1 	bl	80042c4 <HAL_PCDEx_LPM_Callback>
 8003582:	e002      	b.n	800358a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f009 ff8f 	bl	800d4a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f007 f924 	bl	800a7ec <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ae:	d112      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d102      	bne.n	80035c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f009 ff4b 	bl	800d45c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80035d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f007 f906 	bl	800a7ec <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ea:	f040 80b7 	bne.w	800375c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2110      	movs	r1, #16
 8003608:	4618      	mov	r0, r3
 800360a:	f006 f9d9 	bl	80099c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360e:	2300      	movs	r3, #0
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003612:	e046      	b.n	80036a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003620:	461a      	mov	r2, r3
 8003622:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003626:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003638:	0151      	lsls	r1, r2, #5
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	440a      	add	r2, r1
 800363e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003646:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800365a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003676:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800367a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800369a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369e:	3301      	adds	r3, #1
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	791b      	ldrb	r3, [r3, #4]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d3b2      	bcc.n	8003614 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80036c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7bdb      	ldrb	r3, [r3, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036da:	f043 030b 	orr.w	r3, r3, #11
 80036de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036f0:	f043 030b 	orr.w	r3, r3, #11
 80036f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f6:	e015      	b.n	8003724 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003706:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800370a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800370e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800371e:	f043 030b 	orr.w	r3, r3, #11
 8003722:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003732:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003736:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003746:	461a      	mov	r2, r3
 8003748:	f007 f914 	bl	800a974 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800375a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f007 f843 	bl	800a7ec <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	d123      	bne.n	80037ba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f007 f8d9 	bl	800a92e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f006 f996 	bl	8009ab2 <USB_GetDevSpeed>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681c      	ldr	r4, [r3, #0]
 8003792:	f001 fa79 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8003796:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800379c:	461a      	mov	r2, r3
 800379e:	4620      	mov	r0, r4
 80037a0:	f005 fe9a 	bl	80094d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f009 fe3a 	bl	800d41e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f007 f814 	bl	800a7ec <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d10a      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f009 fe17 	bl	800d402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f002 0208 	and.w	r2, r2, #8
 80037e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f006 ffff 	bl	800a7ec <USB_ReadInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b80      	cmp	r3, #128	@ 0x80
 80037f6:	d123      	bne.n	8003840 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003804:	2301      	movs	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	e014      	b.n	8003834 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d105      	bne.n	800382e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb08 	bl	8003e3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	3301      	adds	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	791b      	ldrb	r3, [r3, #4]
 8003838:	461a      	mov	r2, r3
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	4293      	cmp	r3, r2
 800383e:	d3e4      	bcc.n	800380a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f006 ffd1 	bl	800a7ec <USB_ReadInterrupts>
 800384a:	4603      	mov	r3, r0
 800384c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003854:	d13c      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003856:	2301      	movs	r3, #1
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	e02b      	b.n	80038b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	3318      	adds	r3, #24
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d115      	bne.n	80038ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003882:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003884:	2b00      	cmp	r3, #0
 8003886:	da12      	bge.n	80038ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3317      	adds	r3, #23
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fac8 	bl	8003e3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	3301      	adds	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	791b      	ldrb	r3, [r3, #4]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	4293      	cmp	r3, r2
 80038be:	d3cd      	bcc.n	800385c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f006 ff89 	bl	800a7ec <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038e4:	d156      	bne.n	8003994 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e6:	2301      	movs	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ea:	e045      	b.n	8003978 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d12e      	bne.n	8003972 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003914:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	da2b      	bge.n	8003972 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003926:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800392a:	429a      	cmp	r2, r3
 800392c:	d121      	bne.n	8003972 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800396a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800396e:	6053      	str	r3, [r2, #4]
            break;
 8003970:	e008      	b.n	8003984 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	3301      	adds	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	791b      	ldrb	r3, [r3, #4]
 800397c:	461a      	mov	r2, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	4293      	cmp	r3, r2
 8003982:	d3b3      	bcc.n	80038ec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f006 ff27 	bl	800a7ec <USB_ReadInterrupts>
 800399e:	4603      	mov	r3, r0
 80039a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a8:	d10a      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f009 fdae 	bl	800d50c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80039be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f006 ff11 	bl	800a7ec <USB_ReadInterrupts>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d115      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f009 fd9e 	bl	800d528 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	e000      	b.n	8003a00 <HAL_PCD_IRQHandler+0x93c>
      return;
 80039fe:	bf00      	nop
    }
  }
}
 8003a00:	3734      	adds	r7, #52	@ 0x34
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd90      	pop	{r4, r7, pc}

08003a06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_PCD_SetAddress+0x1a>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e012      	b.n	8003a46 <HAL_PCD_SetAddress+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f006 fe70 	bl	800a71c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	4608      	mov	r0, r1
 8003a58:	4611      	mov	r1, r2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	70fb      	strb	r3, [r7, #3]
 8003a60:	460b      	mov	r3, r1
 8003a62:	803b      	strh	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da0f      	bge.n	8003a94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	3310      	adds	r3, #16
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
 8003a92:	e00f      	b.n	8003ab4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ac0:	883a      	ldrh	r2, [r7, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	78ba      	ldrb	r2, [r7, #2]
 8003aca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ade:	78bb      	ldrb	r3, [r7, #2]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d102      	bne.n	8003aea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_PCD_EP_Open+0xaa>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e00e      	b.n	8003b16 <HAL_PCD_EP_Open+0xc8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68f9      	ldr	r1, [r7, #12]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 fff8 	bl	8009afc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b14:	7afb      	ldrb	r3, [r7, #11]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da0f      	bge.n	8003b52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3310      	adds	r3, #16
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	705a      	strb	r2, [r3, #1]
 8003b50:	e00f      	b.n	8003b72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 020f 	and.w	r2, r3, #15
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_PCD_EP_Close+0x6e>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e00e      	b.n	8003baa <HAL_PCD_EP_Close+0x8c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68f9      	ldr	r1, [r7, #12]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f006 f836 	bl	8009c0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	799b      	ldrb	r3, [r3, #6]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	799b      	ldrb	r3, [r3, #6]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6979      	ldr	r1, [r7, #20]
 8003c1a:	f006 f8d3 	bl	8009dc4 <USB_EPStartXfer>

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	460b      	mov	r3, r1
 8003c66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3310      	adds	r3, #16
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2201      	movs	r2, #1
 8003c96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c98:	7afb      	ldrb	r3, [r7, #11]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	799b      	ldrb	r3, [r3, #6]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d102      	bne.n	8003cb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	799b      	ldrb	r3, [r3, #6]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	f006 f881 	bl	8009dc4 <USB_EPStartXfer>

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	7912      	ldrb	r2, [r2, #4]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e04f      	b.n	8003d8a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da0f      	bge.n	8003d12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	f003 020f 	and.w	r2, r3, #15
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	3310      	adds	r3, #16
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	3304      	adds	r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	705a      	strb	r2, [r3, #1]
 8003d10:	e00d      	b.n	8003d2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	3304      	adds	r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_PCD_EP_SetStall+0x82>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e01d      	b.n	8003d8a <HAL_PCD_EP_SetStall+0xbe>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f006 fc09 	bl	800a574 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7999      	ldrb	r1, [r3, #6]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f006 fdfa 	bl	800a974 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	7912      	ldrb	r2, [r2, #4]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e042      	b.n	8003e36 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da0f      	bge.n	8003dd8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3310      	adds	r3, #16
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	e00f      	b.n	8003df8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_PCD_EP_ClrStall+0x86>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e00e      	b.n	8003e36 <HAL_PCD_EP_ClrStall+0xa4>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f006 fc12 	bl	800a650 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0c      	bge.n	8003e6c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	3310      	adds	r3, #16
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e00c      	b.n	8003e86 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f006 fa31 	bl	800a2f4 <USB_EPStopXfer>
 8003e92:	4603      	mov	r3, r0
 8003e94:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e96:	7afb      	ldrb	r3, [r7, #11]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	3310      	adds	r3, #16
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d901      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e06b      	b.n	8003fb0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d902      	bls.n	8003ef4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3303      	adds	r3, #3
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efc:	e02a      	b.n	8003f54 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d902      	bls.n	8003f1a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4603      	mov	r3, r0
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f006 fa86 	bl	800a448 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	441a      	add	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	441a      	add	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d809      	bhi.n	8003f7e <PCD_WriteEmptyTxFifo+0xde>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d203      	bcs.n	8003f7e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1bf      	bne.n	8003efe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d811      	bhi.n	8003fae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	2201      	movs	r2, #1
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	6939      	ldr	r1, [r7, #16]
 8003fa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003faa:	4013      	ands	r3, r2
 8003fac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	333c      	adds	r3, #60	@ 0x3c
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	799b      	ldrb	r3, [r3, #6]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d17b      	bne.n	80040e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	4a61      	ldr	r2, [pc, #388]	@ (8004180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	f240 80b9 	bls.w	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80b3 	beq.w	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004020:	6093      	str	r3, [r2, #8]
 8004022:	e0a7      	b.n	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403a:	461a      	mov	r2, r3
 800403c:	2320      	movs	r3, #32
 800403e:	6093      	str	r3, [r2, #8]
 8004040:	e098      	b.n	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 8093 	bne.w	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4a4b      	ldr	r2, [pc, #300]	@ (8004180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d90f      	bls.n	8004076 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	6093      	str	r3, [r2, #8]
 8004074:	e07e      	b.n	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	440b      	add	r3, r1
 8004098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	1ad2      	subs	r2, r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d114      	bne.n	80040d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040c0:	461a      	mov	r2, r3
 80040c2:	2101      	movs	r1, #1
 80040c4:	f006 fc56 	bl	800a974 <USB_EP0_OutStart>
 80040c8:	e006      	b.n	80040d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	441a      	add	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f009 f95a 	bl	800d398 <HAL_PCD_DataOutStageCallback>
 80040e4:	e046      	b.n	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4a26      	ldr	r2, [pc, #152]	@ (8004184 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d124      	bne.n	8004138 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410a:	6093      	str	r3, [r2, #8]
 800410c:	e032      	b.n	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	2320      	movs	r3, #32
 8004128:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f009 f931 	bl	800d398 <HAL_PCD_DataOutStageCallback>
 8004136:	e01d      	b.n	8004174 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d114      	bne.n	8004168 <PCD_EP_OutXfrComplete_int+0x1b0>
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004160:	461a      	mov	r2, r3
 8004162:	2100      	movs	r1, #0
 8004164:	f006 fc06 	bl	800a974 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f009 f912 	bl	800d398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	4f54300a 	.word	0x4f54300a
 8004184:	4f54310a 	.word	0x4f54310a

08004188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	333c      	adds	r3, #60	@ 0x3c
 80041a0:	3304      	adds	r3, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d90e      	bls.n	80041dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d4:	461a      	mov	r2, r3
 80041d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f009 f8c9 	bl	800d374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004210 <PCD_EP_OutSetupPacket_int+0x88>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d90c      	bls.n	8004204 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d108      	bne.n	8004204 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041fc:	461a      	mov	r2, r3
 80041fe:	2101      	movs	r1, #1
 8004200:	f006 fbb8 	bl	800a974 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	4f54300a 	.word	0x4f54300a

08004214 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
 8004220:	4613      	mov	r3, r2
 8004222:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004232:	883b      	ldrh	r3, [r7, #0]
 8004234:	0419      	lsls	r1, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	430a      	orrs	r2, r1
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004240:	e028      	b.n	8004294 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004250:	2300      	movs	r3, #0
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	e00d      	b.n	8004272 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	3340      	adds	r3, #64	@ 0x40
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	3301      	adds	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	7bfa      	ldrb	r2, [r7, #15]
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	3b01      	subs	r3, #1
 8004278:	429a      	cmp	r2, r3
 800427a:	d3ec      	bcc.n	8004256 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800427c:	883b      	ldrh	r3, [r7, #0]
 800427e:	0418      	lsls	r0, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	3b01      	subs	r3, #1
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	4302      	orrs	r2, r0
 800428c:	3340      	adds	r3, #64	@ 0x40
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e267      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d075      	beq.n	80043e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fa:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b04      	cmp	r3, #4
 8004304:	d00c      	beq.n	8004320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004306:	4b85      	ldr	r3, [pc, #532]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430e:	2b08      	cmp	r3, #8
 8004310:	d112      	bne.n	8004338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b82      	ldr	r3, [pc, #520]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431e:	d10b      	bne.n	8004338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	4b7e      	ldr	r3, [pc, #504]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05b      	beq.n	80043e4 <HAL_RCC_OscConfig+0x108>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d157      	bne.n	80043e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e242      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x74>
 8004342:	4b76      	ldr	r3, [pc, #472]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a75      	ldr	r2, [pc, #468]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e01d      	b.n	800438c <HAL_RCC_OscConfig+0xb0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x98>
 800435a:	4b70      	ldr	r3, [pc, #448]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a6f      	ldr	r2, [pc, #444]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b6d      	ldr	r3, [pc, #436]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6c      	ldr	r2, [pc, #432]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0xb0>
 8004374:	4b69      	ldr	r3, [pc, #420]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a68      	ldr	r2, [pc, #416]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800437a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a65      	ldr	r2, [pc, #404]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800438a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd faa6 	bl	80018e4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fd faa2 	bl	80018e4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e207      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b5b      	ldr	r3, [pc, #364]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0xc0>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fd fa92 	bl	80018e4 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fd fa8e 	bl	80018e4 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1f3      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	4b51      	ldr	r3, [pc, #324]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0xe8>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d063      	beq.n	80044ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f2:	4b4a      	ldr	r3, [pc, #296]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fe:	4b47      	ldr	r3, [pc, #284]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004406:	2b08      	cmp	r3, #8
 8004408:	d11c      	bne.n	8004444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440a:	4b44      	ldr	r3, [pc, #272]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	4b41      	ldr	r3, [pc, #260]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_RCC_OscConfig+0x152>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e1c7      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442e:	4b3b      	ldr	r3, [pc, #236]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4937      	ldr	r1, [pc, #220]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	e03a      	b.n	80044ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444c:	4b34      	ldr	r3, [pc, #208]	@ (8004520 <HAL_RCC_OscConfig+0x244>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fd fa47 	bl	80018e4 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445a:	f7fd fa43 	bl	80018e4 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1a8      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004478:	4b28      	ldr	r3, [pc, #160]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4925      	ldr	r1, [pc, #148]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]
 800448c:	e015      	b.n	80044ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <HAL_RCC_OscConfig+0x244>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fa26 	bl	80018e4 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449c:	f7fd fa22 	bl	80018e4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e187      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d036      	beq.n	8004534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b15      	ldr	r3, [pc, #84]	@ (8004524 <HAL_RCC_OscConfig+0x248>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fd fa06 	bl	80018e4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fd fa02 	bl	80018e4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e167      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x200>
 80044fa:	e01b      	b.n	8004534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <HAL_RCC_OscConfig+0x248>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004502:	f7fd f9ef 	bl	80018e4 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	e00e      	b.n	8004528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450a:	f7fd f9eb 	bl	80018e4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d907      	bls.n	8004528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e150      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
 800451c:	40023800 	.word	0x40023800
 8004520:	42470000 	.word	0x42470000
 8004524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	4b88      	ldr	r3, [pc, #544]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800452a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ea      	bne.n	800450a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8097 	beq.w	8004670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004546:	4b81      	ldr	r3, [pc, #516]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	4b7d      	ldr	r3, [pc, #500]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	4a7c      	ldr	r2, [pc, #496]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004560:	6413      	str	r3, [r2, #64]	@ 0x40
 8004562:	4b7a      	ldr	r3, [pc, #488]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b77      	ldr	r3, [pc, #476]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b74      	ldr	r3, [pc, #464]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a73      	ldr	r2, [pc, #460]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fd f9ab 	bl	80018e4 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fd f9a7 	bl	80018e4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e10c      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2ea>
 80045b8:	4b64      	ldr	r3, [pc, #400]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	4a63      	ldr	r2, [pc, #396]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c4:	e01c      	b.n	8004600 <HAL_RCC_OscConfig+0x324>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x30c>
 80045ce:	4b5f      	ldr	r3, [pc, #380]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	4a5e      	ldr	r2, [pc, #376]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045da:	4b5c      	ldr	r3, [pc, #368]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	4a5b      	ldr	r2, [pc, #364]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0x324>
 80045e8:	4b58      	ldr	r3, [pc, #352]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	4a57      	ldr	r2, [pc, #348]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	4b55      	ldr	r3, [pc, #340]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	4a54      	ldr	r2, [pc, #336]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fd f96c 	bl	80018e4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fd f968 	bl	80018e4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0cb      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	4b49      	ldr	r3, [pc, #292]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0ee      	beq.n	8004610 <HAL_RCC_OscConfig+0x334>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004634:	f7fd f956 	bl	80018e4 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fd f952 	bl	80018e4 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0b5      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	4b3e      	ldr	r3, [pc, #248]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ee      	bne.n	800463c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800465e:	7dfb      	ldrb	r3, [r7, #23]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004664:	4b39      	ldr	r3, [pc, #228]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	4a38      	ldr	r2, [pc, #224]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800466e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80a1 	beq.w	80047bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467a:	4b34      	ldr	r3, [pc, #208]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b08      	cmp	r3, #8
 8004684:	d05c      	beq.n	8004740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d141      	bne.n	8004712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468e:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCC_OscConfig+0x478>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fd f926 	bl	80018e4 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd f922 	bl	80018e4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e087      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	4b27      	ldr	r3, [pc, #156]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69da      	ldr	r2, [r3, #28]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	019b      	lsls	r3, r3, #6
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	491b      	ldr	r1, [pc, #108]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x478>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fd f8fb 	bl	80018e4 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fd f8f7 	bl	80018e4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e05c      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004704:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x416>
 8004710:	e054      	b.n	80047bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_RCC_OscConfig+0x478>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fd f8e4 	bl	80018e4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd f8e0 	bl	80018e4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e045      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x444>
 800473e:	e03d      	b.n	80047bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e038      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000
 8004754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d028      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d121      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d11a      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800478e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	3b01      	subs	r3, #1
 80047a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800

080047cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0cc      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e0:	4b68      	ldr	r3, [pc, #416]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d90c      	bls.n	8004808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b65      	ldr	r3, [pc, #404]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b63      	ldr	r3, [pc, #396]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0b8      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004820:	4b59      	ldr	r3, [pc, #356]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800482a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004838:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a52      	ldr	r2, [pc, #328]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004844:	4b50      	ldr	r3, [pc, #320]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	494d      	ldr	r1, [pc, #308]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d044      	beq.n	80048ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	4b47      	ldr	r3, [pc, #284]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d119      	bne.n	80048aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e07f      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d003      	beq.n	800488a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004886:	2b03      	cmp	r3, #3
 8004888:	d107      	bne.n	800489a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488a:	4b3f      	ldr	r3, [pc, #252]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06f      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489a:	4b3b      	ldr	r3, [pc, #236]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e067      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048aa:	4b37      	ldr	r3, [pc, #220]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f023 0203 	bic.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4934      	ldr	r1, [pc, #208]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048bc:	f7fd f812 	bl	80018e4 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	e00a      	b.n	80048da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c4:	f7fd f80e 	bl	80018e4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e04f      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048da:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 020c 	and.w	r2, r3, #12
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1eb      	bne.n	80048c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d20c      	bcs.n	8004914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b20      	ldr	r3, [pc, #128]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e032      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004920:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4916      	ldr	r1, [pc, #88]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493e:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	490e      	ldr	r1, [pc, #56]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004952:	f000 f895 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8004956:	4602      	mov	r2, r0
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	490a      	ldr	r1, [pc, #40]	@ (800498c <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	5ccb      	ldrb	r3, [r1, r3]
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	4a09      	ldr	r2, [pc, #36]	@ (8004990 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800496e:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc ff72 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023c00 	.word	0x40023c00
 8004988:	40023800 	.word	0x40023800
 800498c:	0800d998 	.word	0x0800d998
 8004990:	20000000 	.word	0x20000000
 8004994:	20000004 	.word	0x20000004

08004998 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	@ 0x30
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d129      	bne.n	80049fe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ba:	4b28      	ldr	r3, [pc, #160]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80049c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049cc:	2302      	movs	r3, #2
 80049ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d0:	2303      	movs	r3, #3
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80049dc:	f107 031c 	add.w	r3, r7, #28
 80049e0:	4619      	mov	r1, r3
 80049e2:	481f      	ldr	r0, [pc, #124]	@ (8004a60 <HAL_RCC_MCOConfig+0xc8>)
 80049e4:	f7fd ff30 	bl	8002848 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80049e8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	4919      	ldr	r1, [pc, #100]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80049fc:	e029      	b.n	8004a52 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	4b16      	ldr	r3, [pc, #88]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 8004a08:	f043 0304 	orr.w	r3, r3, #4
 8004a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0e:	4b13      	ldr	r3, [pc, #76]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a20:	2302      	movs	r3, #2
 8004a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a24:	2303      	movs	r3, #3
 8004a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004a30:	f107 031c 	add.w	r3, r7, #28
 8004a34:	4619      	mov	r1, r3
 8004a36:	480b      	ldr	r0, [pc, #44]	@ (8004a64 <HAL_RCC_MCOConfig+0xcc>)
 8004a38:	f7fd ff06 	bl	8002848 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004a3c:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	00d9      	lsls	r1, r3, #3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	4903      	ldr	r1, [pc, #12]	@ (8004a5c <HAL_RCC_MCOConfig+0xc4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
}
 8004a52:	bf00      	nop
 8004a54:	3730      	adds	r7, #48	@ 0x30
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40020000 	.word	0x40020000
 8004a64:	40020800 	.word	0x40020800

08004a68 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	@ (8004a7c <HAL_RCC_EnableCSS+0x14>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	4247004c 	.word	0x4247004c

08004a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a84:	b094      	sub	sp, #80	@ 0x50
 8004a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a90:	2300      	movs	r3, #0
 8004a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a98:	4b79      	ldr	r3, [pc, #484]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	f200 80e1 	bhi.w	8004c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d003      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x3a>
 8004ab2:	e0db      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b73      	ldr	r3, [pc, #460]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004ab8:	e0db      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aba:	4b72      	ldr	r3, [pc, #456]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004abe:	e0d8      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aca:	4b6d      	ldr	r3, [pc, #436]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d063      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	2200      	movs	r2, #0
 8004ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aea:	2300      	movs	r3, #0
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	f04f 0000 	mov.w	r0, #0
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	0159      	lsls	r1, r3, #5
 8004b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b04:	0150      	lsls	r0, r2, #5
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	1a51      	subs	r1, r2, r1
 8004b0e:	6139      	str	r1, [r7, #16]
 8004b10:	4629      	mov	r1, r5
 8004b12:	eb63 0301 	sbc.w	r3, r3, r1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b24:	4659      	mov	r1, fp
 8004b26:	018b      	lsls	r3, r1, #6
 8004b28:	4651      	mov	r1, sl
 8004b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b2e:	4651      	mov	r1, sl
 8004b30:	018a      	lsls	r2, r1, #6
 8004b32:	4651      	mov	r1, sl
 8004b34:	ebb2 0801 	subs.w	r8, r2, r1
 8004b38:	4659      	mov	r1, fp
 8004b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b52:	4690      	mov	r8, r2
 8004b54:	4699      	mov	r9, r3
 8004b56:	4623      	mov	r3, r4
 8004b58:	eb18 0303 	adds.w	r3, r8, r3
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	462b      	mov	r3, r5
 8004b60:	eb49 0303 	adc.w	r3, r9, r3
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b72:	4629      	mov	r1, r5
 8004b74:	028b      	lsls	r3, r1, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	028a      	lsls	r2, r1, #10
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b86:	2200      	movs	r2, #0
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b90:	f7fb fb20 	bl	80001d4 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9c:	e058      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b38      	ldr	r3, [pc, #224]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4611      	mov	r1, r2
 8004baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	f04f 0000 	mov.w	r0, #0
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	0159      	lsls	r1, r3, #5
 8004bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bca:	0150      	lsls	r0, r2, #5
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	00eb      	lsls	r3, r5, #3
 8004c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c06:	00e2      	lsls	r2, r4, #3
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	18e3      	adds	r3, r4, r3
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	464b      	mov	r3, r9
 8004c14:	eb45 0303 	adc.w	r3, r5, r3
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c26:	4629      	mov	r1, r5
 8004c28:	028b      	lsls	r3, r1, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c30:	4621      	mov	r1, r4
 8004c32:	028a      	lsls	r2, r1, #10
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	61fa      	str	r2, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	f7fb fac6 	bl	80001d4 <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c6a:	e002      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3750      	adds	r7, #80	@ 0x50
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	00f42400 	.word	0x00f42400

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	@ (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000000 	.word	0x20000000

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a9b      	lsrs	r3, r3, #10
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	@ (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	0800d9a8 	.word	0x0800d9a8

08004cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ccc:	f7ff ffdc 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0b5b      	lsrs	r3, r3, #13
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	@ (8004cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	0800d9a8 	.word	0x0800d9a8

08004cf0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfc:	2b80      	cmp	r3, #128	@ 0x80
 8004cfe:	d104      	bne.n	8004d0a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004d00:	f000 f80a 	bl	8004d18 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004d04:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004d06:	2280      	movs	r2, #128	@ 0x80
 8004d08:	701a      	strb	r2, [r3, #0]
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	4002380e 	.word	0x4002380e

08004d18 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d035      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d50:	4b67      	ldr	r3, [pc, #412]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d56:	f7fc fdc5 	bl	80018e4 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d5e:	f7fc fdc1 	bl	80018e4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0ba      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d70:	4b60      	ldr	r3, [pc, #384]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	019a      	lsls	r2, r3, #6
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	071b      	lsls	r3, r3, #28
 8004d88:	495a      	ldr	r1, [pc, #360]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d90:	4b57      	ldr	r3, [pc, #348]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d96:	f7fc fda5 	bl	80018e4 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d9e:	f7fc fda1 	bl	80018e4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e09a      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004db0:	4b50      	ldr	r3, [pc, #320]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8083 	beq.w	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	4b49      	ldr	r3, [pc, #292]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	4a48      	ldr	r2, [pc, #288]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dda:	4b46      	ldr	r3, [pc, #280]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004de6:	4b44      	ldr	r3, [pc, #272]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a43      	ldr	r2, [pc, #268]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004df2:	f7fc fd77 	bl	80018e4 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dfa:	f7fc fd73 	bl	80018e4 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e06c      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e18:	4b36      	ldr	r3, [pc, #216]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d02f      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d028      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e36:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e40:	4b2e      	ldr	r3, [pc, #184]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e46:	4b2d      	ldr	r3, [pc, #180]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e4c:	4a29      	ldr	r2, [pc, #164]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e52:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d114      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fc fd41 	bl	80018e4 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7fc fd3d 	bl	80018e4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e034      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ee      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e94:	d10d      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e96:	4b17      	ldr	r3, [pc, #92]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eaa:	4912      	ldr	r1, [pc, #72]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]
 8004eb0:	e005      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004eb8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ebc:	6093      	str	r3, [r2, #8]
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ec0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eca:	490a      	ldr	r1, [pc, #40]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7c1a      	ldrb	r2, [r3, #16]
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ee2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	42470068 	.word	0x42470068
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	42470e40 	.word	0x42470e40
 8004f00:	424711e0 	.word	0x424711e0

08004f04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e073      	b.n	8005002 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7f5b      	ldrb	r3, [r3, #29]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fb fe22 	bl	8000b74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d055      	beq.n	8004ff0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	22ca      	movs	r2, #202	@ 0xca
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2253      	movs	r2, #83	@ 0x53
 8004f52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f99d 	bl	8005294 <RTC_EnterInitMode>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d12c      	bne.n	8004fbe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f76:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68d2      	ldr	r2, [r2, #12]
 8004f9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6919      	ldr	r1, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	041a      	lsls	r2, r3, #16
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9a4 	bl	8005302 <RTC_ExitInitMode>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	22ff      	movs	r2, #255	@ 0xff
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fee:	e001      	b.n	8004ff4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800500a:	b590      	push	{r4, r7, lr}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	7f1b      	ldrb	r3, [r3, #28]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_RTC_SetTime+0x1c>
 8005022:	2302      	movs	r3, #2
 8005024:	e087      	b.n	8005136 <HAL_RTC_SetTime+0x12c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2202      	movs	r2, #2
 8005030:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d126      	bne.n	8005086 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2200      	movs	r2, #0
 800504a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f97b 	bl	800534c <RTC_ByteToBcd2>
 8005056:	4603      	mov	r3, r0
 8005058:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f974 	bl	800534c <RTC_ByteToBcd2>
 8005064:	4603      	mov	r3, r0
 8005066:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005068:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	789b      	ldrb	r3, [r3, #2]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f96c 	bl	800534c <RTC_ByteToBcd2>
 8005074:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005076:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	78db      	ldrb	r3, [r3, #3]
 800507e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e018      	b.n	80050b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2200      	movs	r2, #0
 8005098:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050a6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80050ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	78db      	ldrb	r3, [r3, #3]
 80050b2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	22ca      	movs	r2, #202	@ 0xca
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2253      	movs	r2, #83	@ 0x53
 80050c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f8e3 	bl	8005294 <RTC_EnterInitMode>
 80050ce:	4603      	mov	r3, r0
 80050d0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d120      	bne.n	800511a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80050e2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80050e6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f8f6 	bl	8005302 <RTC_ExitInitMode>
 8005116:	4603      	mov	r3, r0
 8005118:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	22ff      	movs	r2, #255	@ 0xff
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]

  return status;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
}
 8005136:	4618      	mov	r0, r3
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd90      	pop	{r4, r7, pc}

0800513e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800513e:	b590      	push	{r4, r7, lr}
 8005140:	b087      	sub	sp, #28
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	7f1b      	ldrb	r3, [r3, #28]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_RTC_SetDate+0x1c>
 8005156:	2302      	movs	r3, #2
 8005158:	e071      	b.n	800523e <HAL_RTC_SetDate+0x100>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2202      	movs	r2, #2
 8005164:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10e      	bne.n	800518a <HAL_RTC_SetDate+0x4c>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	f023 0310 	bic.w	r3, r3, #16
 8005180:	b2db      	uxtb	r3, r3
 8005182:	330a      	adds	r3, #10
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11c      	bne.n	80051ca <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f8d9 	bl	800534c <RTC_ByteToBcd2>
 800519a:	4603      	mov	r3, r0
 800519c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f8d2 	bl	800534c <RTC_ByteToBcd2>
 80051a8:	4603      	mov	r3, r0
 80051aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	789b      	ldrb	r3, [r3, #2]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f8ca 	bl	800534c <RTC_ByteToBcd2>
 80051b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e00e      	b.n	80051e8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	78db      	ldrb	r3, [r3, #3]
 80051ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051d6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80051dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	22ca      	movs	r2, #202	@ 0xca
 80051ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2253      	movs	r2, #83	@ 0x53
 80051f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f84b 	bl	8005294 <RTC_EnterInitMode>
 80051fe:	4603      	mov	r3, r0
 8005200:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10c      	bne.n	8005222 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005212:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005216:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f872 	bl	8005302 <RTC_ExitInitMode>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	22ff      	movs	r2, #255	@ 0xff
 8005234:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]

  return status;
 800523c:	7cfb      	ldrb	r3, [r7, #19]
}
 800523e:	4618      	mov	r0, r3
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
	...

08005248 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a0d      	ldr	r2, [pc, #52]	@ (8005290 <HAL_RTC_WaitForSynchro+0x48>)
 800525a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800525c:	f7fc fb42 	bl	80018e4 <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005262:	e009      	b.n	8005278 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005264:	f7fc fb3e 	bl	80018e4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005272:	d901      	bls.n	8005278 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e007      	b.n	8005288 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ee      	beq.n	8005264 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	00013f5f 	.word	0x00013f5f

08005294 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d122      	bne.n	80052f8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052c2:	f7fc fb0f 	bl	80018e4 <HAL_GetTick>
 80052c6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052c8:	e00c      	b.n	80052e4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052ca:	f7fc fb0b 	bl	80018e4 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052d8:	d904      	bls.n	80052e4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2204      	movs	r2, #4
 80052de:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <RTC_EnterInitMode+0x64>
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d1e8      	bne.n	80052ca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800531c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ff8b 	bl	8005248 <HAL_RTC_WaitForSynchro>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2204      	movs	r2, #4
 800533c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800535a:	e005      	b.n	8005368 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	3b0a      	subs	r3, #10
 8005366:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	2b09      	cmp	r3, #9
 800536c:	d8f6      	bhi.n	800535c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	b2da      	uxtb	r2, r3
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	4313      	orrs	r3, r2
 800537a:	b2db      	uxtb	r3, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_RTCEx_SetTamper>:
  *                the configuration information for RTC.
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	7f1b      	ldrb	r3, [r3, #28]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_RTCEx_SetTamper+0x1a>
 800539e:	2302      	movs	r3, #2
 80053a0:	e049      	b.n	8005436 <HAL_RTCEx_SetTamper+0xae>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	775a      	strb	r2, [r3, #29]

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAFCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Configure the tamper trigger bit (this bit is just on the right of the
       tamper enable bit, hence the one-time right shift before updating it) */
  if (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d106      	bne.n	80053d6 <HAL_RTCEx_SetTamper+0x4e>
  {
    /* Set the tamper trigger bit (case of falling edge or high level) */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e006      	b.n	80053e4 <HAL_RTCEx_SetTamper+0x5c>
  }
  else
  {
    /* Clear the tamper trigger bit (case of rising edge or low level) */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	43db      	mvns	r3, r3
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4013      	ands	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK              | \
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 80053ea:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80053ee:	60fb      	str	r3, [r7, #12]
              RTC_TAMPER_PULLUP_MASK             | \
              RTC_TAFCR_TAMP1INSEL               | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
             (uint32_t)sTamper->SamplingFrequency | \
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 80053f8:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 80053fe:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
             (uint32_t)sTamper->PrechargeDuration | \
 8005404:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PinSelection      | \
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
             (uint32_t)sTamper->TamperPullUp      | \
 800540a:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->PinSelection      | \
 8005410:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Disable tamper global interrupt in case it is enabled */
  tmpreg &= (uint32_t)~RTC_TAFCR_TAMPIE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0304 	bic.w	r3, r3, #4
 800541e:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAFCR = tmpreg;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e022      	b.n	800549a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d105      	bne.n	800546c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fbd8 	bl	8000c1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2203      	movs	r2, #3
 8005470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f815 	bl	80054a4 <HAL_SD_InitCard>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e00a      	b.n	800549a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b08e      	sub	sp, #56	@ 0x38
 80054a8:	af04      	add	r7, sp, #16
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80054c0:	2376      	movs	r3, #118	@ 0x76
 80054c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681d      	ldr	r5, [r3, #0]
 80054c8:	466c      	mov	r4, sp
 80054ca:	f107 0314 	add.w	r3, r7, #20
 80054ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054d6:	f107 0308 	add.w	r3, r7, #8
 80054da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054dc:	4628      	mov	r0, r5
 80054de:	f003 fa23 	bl	8008928 <SDIO_Init>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80054e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e04f      	b.n	8005594 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80054f4:	4b29      	ldr	r3, [pc, #164]	@ (800559c <HAL_SD_InitCard+0xf8>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f003 fa5b 	bl	80089ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005504:	4b25      	ldr	r3, [pc, #148]	@ (800559c <HAL_SD_InitCard+0xf8>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800550a:	2002      	movs	r0, #2
 800550c:	f7fc f9f6 	bl	80018fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 f805 	bl	8006520 <SD_PowerON>
 8005516:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e02e      	b.n	8005594 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 ff24 	bl	8006384 <SD_InitCard>
 800553c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e01b      	b.n	8005594 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005564:	4618      	mov	r0, r3
 8005566:	f003 faba 	bl	8008ade <SDMMC_CmdBlockLength>
 800556a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00f      	beq.n	8005592 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a0a      	ldr	r2, [pc, #40]	@ (80055a0 <HAL_SD_InitCard+0xfc>)
 8005578:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	@ 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bdb0      	pop	{r4, r5, r7, pc}
 800559c:	422580a0 	.word	0x422580a0
 80055a0:	004005ff 	.word	0x004005ff

080055a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08c      	sub	sp, #48	@ 0x30
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0c0      	b.n	800574e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 80b9 	bne.w	800574c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	441a      	add	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d907      	bls.n	80055fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e0a7      	b.n	800574e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	4a4c      	ldr	r2, [pc, #304]	@ (8005758 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	4a4b      	ldr	r2, [pc, #300]	@ (800575c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005630:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	2200      	movs	r2, #0
 8005638:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	2200      	movs	r2, #0
 8005640:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3380      	adds	r3, #128	@ 0x80
 8005668:	4619      	mov	r1, r3
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	025b      	lsls	r3, r3, #9
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	f7fc fd89 	bl	8002188 <HAL_DMA_Start_IT>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d017      	beq.n	80056ac <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800568a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a33      	ldr	r2, [pc, #204]	@ (8005760 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005692:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e050      	b.n	800574e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80056ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d002      	beq.n	80056c0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	025b      	lsls	r3, r3, #9
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	025b      	lsls	r3, r3, #9
 80056ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80056cc:	2390      	movs	r3, #144	@ 0x90
 80056ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80056d0:	2302      	movs	r3, #2
 80056d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80056d8:	2301      	movs	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f107 0210 	add.w	r2, r7, #16
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f003 f9cd 	bl	8008a86 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d90a      	bls.n	8005708 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2282      	movs	r2, #130	@ 0x82
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056fe:	4618      	mov	r0, r3
 8005700:	f003 fa31 	bl	8008b66 <SDMMC_CmdReadMultiBlock>
 8005704:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005706:	e009      	b.n	800571c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2281      	movs	r2, #129	@ 0x81
 800570c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005714:	4618      	mov	r0, r3
 8005716:	f003 fa04 	bl	8008b22 <SDMMC_CmdReadSingleBlock>
 800571a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a0e      	ldr	r2, [pc, #56]	@ (8005760 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005728:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e002      	b.n	800574e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3730      	adds	r7, #48	@ 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	08006193 	.word	0x08006193
 800575c:	08006205 	.word	0x08006205
 8005760:	004005ff 	.word	0x004005ff
 8005764:	4225858c 	.word	0x4225858c

08005768 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	@ 0x30
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0c5      	b.n	800591c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 80be 	bne.w	800591a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80057a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	441a      	add	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d907      	bls.n	80057c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e0ac      	b.n	800591c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2203      	movs	r2, #3
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005924 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80057ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005928 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80057f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fa:	2200      	movs	r2, #0
 80057fc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005802:	2b01      	cmp	r3, #1
 8005804:	d002      	beq.n	800580c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	025b      	lsls	r3, r3, #9
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d90a      	bls.n	8005828 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22a0      	movs	r2, #160	@ 0xa0
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800581e:	4618      	mov	r0, r3
 8005820:	f003 f9e5 	bl	8008bee <SDMMC_CmdWriteMultiBlock>
 8005824:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005826:	e009      	b.n	800583c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2290      	movs	r2, #144	@ 0x90
 800582c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005834:	4618      	mov	r0, r3
 8005836:	f003 f9b8 	bl	8008baa <SDMMC_CmdWriteSingleBlock>
 800583a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d012      	beq.n	8005868 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a39      	ldr	r2, [pc, #228]	@ (800592c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e059      	b.n	800591c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005868:	4b31      	ldr	r3, [pc, #196]	@ (8005930 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005872:	2240      	movs	r2, #64	@ 0x40
 8005874:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3380      	adds	r3, #128	@ 0x80
 800589e:	461a      	mov	r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	025b      	lsls	r3, r3, #9
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	f7fc fc6f 	bl	8002188 <HAL_DMA_Start_IT>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01c      	beq.n	80058ea <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80058be:	f023 0302 	bic.w	r3, r3, #2
 80058c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a18      	ldr	r2, [pc, #96]	@ (800592c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e018      	b.n	800591c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	025b      	lsls	r3, r3, #9
 80058f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80058f6:	2390      	movs	r3, #144	@ 0x90
 80058f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005902:	2301      	movs	r3, #1
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f107 0210 	add.w	r2, r7, #16
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f003 f8b8 	bl	8008a86 <SDIO_ConfigData>

      return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3730      	adds	r7, #48	@ 0x30
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	08006169 	.word	0x08006169
 8005928:	08006205 	.word	0x08006205
 800592c:	004005ff 	.word	0x004005ff
 8005930:	4225858c 	.word	0x4225858c

08005934 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_SD_IRQHandler+0x2e>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 f806 	bl	800696c <SD_Read_IT>
 8005960:	e165      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 808f 	beq.w	8005a90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800598a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800598e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d039      	beq.n	8005a1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <HAL_SD_IRQHandler+0x8a>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d011      	beq.n	80059e2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f003 f936 	bl	8008c34 <SDMMC_CmdStopTransfer>
 80059c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f92f 	bl	8005c40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80059ea:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <HAL_SD_IRQHandler+0xda>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f005 f8de 	bl	800abd0 <HAL_SD_RxCpltCallback>
 8005a14:	e10b      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f005 f8d0 	bl	800abbc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a1c:	e107      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8102 	beq.w	8005c2e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d011      	beq.n	8005a58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 f8fb 	bl	8008c34 <SDMMC_CmdStopTransfer>
 8005a3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8f4 	bl	8005c40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 80e5 	bne.w	8005c2e <HAL_SD_IRQHandler+0x2fa>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80df 	bne.w	8005c2e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0208 	bic.w	r2, r2, #8
 8005a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f005 f897 	bl	800abbc <HAL_SD_TxCpltCallback>
}
 8005a8e:	e0ce      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_SD_IRQHandler+0x17c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 ffb0 	bl	8006a0e <SD_Write_IT>
 8005aae:	e0be      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab6:	f240 233a 	movw	r3, #570	@ 0x23a
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80b6 	beq.w	8005c2e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	f043 0202 	orr.w	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	f043 0208 	orr.w	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	f043 0220 	orr.w	r2, r3, #32
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	f043 0210 	orr.w	r2, r3, #16
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3c:	f043 0208 	orr.w	r2, r3, #8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f240 723a 	movw	r2, #1850	@ 0x73a
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8005b5c:	f023 0302 	bic.w	r3, r3, #2
 8005b60:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f003 f864 	bl	8008c34 <SDMMC_CmdStopTransfer>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f855 	bl	8005c40 <HAL_SD_ErrorCallback>
}
 8005b96:	e04a      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d045      	beq.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <HAL_SD_IRQHandler+0x282>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d011      	beq.n	8005bda <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bba:	4a1f      	ldr	r2, [pc, #124]	@ (8005c38 <HAL_SD_IRQHandler+0x304>)
 8005bbc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fc fba8 	bl	8002318 <HAL_DMA_Abort_IT>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02f      	beq.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb68 	bl	80062a8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005bd8:	e029      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_SD_IRQHandler+0x2ba>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	4a12      	ldr	r2, [pc, #72]	@ (8005c3c <HAL_SD_IRQHandler+0x308>)
 8005bf4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fc fb8c 	bl	8002318 <HAL_DMA_Abort_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d013      	beq.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fb83 	bl	8006316 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005c10:	e00d      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f004 ffbe 	bl	800aba8 <HAL_SD_AbortCallback>
}
 8005c2c:	e7ff      	b.n	8005c2e <HAL_SD_IRQHandler+0x2fa>
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	080062a9 	.word	0x080062a9
 8005c3c:	08006317 	.word	0x08006317

08005c40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c62:	0f9b      	lsrs	r3, r3, #30
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c6e:	0e9b      	lsrs	r3, r3, #26
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c80:	0e1b      	lsrs	r3, r3, #24
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cd2:	0bdb      	lsrs	r3, r3, #15
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ce4:	0b9b      	lsrs	r3, r3, #14
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cf6:	0b5b      	lsrs	r3, r3, #13
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d08:	0b1b      	lsrs	r3, r3, #12
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d163      	bne.n	8005dec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d28:	009a      	lsls	r2, r3, #2
 8005d2a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005d34:	0f92      	lsrs	r2, r2, #30
 8005d36:	431a      	orrs	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d40:	0edb      	lsrs	r3, r3, #27
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d52:	0e1b      	lsrs	r3, r3, #24
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d64:	0d5b      	lsrs	r3, r3, #21
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d76:	0c9b      	lsrs	r3, r3, #18
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d88:	0bdb      	lsrs	r3, r3, #15
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	7e1b      	ldrb	r3, [r3, #24]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	3302      	adds	r3, #2
 8005dac:	2201      	movs	r2, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005db6:	fb03 f202 	mul.w	r2, r3, r2
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	7a1b      	ldrb	r3, [r3, #8]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005dd8:	0a52      	lsrs	r2, r2, #9
 8005dda:	fb03 f202 	mul.w	r2, r3, r2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de8:	661a      	str	r2, [r3, #96]	@ 0x60
 8005dea:	e031      	b.n	8005e50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d11d      	bne.n	8005e30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df8:	041b      	lsls	r3, r3, #16
 8005dfa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	431a      	orrs	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	029a      	lsls	r2, r3, #10
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e24:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e2e:	e00f      	b.n	8005e50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a58      	ldr	r2, [pc, #352]	@ (8005f98 <HAL_SD_GetCardCSD+0x344>)
 8005e36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e09d      	b.n	8005f8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e54:	0b9b      	lsrs	r3, r3, #14
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e66:	09db      	lsrs	r3, r3, #7
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e88:	0fdb      	lsrs	r3, r3, #31
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	0f5b      	lsrs	r3, r3, #29
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea6:	0e9b      	lsrs	r3, r3, #26
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb8:	0d9b      	lsrs	r3, r3, #22
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eca:	0d5b      	lsrs	r3, r3, #21
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efa:	0bdb      	lsrs	r3, r3, #15
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0e:	0b9b      	lsrs	r3, r3, #14
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	0b5b      	lsrs	r3, r3, #13
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	0b1b      	lsrs	r3, r3, #12
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4a:	0a9b      	lsrs	r3, r3, #10
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	004005ff 	.word	0x004005ff

08005f9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005ff4:	b5b0      	push	{r4, r5, r7, lr}
 8005ff6:	b08e      	sub	sp, #56	@ 0x38
 8005ff8:	af04      	add	r7, sp, #16
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2203      	movs	r2, #3
 8006008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006010:	2b03      	cmp	r3, #3
 8006012:	d02e      	beq.n	8006072 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601a:	d106      	bne.n	800602a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	@ 0x38
 8006028:	e029      	b.n	800607e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006030:	d10a      	bne.n	8006048 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb2a 	bl	800668c <SD_WideBus_Enable>
 8006038:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	639a      	str	r2, [r3, #56]	@ 0x38
 8006046:	e01a      	b.n	800607e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb67 	bl	8006722 <SD_WideBus_Disable>
 8006054:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	@ 0x38
 8006062:	e00c      	b.n	800607e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006070:	e005      	b.n	800607e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006076:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a26      	ldr	r2, [pc, #152]	@ (8006124 <HAL_SD_ConfigWideBusOperation+0x130>)
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800609c:	e01f      	b.n	80060de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681d      	ldr	r5, [r3, #0]
 80060c4:	466c      	mov	r4, sp
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d8:	4628      	mov	r0, r5
 80060da:	f002 fc25 	bl	8008928 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060e6:	4618      	mov	r0, r3
 80060e8:	f002 fcf9 	bl	8008ade <SDMMC_CmdBlockLength>
 80060ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <HAL_SD_ConfigWideBusOperation+0x130>)
 80060fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006116:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800611a:	4618      	mov	r0, r3
 800611c:	3728      	adds	r7, #40	@ 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bdb0      	pop	{r4, r5, r7, pc}
 8006122:	bf00      	nop
 8006124:	004005ff 	.word	0x004005ff

08006128 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa7e 	bl	800663c <SD_SendStatus>
 8006140:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	0a5b      	lsrs	r3, r3, #9
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800615e:	693b      	ldr	r3, [r7, #16]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006174:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006184:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	2b82      	cmp	r3, #130	@ 0x82
 80061a6:	d111      	bne.n	80061cc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f002 fd41 	bl	8008c34 <SDMMC_CmdStopTransfer>
 80061b2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff fd3a 	bl	8005c40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0208 	bic.w	r2, r2, #8
 80061da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f004 fceb 	bl	800abd0 <HAL_SD_RxCpltCallback>
#endif
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fc fa2c 	bl	8002670 <HAL_DMA_GetError>
 8006218:	4603      	mov	r3, r0
 800621a:	2b02      	cmp	r3, #2
 800621c:	d03e      	beq.n	800629c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006224:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d002      	beq.n	800623a <SD_DMAError+0x36>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d12d      	bne.n	8006296 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <SD_DMAError+0xa0>)
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006250:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006256:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	f7ff ff62 	bl	8006128 <HAL_SD_GetCardState>
 8006264:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b06      	cmp	r3, #6
 800626a:	d002      	beq.n	8006272 <SD_DMAError+0x6e>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d10a      	bne.n	8006288 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f002 fcdc 	bl	8008c34 <SDMMC_CmdStopTransfer>
 800627c:	4602      	mov	r2, r0
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	431a      	orrs	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7ff fcd2 	bl	8005c40 <HAL_SD_ErrorCallback>
#endif
  }
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	004005ff 	.word	0x004005ff

080062a8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f240 523a 	movw	r2, #1338	@ 0x53a
 80062be:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ff31 	bl	8006128 <HAL_SD_GetCardState>
 80062c6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d002      	beq.n	80062e2 <SD_DMATxAbort+0x3a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d10a      	bne.n	80062f8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 fca4 	bl	8008c34 <SDMMC_CmdStopTransfer>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f004 fc51 	bl	800aba8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006306:	e002      	b.n	800630e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fc99 	bl	8005c40 <HAL_SD_ErrorCallback>
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006322:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f240 523a 	movw	r2, #1338	@ 0x53a
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f7ff fefa 	bl	8006128 <HAL_SD_GetCardState>
 8006334:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b06      	cmp	r3, #6
 8006348:	d002      	beq.n	8006350 <SD_DMARxAbort+0x3a>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b05      	cmp	r3, #5
 800634e:	d10a      	bne.n	8006366 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f002 fc6d 	bl	8008c34 <SDMMC_CmdStopTransfer>
 800635a:	4602      	mov	r2, r0
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	431a      	orrs	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f004 fc1a 	bl	800aba8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006374:	e002      	b.n	800637c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fc62 	bl	8005c40 <HAL_SD_ErrorCallback>
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006384:	b5b0      	push	{r4, r5, r7, lr}
 8006386:	b094      	sub	sp, #80	@ 0x50
 8006388:	af04      	add	r7, sp, #16
 800638a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800638c:	2301      	movs	r3, #1
 800638e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f002 fb1e 	bl	80089d6 <SDIO_GetPowerState>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80063a4:	e0b8      	b.n	8006518 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d02f      	beq.n	800640e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f002 fd48 	bl	8008e48 <SDMMC_CmdSendCID>
 80063b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80063c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c2:	e0a9      	b.n	8006518 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f002 fb48 	bl	8008a60 <SDIO_GetResponse>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2104      	movs	r1, #4
 80063dc:	4618      	mov	r0, r3
 80063de:	f002 fb3f 	bl	8008a60 <SDIO_GetResponse>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2108      	movs	r1, #8
 80063ee:	4618      	mov	r0, r3
 80063f0:	f002 fb36 	bl	8008a60 <SDIO_GetResponse>
 80063f4:	4602      	mov	r2, r0
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	210c      	movs	r1, #12
 8006400:	4618      	mov	r0, r3
 8006402:	f002 fb2d 	bl	8008a60 <SDIO_GetResponse>
 8006406:	4602      	mov	r2, r0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006412:	2b03      	cmp	r3, #3
 8006414:	d00d      	beq.n	8006432 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f107 020e 	add.w	r2, r7, #14
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f002 fd4e 	bl	8008ec2 <SDMMC_CmdSetRelAdd>
 8006426:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <SD_InitCard+0xae>
    {
      return errorstate;
 800642e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006430:	e072      	b.n	8006518 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	2b03      	cmp	r3, #3
 8006438:	d036      	beq.n	80064a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	461a      	mov	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f002 fd18 	bl	8008e84 <SDMMC_CmdSendCSD>
 8006454:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <SD_InitCard+0xdc>
    {
      return errorstate;
 800645c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645e:	e05b      	b.n	8006518 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f002 fafa 	bl	8008a60 <SDIO_GetResponse>
 800646c:	4602      	mov	r2, r0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2104      	movs	r1, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f002 faf1 	bl	8008a60 <SDIO_GetResponse>
 800647e:	4602      	mov	r2, r0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2108      	movs	r1, #8
 800648a:	4618      	mov	r0, r3
 800648c:	f002 fae8 	bl	8008a60 <SDIO_GetResponse>
 8006490:	4602      	mov	r2, r0
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	210c      	movs	r1, #12
 800649c:	4618      	mov	r0, r3
 800649e:	f002 fadf 	bl	8008a60 <SDIO_GetResponse>
 80064a2:	4602      	mov	r2, r0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2104      	movs	r1, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f002 fad6 	bl	8008a60 <SDIO_GetResponse>
 80064b4:	4603      	mov	r3, r0
 80064b6:	0d1a      	lsrs	r2, r3, #20
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80064bc:	f107 0310 	add.w	r3, r7, #16
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fbc6 	bl	8005c54 <HAL_SD_GetCardCSD>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80064d2:	e021      	b.n	8006518 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6819      	ldr	r1, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	2200      	movs	r2, #0
 80064e0:	461c      	mov	r4, r3
 80064e2:	4615      	mov	r5, r2
 80064e4:	4622      	mov	r2, r4
 80064e6:	462b      	mov	r3, r5
 80064e8:	4608      	mov	r0, r1
 80064ea:	f002 fbc5 	bl	8008c78 <SDMMC_CmdSelDesel>
 80064ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80064f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <SD_InitCard+0x176>
  {
    return errorstate;
 80064f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f8:	e00e      	b.n	8006518 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681d      	ldr	r5, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	466c      	mov	r4, sp
 8006502:	f103 0210 	add.w	r2, r3, #16
 8006506:	ca07      	ldmia	r2, {r0, r1, r2}
 8006508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800650c:	3304      	adds	r3, #4
 800650e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006510:	4628      	mov	r0, r5
 8006512:	f002 fa09 	bl	8008928 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3740      	adds	r7, #64	@ 0x40
 800651c:	46bd      	mov	sp, r7
 800651e:	bdb0      	pop	{r4, r5, r7, pc}

08006520 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f002 fbc0 	bl	8008cbe <SDMMC_CmdGoIdleState>
 800653e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	e072      	b.n	8006630 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f002 fbd3 	bl	8008cfa <SDMMC_CmdOperCond>
 8006554:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f002 fba9 	bl	8008cbe <SDMMC_CmdGoIdleState>
 800656c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	e05b      	b.n	8006630 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006582:	2b01      	cmp	r3, #1
 8006584:	d137      	bne.n	80065f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f002 fbd3 	bl	8008d38 <SDMMC_CmdAppCommand>
 8006592:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d02d      	beq.n	80065f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800659a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800659e:	e047      	b.n	8006630 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 fbc6 	bl	8008d38 <SDMMC_CmdAppCommand>
 80065ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	e03b      	b.n	8006630 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	491e      	ldr	r1, [pc, #120]	@ (8006638 <SD_PowerON+0x118>)
 80065be:	4618      	mov	r0, r3
 80065c0:	f002 fbdc 	bl	8008d7c <SDMMC_CmdAppOperCommand>
 80065c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80065d0:	e02e      	b.n	8006630 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 fa41 	bl	8008a60 <SDIO_GetResponse>
 80065de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	0fdb      	lsrs	r3, r3, #31
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <SD_PowerON+0xcc>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <SD_PowerON+0xce>
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]

    count++;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d802      	bhi.n	8006606 <SD_PowerON+0xe6>
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0cc      	beq.n	80065a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800660c:	4293      	cmp	r3, r2
 800660e:	d902      	bls.n	8006616 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006614:	e00c      	b.n	8006630 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
 8006626:	e002      	b.n	800662e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	c1100000 	.word	0xc1100000

0800663c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800664c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006650:	e018      	b.n	8006684 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f002 fc50 	bl	8008f04 <SDMMC_CmdSendStatus>
 8006664:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <SD_SendStatus+0x34>
  {
    return errorstate;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	e009      	b.n	8006684 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f002 f9f2 	bl	8008a60 <SDIO_GetResponse>
 800667c:	4602      	mov	r2, r0
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	2300      	movs	r3, #0
 800669a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f002 f9dc 	bl	8008a60 <SDIO_GetResponse>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066b2:	d102      	bne.n	80066ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80066b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80066b8:	e02f      	b.n	800671a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f879 	bl	80067b8 <SD_FindSCR>
 80066c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	e023      	b.n	800671a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01c      	beq.n	8006716 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e4:	041b      	lsls	r3, r3, #16
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f002 fb25 	bl	8008d38 <SDMMC_CmdAppCommand>
 80066ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	e00f      	b.n	800671a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f002 fb5e 	bl	8008dc2 <SDMMC_CmdBusWidth>
 8006706:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	e003      	b.n	800671a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006712:	2300      	movs	r3, #0
 8006714:	e001      	b.n	800671a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006716:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2100      	movs	r1, #0
 8006738:	4618      	mov	r0, r3
 800673a:	f002 f991 	bl	8008a60 <SDIO_GetResponse>
 800673e:	4603      	mov	r3, r0
 8006740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006748:	d102      	bne.n	8006750 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800674a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800674e:	e02f      	b.n	80067b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f82e 	bl	80067b8 <SD_FindSCR>
 800675c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	e023      	b.n	80067b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01c      	beq.n	80067ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f002 fada 	bl	8008d38 <SDMMC_CmdAppCommand>
 8006784:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	e00f      	b.n	80067b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f002 fb13 	bl	8008dc2 <SDMMC_CmdBusWidth>
 800679c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	e003      	b.n	80067b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e001      	b.n	80067b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b08f      	sub	sp, #60	@ 0x3c
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067c2:	f7fb f88f 	bl	80018e4 <HAL_GetTick>
 80067c6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80067cc:	2300      	movs	r3, #0
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2108      	movs	r1, #8
 80067de:	4618      	mov	r0, r3
 80067e0:	f002 f97d 	bl	8008ade <SDMMC_CmdBlockLength>
 80067e4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	e0b9      	b.n	8006964 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f002 fa9b 	bl	8008d38 <SDMMC_CmdAppCommand>
 8006802:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <SD_FindSCR+0x56>
  {
    return errorstate;
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	e0aa      	b.n	8006964 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800680e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006812:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006814:	2308      	movs	r3, #8
 8006816:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006818:	2330      	movs	r3, #48	@ 0x30
 800681a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800681c:	2302      	movs	r3, #2
 800681e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006820:	2300      	movs	r3, #0
 8006822:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006824:	2301      	movs	r3, #1
 8006826:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f107 0210 	add.w	r2, r7, #16
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f002 f927 	bl	8008a86 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f002 fae2 	bl	8008e06 <SDMMC_CmdSendSCR>
 8006842:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02a      	beq.n	80068a0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	e08a      	b.n	8006964 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00f      	beq.n	800687c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	f107 0208 	add.w	r2, r7, #8
 8006868:	18d4      	adds	r4, r2, r3
 800686a:	4608      	mov	r0, r1
 800686c:	f002 f887 	bl	800897e <SDIO_ReadFIFO>
 8006870:	4603      	mov	r3, r0
 8006872:	6023      	str	r3, [r4, #0]
      index++;
 8006874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006876:	3301      	adds	r3, #1
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	e006      	b.n	800688a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d012      	beq.n	80068b0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800688a:	f7fb f82b 	bl	80018e4 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006898:	d102      	bne.n	80068a0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800689a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800689e:	e061      	b.n	8006964 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0cf      	beq.n	800684e <SD_FindSCR+0x96>
 80068ae:	e000      	b.n	80068b2 <SD_FindSCR+0xfa>
      break;
 80068b0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <SD_FindSCR+0x116>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2208      	movs	r2, #8
 80068d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80068d6:	2308      	movs	r3, #8
 80068d8:	e044      	b.n	8006964 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2202      	movs	r2, #2
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	e037      	b.n	8006964 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2220      	movs	r2, #32
 8006908:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800690a:	2320      	movs	r3, #32
 800690c:	e02a      	b.n	8006964 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006916:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	061a      	lsls	r2, r3, #24
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006924:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800692e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	601a      	str	r2, [r3, #0]
    scr++;
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	3304      	adds	r3, #4
 800693e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	061a      	lsls	r2, r3, #24
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800694c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006956:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	0e1b      	lsrs	r3, r3, #24
 800695c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	373c      	adds	r7, #60	@ 0x3c
 8006968:	46bd      	mov	sp, r7
 800696a:	bd90      	pop	{r4, r7, pc}

0800696c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03f      	beq.n	8006a06 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e033      	b.n	80069f4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fff4 	bl	800897e <SDIO_ReadFIFO>
 8006996:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	3b01      	subs	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	0e1b      	lsrs	r3, r3, #24
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	3301      	adds	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b07      	cmp	r3, #7
 80069f8:	d9c8      	bls.n	800698c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d043      	beq.n	8006ab0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e037      	b.n	8006a9e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	021a      	lsls	r2, r3, #8
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	041a      	lsls	r2, r3, #16
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	061a      	lsls	r2, r3, #24
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f107 0208 	add.w	r2, r7, #8
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 ff80 	bl	8008998 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b07      	cmp	r3, #7
 8006aa2:	d9c4      	bls.n	8006a2e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e07b      	b.n	8006bc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d108      	bne.n	8006ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ada:	d009      	beq.n	8006af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	61da      	str	r2, [r3, #28]
 8006ae2:	e005      	b.n	8006af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa f9ac 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b74:	ea42 0103 	orr.w	r1, r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	0c1b      	lsrs	r3, r3, #16
 8006b8e:	f003 0104 	and.w	r1, r3, #4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	f003 0210 	and.w	r2, r3, #16
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10e      	bne.n	8006c0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
    return;
 8006c0a:	e0ce      	b.n	8006daa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_SPI_IRQHandler+0x5e>
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
    return;
 8006c28:	e0bf      	b.n	8006daa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_SPI_IRQHandler+0x7e>
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80b0 	beq.w	8006daa <HAL_SPI_IRQHandler+0x1de>
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80aa 	beq.w	8006daa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d023      	beq.n	8006ca8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d011      	beq.n	8006c90 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	e00b      	b.n	8006ca8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	693b      	ldr	r3, [r7, #16]
        return;
 8006ca6:	e080      	b.n	8006daa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d014      	beq.n	8006cdc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb6:	f043 0201 	orr.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00c      	beq.n	8006d00 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	f043 0208 	orr.w	r2, r3, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d04f      	beq.n	8006da8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_SPI_IRQHandler+0x168>
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d034      	beq.n	8006d9e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0203 	bic.w	r2, r2, #3
 8006d42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d011      	beq.n	8006d70 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d50:	4a17      	ldr	r2, [pc, #92]	@ (8006db0 <HAL_SPI_IRQHandler+0x1e4>)
 8006d52:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fb fadd 	bl	8002318 <HAL_DMA_Abort_IT>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d016      	beq.n	8006da6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8006db0 <HAL_SPI_IRQHandler+0x1e4>)
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fb fac7 	bl	8002318 <HAL_DMA_Abort_IT>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006d9c:	e003      	b.n	8006da6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f808 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006da4:	e000      	b.n	8006da8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006da6:	bf00      	nop
    return;
 8006da8:	bf00      	nop
  }
}
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	08006dc9 	.word	0x08006dc9

08006db4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff ffe6 	bl	8006db4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e041      	b.n	8006e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fa fabc 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f000 fb28 	bl	8007484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e041      	b.n	8006f24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d106      	bne.n	8006eba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7fa facf 	bl	8001458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f000 fad9 	bl	8007484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d020      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01b      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0202 	mvn.w	r2, #2
 8006f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa65 	bl	8007446 <HAL_TIM_IC_CaptureCallback>
 8006f7c:	e005      	b.n	8006f8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa57 	bl	8007432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa68 	bl	800745a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d020      	beq.n	8006fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01b      	beq.n	8006fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0204 	mvn.w	r2, #4
 8006fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa3f 	bl	8007446 <HAL_TIM_IC_CaptureCallback>
 8006fc8:	e005      	b.n	8006fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa31 	bl	8007432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa42 	bl	800745a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d020      	beq.n	8007028 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01b      	beq.n	8007028 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0208 	mvn.w	r2, #8
 8006ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2204      	movs	r2, #4
 8006ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa19 	bl	8007446 <HAL_TIM_IC_CaptureCallback>
 8007014:	e005      	b.n	8007022 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa0b 	bl	8007432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fa1c 	bl	800745a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	2b00      	cmp	r3, #0
 8007030:	d020      	beq.n	8007074 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01b      	beq.n	8007074 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0210 	mvn.w	r2, #16
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2208      	movs	r2, #8
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9f3 	bl	8007446 <HAL_TIM_IC_CaptureCallback>
 8007060:	e005      	b.n	800706e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9e5 	bl	8007432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f9f6 	bl	800745a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0201 	mvn.w	r2, #1
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9c3 	bl	800741e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00c      	beq.n	80070bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fd0e 	bl	8007ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00c      	beq.n	80070e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9c7 	bl	800746e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00c      	beq.n	8007104 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 0220 	mvn.w	r2, #32
 80070fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fce0 	bl	8007ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007126:	2302      	movs	r3, #2
 8007128:	e0ae      	b.n	8007288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b0c      	cmp	r3, #12
 8007136:	f200 809f 	bhi.w	8007278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007175 	.word	0x08007175
 8007144:	08007279 	.word	0x08007279
 8007148:	08007279 	.word	0x08007279
 800714c:	08007279 	.word	0x08007279
 8007150:	080071b5 	.word	0x080071b5
 8007154:	08007279 	.word	0x08007279
 8007158:	08007279 	.word	0x08007279
 800715c:	08007279 	.word	0x08007279
 8007160:	080071f7 	.word	0x080071f7
 8007164:	08007279 	.word	0x08007279
 8007168:	08007279 	.word	0x08007279
 800716c:	08007279 	.word	0x08007279
 8007170:	08007237 	.word	0x08007237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fa0e 	bl	800759c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0208 	orr.w	r2, r2, #8
 800718e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0204 	bic.w	r2, r2, #4
 800719e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6999      	ldr	r1, [r3, #24]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	619a      	str	r2, [r3, #24]
      break;
 80071b2:	e064      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fa54 	bl	8007668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6999      	ldr	r1, [r3, #24]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	021a      	lsls	r2, r3, #8
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	619a      	str	r2, [r3, #24]
      break;
 80071f4:	e043      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fa9f 	bl	8007740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69da      	ldr	r2, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0208 	orr.w	r2, r2, #8
 8007210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0204 	bic.w	r2, r2, #4
 8007220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69d9      	ldr	r1, [r3, #28]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	61da      	str	r2, [r3, #28]
      break;
 8007234:	e023      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fae9 	bl	8007814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69d9      	ldr	r1, [r3, #28]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	021a      	lsls	r2, r3, #8
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	61da      	str	r2, [r3, #28]
      break;
 8007276:	e002      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
      break;
 800727c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIM_ConfigClockSource+0x1c>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e0b4      	b.n	8007416 <HAL_TIM_ConfigClockSource+0x186>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e4:	d03e      	beq.n	8007364 <HAL_TIM_ConfigClockSource+0xd4>
 80072e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ea:	f200 8087 	bhi.w	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	f000 8086 	beq.w	8007402 <HAL_TIM_ConfigClockSource+0x172>
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072fa:	d87f      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b70      	cmp	r3, #112	@ 0x70
 80072fe:	d01a      	beq.n	8007336 <HAL_TIM_ConfigClockSource+0xa6>
 8007300:	2b70      	cmp	r3, #112	@ 0x70
 8007302:	d87b      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b60      	cmp	r3, #96	@ 0x60
 8007306:	d050      	beq.n	80073aa <HAL_TIM_ConfigClockSource+0x11a>
 8007308:	2b60      	cmp	r3, #96	@ 0x60
 800730a:	d877      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b50      	cmp	r3, #80	@ 0x50
 800730e:	d03c      	beq.n	800738a <HAL_TIM_ConfigClockSource+0xfa>
 8007310:	2b50      	cmp	r3, #80	@ 0x50
 8007312:	d873      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b40      	cmp	r3, #64	@ 0x40
 8007316:	d058      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x13a>
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d86f      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b30      	cmp	r3, #48	@ 0x30
 800731e:	d064      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b30      	cmp	r3, #48	@ 0x30
 8007322:	d86b      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d060      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007328:	2b20      	cmp	r3, #32
 800732a:	d867      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d05c      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007330:	2b10      	cmp	r3, #16
 8007332:	d05a      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	e062      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007346:	f000 fb2f 	bl	80079a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	609a      	str	r2, [r3, #8]
      break;
 8007362:	e04f      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007374:	f000 fb18 	bl	80079a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007386:	609a      	str	r2, [r3, #8]
      break;
 8007388:	e03c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007396:	461a      	mov	r2, r3
 8007398:	f000 fa8c 	bl	80078b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2150      	movs	r1, #80	@ 0x50
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fae5 	bl	8007972 <TIM_ITRx_SetConfig>
      break;
 80073a8:	e02c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b6:	461a      	mov	r2, r3
 80073b8:	f000 faab 	bl	8007912 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2160      	movs	r1, #96	@ 0x60
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fad5 	bl	8007972 <TIM_ITRx_SetConfig>
      break;
 80073c8:	e01c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d6:	461a      	mov	r2, r3
 80073d8:	f000 fa6c 	bl	80078b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2140      	movs	r1, #64	@ 0x40
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fac5 	bl	8007972 <TIM_ITRx_SetConfig>
      break;
 80073e8:	e00c      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f000 fabc 	bl	8007972 <TIM_ITRx_SetConfig>
      break;
 80073fa:	e003      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e000      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3a      	ldr	r2, [pc, #232]	@ (8007580 <TIM_Base_SetConfig+0xfc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00f      	beq.n	80074bc <TIM_Base_SetConfig+0x38>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a2:	d00b      	beq.n	80074bc <TIM_Base_SetConfig+0x38>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a37      	ldr	r2, [pc, #220]	@ (8007584 <TIM_Base_SetConfig+0x100>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_Base_SetConfig+0x38>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a36      	ldr	r2, [pc, #216]	@ (8007588 <TIM_Base_SetConfig+0x104>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_Base_SetConfig+0x38>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a35      	ldr	r2, [pc, #212]	@ (800758c <TIM_Base_SetConfig+0x108>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d108      	bne.n	80074ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007580 <TIM_Base_SetConfig+0xfc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01b      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074dc:	d017      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a28      	ldr	r2, [pc, #160]	@ (8007584 <TIM_Base_SetConfig+0x100>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a27      	ldr	r2, [pc, #156]	@ (8007588 <TIM_Base_SetConfig+0x104>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a26      	ldr	r2, [pc, #152]	@ (800758c <TIM_Base_SetConfig+0x108>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a25      	ldr	r2, [pc, #148]	@ (8007590 <TIM_Base_SetConfig+0x10c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a24      	ldr	r2, [pc, #144]	@ (8007594 <TIM_Base_SetConfig+0x110>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0x8a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <TIM_Base_SetConfig+0x114>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d108      	bne.n	8007520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a0e      	ldr	r2, [pc, #56]	@ (8007580 <TIM_Base_SetConfig+0xfc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d103      	bne.n	8007554 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	611a      	str	r2, [r3, #16]
  }
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40010000 	.word	0x40010000
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40014000 	.word	0x40014000
 8007594:	40014400 	.word	0x40014400
 8007598:	40014800 	.word	0x40014800

0800759c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	f023 0201 	bic.w	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0303 	bic.w	r3, r3, #3
 80075d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 0302 	bic.w	r3, r3, #2
 80075e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007664 <TIM_OC1_SetConfig+0xc8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d10c      	bne.n	8007612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f023 0308 	bic.w	r3, r3, #8
 80075fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 0304 	bic.w	r3, r3, #4
 8007610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a13      	ldr	r2, [pc, #76]	@ (8007664 <TIM_OC1_SetConfig+0xc8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d111      	bne.n	800763e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	4313      	orrs	r3, r2
 800763c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	621a      	str	r2, [r3, #32]
}
 8007658:	bf00      	nop
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40010000 	.word	0x40010000

08007668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f023 0210 	bic.w	r2, r3, #16
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800769e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0320 	bic.w	r3, r3, #32
 80076b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1e      	ldr	r2, [pc, #120]	@ (800773c <TIM_OC2_SetConfig+0xd4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d10d      	bne.n	80076e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	4313      	orrs	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a15      	ldr	r2, [pc, #84]	@ (800773c <TIM_OC2_SetConfig+0xd4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d113      	bne.n	8007714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40010000 	.word	0x40010000

08007740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1d      	ldr	r2, [pc, #116]	@ (8007810 <TIM_OC3_SetConfig+0xd0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d10d      	bne.n	80077ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a14      	ldr	r2, [pc, #80]	@ (8007810 <TIM_OC3_SetConfig+0xd0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d113      	bne.n	80077ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	621a      	str	r2, [r3, #32]
}
 8007804:	bf00      	nop
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	40010000 	.word	0x40010000

08007814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800784a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800785e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	031b      	lsls	r3, r3, #12
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a10      	ldr	r2, [pc, #64]	@ (80078b0 <TIM_OC4_SetConfig+0x9c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d109      	bne.n	8007888 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800787a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	019b      	lsls	r3, r3, #6
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000

080078b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f023 0201 	bic.w	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f023 030a 	bic.w	r3, r3, #10
 80078f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007912:	b480      	push	{r7}
 8007914:	b087      	sub	sp, #28
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f023 0210 	bic.w	r2, r3, #16
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800793c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	031b      	lsls	r3, r3, #12
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800794e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	f043 0307 	orr.w	r3, r3, #7
 8007994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	609a      	str	r2, [r3, #8]
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	021a      	lsls	r2, r3, #8
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	609a      	str	r2, [r3, #8]
}
 80079dc:	bf00      	nop
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e050      	b.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4c:	d013      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a18      	ldr	r2, [pc, #96]	@ (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a16      	ldr	r2, [pc, #88]	@ (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a15      	ldr	r2, [pc, #84]	@ (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a13      	ldr	r2, [pc, #76]	@ (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10c      	bne.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40014000 	.word	0x40014000

08007ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e042      	b.n	8007b84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7f9 fdc8 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2224      	movs	r2, #36	@ 0x24
 8007b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fc85 	bl	8008440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b0ba      	sub	sp, #232	@ 0xe8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10f      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x66>
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fb69 	bl	80082c2 <UART_Receive_IT>
      return;
 8007bf0:	e25b      	b.n	80080aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80de 	beq.w	8007db8 <HAL_UART_IRQHandler+0x22c>
 8007bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80d1 	beq.w	8007db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00b      	beq.n	8007c3a <HAL_UART_IRQHandler+0xae>
 8007c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c32:	f043 0201 	orr.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <HAL_UART_IRQHandler+0xd2>
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c56:	f043 0202 	orr.w	r2, r3, #2
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <HAL_UART_IRQHandler+0xf6>
 8007c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7a:	f043 0204 	orr.w	r2, r3, #4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d011      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x126>
 8007c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007caa:	f043 0208 	orr.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 81f2 	beq.w	80080a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <HAL_UART_IRQHandler+0x14e>
 8007cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 faf4 	bl	80082c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce4:	2b40      	cmp	r3, #64	@ 0x40
 8007ce6:	bf0c      	ite	eq
 8007ce8:	2301      	moveq	r3, #1
 8007cea:	2300      	movne	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d103      	bne.n	8007d06 <HAL_UART_IRQHandler+0x17a>
 8007cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d04f      	beq.n	8007da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9fc 	bl	8008104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d16:	2b40      	cmp	r3, #64	@ 0x40
 8007d18:	d141      	bne.n	8007d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3314      	adds	r3, #20
 8007d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1d9      	bne.n	8007d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d013      	beq.n	8007d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d72:	4a7e      	ldr	r2, [pc, #504]	@ (8007f6c <HAL_UART_IRQHandler+0x3e0>)
 8007d74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fa facc 	bl	8002318 <HAL_DMA_Abort_IT>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d016      	beq.n	8007db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d94:	e00e      	b.n	8007db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f99e 	bl	80080d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d9c:	e00a      	b.n	8007db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f99a 	bl	80080d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	e006      	b.n	8007db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f996 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007db2:	e175      	b.n	80080a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db4:	bf00      	nop
    return;
 8007db6:	e173      	b.n	80080a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	f040 814f 	bne.w	8008060 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc6:	f003 0310 	and.w	r3, r3, #16
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8148 	beq.w	8008060 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8141 	beq.w	8008060 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dde:	2300      	movs	r3, #0
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60bb      	str	r3, [r7, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfe:	2b40      	cmp	r3, #64	@ 0x40
 8007e00:	f040 80b6 	bne.w	8007f70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8145 	beq.w	80080a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e22:	429a      	cmp	r2, r3
 8007e24:	f080 813e 	bcs.w	80080a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e3a:	f000 8088 	beq.w	8007f4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1d9      	bne.n	8007e3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3314      	adds	r3, #20
 8007e90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3314      	adds	r3, #20
 8007eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007eae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e1      	bne.n	8007e8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3314      	adds	r3, #20
 8007ecc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007eea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007eec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ef0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e3      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f1e:	f023 0310 	bic.w	r3, r3, #16
 8007f22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e3      	bne.n	8007f0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa f975 	bl	8002238 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f8c1 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f6a:	e09b      	b.n	80080a4 <HAL_UART_IRQHandler+0x518>
 8007f6c:	080081cb 	.word	0x080081cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 808e 	beq.w	80080a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8089 	beq.w	80080a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007fba:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e3      	bne.n	8007f96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3314      	adds	r3, #20
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3314      	adds	r3, #20
 8007fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ff2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e3      	bne.n	8007fce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	60fb      	str	r3, [r7, #12]
   return(result);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0310 	bic.w	r3, r3, #16
 800802a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008038:	61fa      	str	r2, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e3      	bne.n	8008014 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f847 	bl	80080ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800805e:	e023      	b.n	80080a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <HAL_UART_IRQHandler+0x4f4>
 800806c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8ba 	bl	80081f2 <UART_Transmit_IT>
    return;
 800807e:	e014      	b.n	80080aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00e      	beq.n	80080aa <HAL_UART_IRQHandler+0x51e>
 800808c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8fa 	bl	8008292 <UART_EndTransmit_IT>
    return;
 800809e:	e004      	b.n	80080aa <HAL_UART_IRQHandler+0x51e>
    return;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <HAL_UART_IRQHandler+0x51e>
      return;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_UART_IRQHandler+0x51e>
      return;
 80080a8:	bf00      	nop
  }
}
 80080aa:	37e8      	adds	r7, #232	@ 0xe8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b095      	sub	sp, #84	@ 0x54
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	330c      	adds	r3, #12
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800812c:	643a      	str	r2, [r7, #64]	@ 0x40
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e5      	bne.n	800810c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3314      	adds	r3, #20
 8008146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f023 0301 	bic.w	r3, r3, #1
 8008156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3314      	adds	r3, #20
 800815e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008160:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e5      	bne.n	8008140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008178:	2b01      	cmp	r3, #1
 800817a:	d119      	bne.n	80081b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	60bb      	str	r3, [r7, #8]
   return(result);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	647b      	str	r3, [r7, #68]	@ 0x44
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	330c      	adds	r3, #12
 800819a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800819c:	61ba      	str	r2, [r7, #24]
 800819e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6979      	ldr	r1, [r7, #20]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	613b      	str	r3, [r7, #16]
   return(result);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e5      	bne.n	800817c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081be:	bf00      	nop
 80081c0:	3754      	adds	r7, #84	@ 0x54
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff ff77 	bl	80080d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b21      	cmp	r3, #33	@ 0x21
 8008204:	d13e      	bne.n	8008284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820e:	d114      	bne.n	800823a <UART_Transmit_IT+0x48>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d110      	bne.n	800823a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800822c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	1c9a      	adds	r2, r3, #2
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	621a      	str	r2, [r3, #32]
 8008238:	e008      	b.n	800824c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	1c59      	adds	r1, r3, #1
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6211      	str	r1, [r2, #32]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	b29b      	uxth	r3, r3
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4619      	mov	r1, r3
 800825a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10f      	bne.n	8008280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800826e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800827e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	e000      	b.n	8008286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008284:	2302      	movs	r3, #2
  }
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff fefc 	bl	80080b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b08c      	sub	sp, #48	@ 0x30
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b22      	cmp	r3, #34	@ 0x22
 80082d4:	f040 80ae 	bne.w	8008434 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e0:	d117      	bne.n	8008312 <UART_Receive_IT+0x50>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d113      	bne.n	8008312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008300:	b29a      	uxth	r2, r3
 8008302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830a:	1c9a      	adds	r2, r3, #2
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008310:	e026      	b.n	8008360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008324:	d007      	beq.n	8008336 <UART_Receive_IT+0x74>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <UART_Receive_IT+0x82>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	b2da      	uxtb	r2, r3
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	701a      	strb	r2, [r3, #0]
 8008342:	e008      	b.n	8008356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008350:	b2da      	uxtb	r2, r3
 8008352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29b      	uxth	r3, r3
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	4619      	mov	r1, r3
 800836e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008370:	2b00      	cmp	r3, #0
 8008372:	d15d      	bne.n	8008430 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0220 	bic.w	r2, r2, #32
 8008382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0201 	bic.w	r2, r2, #1
 80083a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d135      	bne.n	8008426 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	330c      	adds	r3, #12
 80083c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	613b      	str	r3, [r7, #16]
   return(result);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f023 0310 	bic.w	r3, r3, #16
 80083d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	330c      	adds	r3, #12
 80083de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e0:	623a      	str	r2, [r7, #32]
 80083e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	69f9      	ldr	r1, [r7, #28]
 80083e6:	6a3a      	ldr	r2, [r7, #32]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e5      	bne.n	80083c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0310 	and.w	r3, r3, #16
 80083fe:	2b10      	cmp	r3, #16
 8008400:	d10a      	bne.n	8008418 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff fe64 	bl	80080ec <HAL_UARTEx_RxEventCallback>
 8008424:	e002      	b.n	800842c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fe4c 	bl	80080c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	e002      	b.n	8008436 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	e000      	b.n	8008436 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3730      	adds	r7, #48	@ 0x30
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008444:	b0c0      	sub	sp, #256	@ 0x100
 8008446:	af00      	add	r7, sp, #0
 8008448:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800844c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845c:	68d9      	ldr	r1, [r3, #12]
 800845e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	ea40 0301 	orr.w	r3, r0, r1
 8008468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800846a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	431a      	orrs	r2, r3
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	431a      	orrs	r2, r3
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	4313      	orrs	r3, r2
 8008488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008498:	f021 010c 	bic.w	r1, r1, #12
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084a6:	430b      	orrs	r3, r1
 80084a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ba:	6999      	ldr	r1, [r3, #24]
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	ea40 0301 	orr.w	r3, r0, r1
 80084c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	4b8f      	ldr	r3, [pc, #572]	@ (800870c <UART_SetConfig+0x2cc>)
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d005      	beq.n	80084e0 <UART_SetConfig+0xa0>
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4b8d      	ldr	r3, [pc, #564]	@ (8008710 <UART_SetConfig+0x2d0>)
 80084dc:	429a      	cmp	r2, r3
 80084de:	d104      	bne.n	80084ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084e0:	f7fc fbf2 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 80084e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80084e8:	e003      	b.n	80084f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084ea:	f7fc fbd9 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80084ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084fc:	f040 810c 	bne.w	8008718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008504:	2200      	movs	r2, #0
 8008506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800850a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800850e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008512:	4622      	mov	r2, r4
 8008514:	462b      	mov	r3, r5
 8008516:	1891      	adds	r1, r2, r2
 8008518:	65b9      	str	r1, [r7, #88]	@ 0x58
 800851a:	415b      	adcs	r3, r3
 800851c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800851e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008522:	4621      	mov	r1, r4
 8008524:	eb12 0801 	adds.w	r8, r2, r1
 8008528:	4629      	mov	r1, r5
 800852a:	eb43 0901 	adc.w	r9, r3, r1
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800853a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800853e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008542:	4690      	mov	r8, r2
 8008544:	4699      	mov	r9, r3
 8008546:	4623      	mov	r3, r4
 8008548:	eb18 0303 	adds.w	r3, r8, r3
 800854c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008550:	462b      	mov	r3, r5
 8008552:	eb49 0303 	adc.w	r3, r9, r3
 8008556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800855a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008566:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800856a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800856e:	460b      	mov	r3, r1
 8008570:	18db      	adds	r3, r3, r3
 8008572:	653b      	str	r3, [r7, #80]	@ 0x50
 8008574:	4613      	mov	r3, r2
 8008576:	eb42 0303 	adc.w	r3, r2, r3
 800857a:	657b      	str	r3, [r7, #84]	@ 0x54
 800857c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008584:	f7f7 fe26 	bl	80001d4 <__aeabi_uldivmod>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4b61      	ldr	r3, [pc, #388]	@ (8008714 <UART_SetConfig+0x2d4>)
 800858e:	fba3 2302 	umull	r2, r3, r3, r2
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	011c      	lsls	r4, r3, #4
 8008596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800859a:	2200      	movs	r2, #0
 800859c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085a8:	4642      	mov	r2, r8
 80085aa:	464b      	mov	r3, r9
 80085ac:	1891      	adds	r1, r2, r2
 80085ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085b0:	415b      	adcs	r3, r3
 80085b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085b8:	4641      	mov	r1, r8
 80085ba:	eb12 0a01 	adds.w	sl, r2, r1
 80085be:	4649      	mov	r1, r9
 80085c0:	eb43 0b01 	adc.w	fp, r3, r1
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085d8:	4692      	mov	sl, r2
 80085da:	469b      	mov	fp, r3
 80085dc:	4643      	mov	r3, r8
 80085de:	eb1a 0303 	adds.w	r3, sl, r3
 80085e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085e6:	464b      	mov	r3, r9
 80085e8:	eb4b 0303 	adc.w	r3, fp, r3
 80085ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008604:	460b      	mov	r3, r1
 8008606:	18db      	adds	r3, r3, r3
 8008608:	643b      	str	r3, [r7, #64]	@ 0x40
 800860a:	4613      	mov	r3, r2
 800860c:	eb42 0303 	adc.w	r3, r2, r3
 8008610:	647b      	str	r3, [r7, #68]	@ 0x44
 8008612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800861a:	f7f7 fddb 	bl	80001d4 <__aeabi_uldivmod>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4611      	mov	r1, r2
 8008624:	4b3b      	ldr	r3, [pc, #236]	@ (8008714 <UART_SetConfig+0x2d4>)
 8008626:	fba3 2301 	umull	r2, r3, r3, r1
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	2264      	movs	r2, #100	@ 0x64
 800862e:	fb02 f303 	mul.w	r3, r2, r3
 8008632:	1acb      	subs	r3, r1, r3
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800863a:	4b36      	ldr	r3, [pc, #216]	@ (8008714 <UART_SetConfig+0x2d4>)
 800863c:	fba3 2302 	umull	r2, r3, r3, r2
 8008640:	095b      	lsrs	r3, r3, #5
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008648:	441c      	add	r4, r3
 800864a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800864e:	2200      	movs	r2, #0
 8008650:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008654:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800865c:	4642      	mov	r2, r8
 800865e:	464b      	mov	r3, r9
 8008660:	1891      	adds	r1, r2, r2
 8008662:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008664:	415b      	adcs	r3, r3
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800866c:	4641      	mov	r1, r8
 800866e:	1851      	adds	r1, r2, r1
 8008670:	6339      	str	r1, [r7, #48]	@ 0x30
 8008672:	4649      	mov	r1, r9
 8008674:	414b      	adcs	r3, r1
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008684:	4659      	mov	r1, fp
 8008686:	00cb      	lsls	r3, r1, #3
 8008688:	4651      	mov	r1, sl
 800868a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800868e:	4651      	mov	r1, sl
 8008690:	00ca      	lsls	r2, r1, #3
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	4603      	mov	r3, r0
 8008698:	4642      	mov	r2, r8
 800869a:	189b      	adds	r3, r3, r2
 800869c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086a0:	464b      	mov	r3, r9
 80086a2:	460a      	mov	r2, r1
 80086a4:	eb42 0303 	adc.w	r3, r2, r3
 80086a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086c0:	460b      	mov	r3, r1
 80086c2:	18db      	adds	r3, r3, r3
 80086c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086c6:	4613      	mov	r3, r2
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086d6:	f7f7 fd7d 	bl	80001d4 <__aeabi_uldivmod>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <UART_SetConfig+0x2d4>)
 80086e0:	fba3 1302 	umull	r1, r3, r3, r2
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	2164      	movs	r1, #100	@ 0x64
 80086e8:	fb01 f303 	mul.w	r3, r1, r3
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	3332      	adds	r3, #50	@ 0x32
 80086f2:	4a08      	ldr	r2, [pc, #32]	@ (8008714 <UART_SetConfig+0x2d4>)
 80086f4:	fba2 2303 	umull	r2, r3, r2, r3
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	f003 0207 	and.w	r2, r3, #7
 80086fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4422      	add	r2, r4
 8008706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008708:	e106      	b.n	8008918 <UART_SetConfig+0x4d8>
 800870a:	bf00      	nop
 800870c:	40011000 	.word	0x40011000
 8008710:	40011400 	.word	0x40011400
 8008714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800871c:	2200      	movs	r2, #0
 800871e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008722:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800872a:	4642      	mov	r2, r8
 800872c:	464b      	mov	r3, r9
 800872e:	1891      	adds	r1, r2, r2
 8008730:	6239      	str	r1, [r7, #32]
 8008732:	415b      	adcs	r3, r3
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24
 8008736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800873a:	4641      	mov	r1, r8
 800873c:	1854      	adds	r4, r2, r1
 800873e:	4649      	mov	r1, r9
 8008740:	eb43 0501 	adc.w	r5, r3, r1
 8008744:	f04f 0200 	mov.w	r2, #0
 8008748:	f04f 0300 	mov.w	r3, #0
 800874c:	00eb      	lsls	r3, r5, #3
 800874e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008752:	00e2      	lsls	r2, r4, #3
 8008754:	4614      	mov	r4, r2
 8008756:	461d      	mov	r5, r3
 8008758:	4643      	mov	r3, r8
 800875a:	18e3      	adds	r3, r4, r3
 800875c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008760:	464b      	mov	r3, r9
 8008762:	eb45 0303 	adc.w	r3, r5, r3
 8008766:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800876a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008776:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008786:	4629      	mov	r1, r5
 8008788:	008b      	lsls	r3, r1, #2
 800878a:	4621      	mov	r1, r4
 800878c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008790:	4621      	mov	r1, r4
 8008792:	008a      	lsls	r2, r1, #2
 8008794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008798:	f7f7 fd1c 	bl	80001d4 <__aeabi_uldivmod>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4b60      	ldr	r3, [pc, #384]	@ (8008924 <UART_SetConfig+0x4e4>)
 80087a2:	fba3 2302 	umull	r2, r3, r3, r2
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	011c      	lsls	r4, r3, #4
 80087aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087bc:	4642      	mov	r2, r8
 80087be:	464b      	mov	r3, r9
 80087c0:	1891      	adds	r1, r2, r2
 80087c2:	61b9      	str	r1, [r7, #24]
 80087c4:	415b      	adcs	r3, r3
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087cc:	4641      	mov	r1, r8
 80087ce:	1851      	adds	r1, r2, r1
 80087d0:	6139      	str	r1, [r7, #16]
 80087d2:	4649      	mov	r1, r9
 80087d4:	414b      	adcs	r3, r1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	f04f 0200 	mov.w	r2, #0
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087e4:	4659      	mov	r1, fp
 80087e6:	00cb      	lsls	r3, r1, #3
 80087e8:	4651      	mov	r1, sl
 80087ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087ee:	4651      	mov	r1, sl
 80087f0:	00ca      	lsls	r2, r1, #3
 80087f2:	4610      	mov	r0, r2
 80087f4:	4619      	mov	r1, r3
 80087f6:	4603      	mov	r3, r0
 80087f8:	4642      	mov	r2, r8
 80087fa:	189b      	adds	r3, r3, r2
 80087fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008800:	464b      	mov	r3, r9
 8008802:	460a      	mov	r2, r1
 8008804:	eb42 0303 	adc.w	r3, r2, r3
 8008808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008816:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008824:	4649      	mov	r1, r9
 8008826:	008b      	lsls	r3, r1, #2
 8008828:	4641      	mov	r1, r8
 800882a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800882e:	4641      	mov	r1, r8
 8008830:	008a      	lsls	r2, r1, #2
 8008832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008836:	f7f7 fccd 	bl	80001d4 <__aeabi_uldivmod>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4611      	mov	r1, r2
 8008840:	4b38      	ldr	r3, [pc, #224]	@ (8008924 <UART_SetConfig+0x4e4>)
 8008842:	fba3 2301 	umull	r2, r3, r3, r1
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	2264      	movs	r2, #100	@ 0x64
 800884a:	fb02 f303 	mul.w	r3, r2, r3
 800884e:	1acb      	subs	r3, r1, r3
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	3332      	adds	r3, #50	@ 0x32
 8008854:	4a33      	ldr	r2, [pc, #204]	@ (8008924 <UART_SetConfig+0x4e4>)
 8008856:	fba2 2303 	umull	r2, r3, r2, r3
 800885a:	095b      	lsrs	r3, r3, #5
 800885c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008860:	441c      	add	r4, r3
 8008862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008866:	2200      	movs	r2, #0
 8008868:	673b      	str	r3, [r7, #112]	@ 0x70
 800886a:	677a      	str	r2, [r7, #116]	@ 0x74
 800886c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008870:	4642      	mov	r2, r8
 8008872:	464b      	mov	r3, r9
 8008874:	1891      	adds	r1, r2, r2
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	415b      	adcs	r3, r3
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008880:	4641      	mov	r1, r8
 8008882:	1851      	adds	r1, r2, r1
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	4649      	mov	r1, r9
 8008888:	414b      	adcs	r3, r1
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008898:	4659      	mov	r1, fp
 800889a:	00cb      	lsls	r3, r1, #3
 800889c:	4651      	mov	r1, sl
 800889e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088a2:	4651      	mov	r1, sl
 80088a4:	00ca      	lsls	r2, r1, #3
 80088a6:	4610      	mov	r0, r2
 80088a8:	4619      	mov	r1, r3
 80088aa:	4603      	mov	r3, r0
 80088ac:	4642      	mov	r2, r8
 80088ae:	189b      	adds	r3, r3, r2
 80088b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088b2:	464b      	mov	r3, r9
 80088b4:	460a      	mov	r2, r1
 80088b6:	eb42 0303 	adc.w	r3, r2, r3
 80088ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80088c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088d4:	4649      	mov	r1, r9
 80088d6:	008b      	lsls	r3, r1, #2
 80088d8:	4641      	mov	r1, r8
 80088da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088de:	4641      	mov	r1, r8
 80088e0:	008a      	lsls	r2, r1, #2
 80088e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80088e6:	f7f7 fc75 	bl	80001d4 <__aeabi_uldivmod>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <UART_SetConfig+0x4e4>)
 80088f0:	fba3 1302 	umull	r1, r3, r3, r2
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	2164      	movs	r1, #100	@ 0x64
 80088f8:	fb01 f303 	mul.w	r3, r1, r3
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	3332      	adds	r3, #50	@ 0x32
 8008902:	4a08      	ldr	r2, [pc, #32]	@ (8008924 <UART_SetConfig+0x4e4>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	f003 020f 	and.w	r2, r3, #15
 800890e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4422      	add	r2, r4
 8008916:	609a      	str	r2, [r3, #8]
}
 8008918:	bf00      	nop
 800891a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800891e:	46bd      	mov	sp, r7
 8008920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008924:	51eb851f 	.word	0x51eb851f

08008928 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008928:	b084      	sub	sp, #16
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	f107 001c 	add.w	r0, r7, #28
 8008936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800893e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008940:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008942:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008946:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800894a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800894e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008952:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008962:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	b004      	add	sp, #16
 800897c:	4770      	bx	lr

0800897e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2203      	movs	r2, #3
 80089c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0303 	and.w	r3, r3, #3
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a10:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008a16:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008a1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008a2c:	f023 030f 	bic.w	r3, r3, #15
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	b2db      	uxtb	r3, r3
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3314      	adds	r3, #20
 8008a6e:	461a      	mov	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	4413      	add	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
}  
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008aac:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008ab2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008ab8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0

}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b088      	sub	sp, #32
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008aec:	2310      	movs	r3, #16
 8008aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008af0:	2340      	movs	r3, #64	@ 0x40
 8008af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008afc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008afe:	f107 0308 	add.w	r3, r7, #8
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ff74 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b0e:	2110      	movs	r1, #16
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa19 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b18:	69fb      	ldr	r3, [r7, #28]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b088      	sub	sp, #32
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b30:	2311      	movs	r3, #17
 8008b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b34:	2340      	movs	r3, #64	@ 0x40
 8008b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b42:	f107 0308 	add.w	r3, r7, #8
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff52 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b52:	2111      	movs	r1, #17
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f9f7 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b088      	sub	sp, #32
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b74:	2312      	movs	r3, #18
 8008b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b78:	2340      	movs	r3, #64	@ 0x40
 8008b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b86:	f107 0308 	add.w	r3, r7, #8
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff ff30 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b96:	2112      	movs	r1, #18
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f9d5 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3720      	adds	r7, #32
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b088      	sub	sp, #32
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008bb8:	2318      	movs	r3, #24
 8008bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bbc:	2340      	movs	r3, #64	@ 0x40
 8008bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bca:	f107 0308 	add.w	r3, r7, #8
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ff0e 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bda:	2118      	movs	r1, #24
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f9b3 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008be2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008be4:	69fb      	ldr	r3, [r7, #28]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b088      	sub	sp, #32
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008bfc:	2319      	movs	r3, #25
 8008bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c00:	2340      	movs	r3, #64	@ 0x40
 8008c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c0e:	f107 0308 	add.w	r3, r7, #8
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff feec 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1e:	2119      	movs	r1, #25
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f991 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c28:	69fb      	ldr	r3, [r7, #28]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3720      	adds	r7, #32
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c40:	230c      	movs	r3, #12
 8008c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c44:	2340      	movs	r3, #64	@ 0x40
 8008c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff feca 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008c5e:	4a05      	ldr	r2, [pc, #20]	@ (8008c74 <SDMMC_CmdStopTransfer+0x40>)
 8008c60:	210c      	movs	r1, #12
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f970 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	05f5e100 	.word	0x05f5e100

08008c78 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	@ 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c88:	2307      	movs	r3, #7
 8008c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c8c:	2340      	movs	r3, #64	@ 0x40
 8008c8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c98:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c9a:	f107 0310 	add.w	r3, r7, #16
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff fea6 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008caa:	2107      	movs	r1, #7
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 f94b 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008cb2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	@ 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fe85 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb65 	bl	80093b8 <SDMMC_GetCmdError>
 8008cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b088      	sub	sp, #32
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d02:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d08:	2308      	movs	r3, #8
 8008d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d0c:	2340      	movs	r3, #64	@ 0x40
 8008d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fe66 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 faf8 	bl	800931c <SDMMC_GetCmdResp7>
 8008d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d46:	2337      	movs	r3, #55	@ 0x37
 8008d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d4a:	2340      	movs	r3, #64	@ 0x40
 8008d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d58:	f107 0308 	add.w	r3, r7, #8
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fe47 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d68:	2137      	movs	r1, #55	@ 0x37
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f8ec 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d72:	69fb      	ldr	r3, [r7, #28]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d92:	2329      	movs	r3, #41	@ 0x29
 8008d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d96:	2340      	movs	r3, #64	@ 0x40
 8008d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008da2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008da4:	f107 0308 	add.w	r3, r7, #8
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fe21 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9ff 	bl	80091b4 <SDMMC_GetCmdResp3>
 8008db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db8:	69fb      	ldr	r3, [r7, #28]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b088      	sub	sp, #32
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008dd0:	2306      	movs	r3, #6
 8008dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dd4:	2340      	movs	r3, #64	@ 0x40
 8008dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff fe02 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008df2:	2106      	movs	r1, #6
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8a7 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b088      	sub	sp, #32
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e12:	2333      	movs	r3, #51	@ 0x33
 8008e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e16:	2340      	movs	r3, #64	@ 0x40
 8008e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fde1 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e34:	2133      	movs	r1, #51	@ 0x33
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f886 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3720      	adds	r7, #32
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e54:	2302      	movs	r3, #2
 8008e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e58:	23c0      	movs	r3, #192	@ 0xc0
 8008e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff fdc0 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f956 	bl	8009124 <SDMMC_GetCmdResp2>
 8008e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e92:	2309      	movs	r3, #9
 8008e94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e96:	23c0      	movs	r3, #192	@ 0xc0
 8008e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fda1 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f937 	bl	8009124 <SDMMC_GetCmdResp2>
 8008eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b088      	sub	sp, #32
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ed4:	2340      	movs	r3, #64	@ 0x40
 8008ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ee0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fd82 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	2103      	movs	r1, #3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f99c 	bl	8009230 <SDMMC_GetCmdResp6>
 8008ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008efa:	69fb      	ldr	r3, [r7, #28]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3720      	adds	r7, #32
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f12:	230d      	movs	r3, #13
 8008f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f16:	2340      	movs	r3, #64	@ 0x40
 8008f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f24:	f107 0308 	add.w	r3, r7, #8
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fd61 	bl	80089f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f34:	210d      	movs	r1, #13
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f806 	bl	8008f48 <SDMMC_GetCmdResp1>
 8008f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3720      	adds	r7, #32
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	460b      	mov	r3, r1
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008f56:	4b70      	ldr	r3, [pc, #448]	@ (8009118 <SDMMC_GetCmdResp1+0x1d0>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a70      	ldr	r2, [pc, #448]	@ (800911c <SDMMC_GetCmdResp1+0x1d4>)
 8008f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f60:	0a5a      	lsrs	r2, r3, #9
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	fb02 f303 	mul.w	r3, r2, r3
 8008f68:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	1e5a      	subs	r2, r3, #1
 8008f6e:	61fa      	str	r2, [r7, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008f78:	e0c9      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f7e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0ef      	beq.n	8008f6a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1ea      	bne.n	8008f6a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d004      	beq.n	8008faa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fa6:	2304      	movs	r3, #4
 8008fa8:	e0b1      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0a6      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	22c5      	movs	r2, #197	@ 0xc5
 8008fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff fd3d 	bl	8008a46 <SDIO_GetCommandResponse>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d001      	beq.n	8008fda <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e099      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7ff fd3f 	bl	8008a60 <SDIO_GetResponse>
 8008fe2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8009120 <SDMMC_GetCmdResp1+0x1d8>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e08d      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da02      	bge.n	8008ffe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ffc:	e087      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009008:	2340      	movs	r3, #64	@ 0x40
 800900a:	e080      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009016:	2380      	movs	r3, #128	@ 0x80
 8009018:	e079      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009024:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009028:	e071      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009038:	e069      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009048:	e061      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009054:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009058:	e059      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009068:	e051      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009074:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009078:	e049      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009084:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009088:	e041      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009098:	e039      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80090a8:	e031      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80090b8:	e029      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80090c8:	e021      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80090d8:	e019      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80090e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80090e8:	e011      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80090f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80090f8:	e009      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009104:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009108:	e001      	b.n	800910e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800910a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3720      	adds	r7, #32
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000000 	.word	0x20000000
 800911c:	10624dd3 	.word	0x10624dd3
 8009120:	fdffe008 	.word	0xfdffe008

08009124 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800912c:	4b1f      	ldr	r3, [pc, #124]	@ (80091ac <SDMMC_GetCmdResp2+0x88>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a1f      	ldr	r2, [pc, #124]	@ (80091b0 <SDMMC_GetCmdResp2+0x8c>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	0a5b      	lsrs	r3, r3, #9
 8009138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800913c:	fb02 f303 	mul.w	r3, r2, r3
 8009140:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	1e5a      	subs	r2, r3, #1
 8009146:	60fa      	str	r2, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800914c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009150:	e026      	b.n	80091a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009156:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0ef      	beq.n	8009142 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1ea      	bne.n	8009142 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2204      	movs	r2, #4
 800917c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800917e:	2304      	movs	r3, #4
 8009180:	e00e      	b.n	80091a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009194:	2301      	movs	r3, #1
 8009196:	e003      	b.n	80091a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	22c5      	movs	r2, #197	@ 0xc5
 800919c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	20000000 	.word	0x20000000
 80091b0:	10624dd3 	.word	0x10624dd3

080091b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009228 <SDMMC_GetCmdResp3+0x74>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1a      	ldr	r2, [pc, #104]	@ (800922c <SDMMC_GetCmdResp3+0x78>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	0a5b      	lsrs	r3, r3, #9
 80091c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091cc:	fb02 f303 	mul.w	r3, r2, r3
 80091d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	60fa      	str	r2, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091e0:	e01b      	b.n	800921a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0ef      	beq.n	80091d2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1ea      	bne.n	80091d2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2204      	movs	r2, #4
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800920e:	2304      	movs	r3, #4
 8009210:	e003      	b.n	800921a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	22c5      	movs	r2, #197	@ 0xc5
 8009216:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20000000 	.word	0x20000000
 800922c:	10624dd3 	.word	0x10624dd3

08009230 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	460b      	mov	r3, r1
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800923e:	4b35      	ldr	r3, [pc, #212]	@ (8009314 <SDMMC_GetCmdResp6+0xe4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a35      	ldr	r2, [pc, #212]	@ (8009318 <SDMMC_GetCmdResp6+0xe8>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	0a5b      	lsrs	r3, r3, #9
 800924a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800924e:	fb02 f303 	mul.w	r3, r2, r3
 8009252:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	61fa      	str	r2, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800925e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009262:	e052      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009268:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0ef      	beq.n	8009254 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1ea      	bne.n	8009254 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2204      	movs	r2, #4
 800928e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009290:	2304      	movs	r3, #4
 8009292:	e03a      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e02f      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fbcb 	bl	8008a46 <SDIO_GetCommandResponse>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d001      	beq.n	80092be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e025      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	22c5      	movs	r2, #197	@ 0xc5
 80092c2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7ff fbca 	bl	8008a60 <SDIO_GetResponse>
 80092cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e011      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092f4:	e009      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009304:	e001      	b.n	800930a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800930a:	4618      	mov	r0, r3
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000000 	.word	0x20000000
 8009318:	10624dd3 	.word	0x10624dd3

0800931c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009324:	4b22      	ldr	r3, [pc, #136]	@ (80093b0 <SDMMC_GetCmdResp7+0x94>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a22      	ldr	r2, [pc, #136]	@ (80093b4 <SDMMC_GetCmdResp7+0x98>)
 800932a:	fba2 2303 	umull	r2, r3, r2, r3
 800932e:	0a5b      	lsrs	r3, r3, #9
 8009330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009334:	fb02 f303 	mul.w	r3, r2, r3
 8009338:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	1e5a      	subs	r2, r3, #1
 800933e:	60fa      	str	r2, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d102      	bne.n	800934a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009344:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009348:	e02c      	b.n	80093a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800934e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0ef      	beq.n	800933a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1ea      	bne.n	800933a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2204      	movs	r2, #4
 8009374:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009376:	2304      	movs	r3, #4
 8009378:	e014      	b.n	80093a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800938c:	2301      	movs	r3, #1
 800938e:	e009      	b.n	80093a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2240      	movs	r2, #64	@ 0x40
 80093a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80093a2:	2300      	movs	r3, #0
  
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	20000000 	.word	0x20000000
 80093b4:	10624dd3 	.word	0x10624dd3

080093b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093c0:	4b11      	ldr	r3, [pc, #68]	@ (8009408 <SDMMC_GetCmdError+0x50>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a11      	ldr	r2, [pc, #68]	@ (800940c <SDMMC_GetCmdError+0x54>)
 80093c6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ca:	0a5b      	lsrs	r3, r3, #9
 80093cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d0:	fb02 f303 	mul.w	r3, r2, r3
 80093d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1e5a      	subs	r2, r3, #1
 80093da:	60fa      	str	r2, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093e4:	e009      	b.n	80093fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f1      	beq.n	80093d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	22c5      	movs	r2, #197	@ 0xc5
 80093f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20000000 	.word	0x20000000
 800940c:	10624dd3 	.word	0x10624dd3

08009410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009410:	b084      	sub	sp, #16
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	f107 001c 	add.w	r0, r7, #28
 800941e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009422:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009426:	2b01      	cmp	r3, #1
 8009428:	d123      	bne.n	8009472 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800943e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009456:	2b01      	cmp	r3, #1
 8009458:	d105      	bne.n	8009466 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fae2 	bl	800aa30 <USB_CoreReset>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]
 8009470:	e01b      	b.n	80094aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fad6 	bl	800aa30 <USB_CoreReset>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009488:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009494:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	@ 0x38
 800949c:	e005      	b.n	80094aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094aa:	7fbb      	ldrb	r3, [r7, #30]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d10b      	bne.n	80094c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f043 0206 	orr.w	r2, r3, #6
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f043 0220 	orr.w	r2, r3, #32
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094d4:	b004      	add	sp, #16
 80094d6:	4770      	bx	lr

080094d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d165      	bne.n	80095b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4a41      	ldr	r2, [pc, #260]	@ (80095f4 <USB_SetTurnaroundTime+0x11c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d906      	bls.n	8009502 <USB_SetTurnaroundTime+0x2a>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	4a40      	ldr	r2, [pc, #256]	@ (80095f8 <USB_SetTurnaroundTime+0x120>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d202      	bcs.n	8009502 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80094fc:	230f      	movs	r3, #15
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	e062      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4a3c      	ldr	r2, [pc, #240]	@ (80095f8 <USB_SetTurnaroundTime+0x120>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d306      	bcc.n	8009518 <USB_SetTurnaroundTime+0x40>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4a3b      	ldr	r2, [pc, #236]	@ (80095fc <USB_SetTurnaroundTime+0x124>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d202      	bcs.n	8009518 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009512:	230e      	movs	r3, #14
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e057      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4a38      	ldr	r2, [pc, #224]	@ (80095fc <USB_SetTurnaroundTime+0x124>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d306      	bcc.n	800952e <USB_SetTurnaroundTime+0x56>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	4a37      	ldr	r2, [pc, #220]	@ (8009600 <USB_SetTurnaroundTime+0x128>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d202      	bcs.n	800952e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009528:	230d      	movs	r3, #13
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	e04c      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4a33      	ldr	r2, [pc, #204]	@ (8009600 <USB_SetTurnaroundTime+0x128>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d306      	bcc.n	8009544 <USB_SetTurnaroundTime+0x6c>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	4a32      	ldr	r2, [pc, #200]	@ (8009604 <USB_SetTurnaroundTime+0x12c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d802      	bhi.n	8009544 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800953e:	230c      	movs	r3, #12
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	e041      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	4a2f      	ldr	r2, [pc, #188]	@ (8009604 <USB_SetTurnaroundTime+0x12c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d906      	bls.n	800955a <USB_SetTurnaroundTime+0x82>
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4a2e      	ldr	r2, [pc, #184]	@ (8009608 <USB_SetTurnaroundTime+0x130>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d802      	bhi.n	800955a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009554:	230b      	movs	r3, #11
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	e036      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4a2a      	ldr	r2, [pc, #168]	@ (8009608 <USB_SetTurnaroundTime+0x130>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d906      	bls.n	8009570 <USB_SetTurnaroundTime+0x98>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	4a29      	ldr	r2, [pc, #164]	@ (800960c <USB_SetTurnaroundTime+0x134>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d802      	bhi.n	8009570 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800956a:	230a      	movs	r3, #10
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	e02b      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4a26      	ldr	r2, [pc, #152]	@ (800960c <USB_SetTurnaroundTime+0x134>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d906      	bls.n	8009586 <USB_SetTurnaroundTime+0xae>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4a25      	ldr	r2, [pc, #148]	@ (8009610 <USB_SetTurnaroundTime+0x138>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d202      	bcs.n	8009586 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009580:	2309      	movs	r3, #9
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e020      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4a21      	ldr	r2, [pc, #132]	@ (8009610 <USB_SetTurnaroundTime+0x138>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d306      	bcc.n	800959c <USB_SetTurnaroundTime+0xc4>
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	4a20      	ldr	r2, [pc, #128]	@ (8009614 <USB_SetTurnaroundTime+0x13c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d802      	bhi.n	800959c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009596:	2308      	movs	r3, #8
 8009598:	617b      	str	r3, [r7, #20]
 800959a:	e015      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4a1d      	ldr	r2, [pc, #116]	@ (8009614 <USB_SetTurnaroundTime+0x13c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d906      	bls.n	80095b2 <USB_SetTurnaroundTime+0xda>
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009618 <USB_SetTurnaroundTime+0x140>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d202      	bcs.n	80095b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80095ac:	2307      	movs	r3, #7
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	e00a      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80095b2:	2306      	movs	r3, #6
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e007      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80095be:	2309      	movs	r3, #9
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e001      	b.n	80095c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80095c4:	2309      	movs	r3, #9
 80095c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	029b      	lsls	r3, r3, #10
 80095dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80095e0:	431a      	orrs	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	00d8acbf 	.word	0x00d8acbf
 80095f8:	00e4e1c0 	.word	0x00e4e1c0
 80095fc:	00f42400 	.word	0x00f42400
 8009600:	01067380 	.word	0x01067380
 8009604:	011a499f 	.word	0x011a499f
 8009608:	01312cff 	.word	0x01312cff
 800960c:	014ca43f 	.word	0x014ca43f
 8009610:	016e3600 	.word	0x016e3600
 8009614:	01a6ab1f 	.word	0x01a6ab1f
 8009618:	01e84800 	.word	0x01e84800

0800961c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f043 0201 	orr.w	r2, r3, #1
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f023 0201 	bic.w	r2, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d115      	bne.n	80096ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800968e:	200a      	movs	r0, #10
 8009690:	f7f8 f934 	bl	80018fc <HAL_Delay>
      ms += 10U;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	330a      	adds	r3, #10
 8009698:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f939 	bl	800a912 <USB_GetMode>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d01e      	beq.n	80096e4 <USB_SetCurrentMode+0x84>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80096aa:	d9f0      	bls.n	800968e <USB_SetCurrentMode+0x2e>
 80096ac:	e01a      	b.n	80096e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d115      	bne.n	80096e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096c0:	200a      	movs	r0, #10
 80096c2:	f7f8 f91b 	bl	80018fc <HAL_Delay>
      ms += 10U;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	330a      	adds	r3, #10
 80096ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f920 	bl	800a912 <USB_GetMode>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <USB_SetCurrentMode+0x84>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2bc7      	cmp	r3, #199	@ 0xc7
 80096dc:	d9f0      	bls.n	80096c0 <USB_SetCurrentMode+0x60>
 80096de:	e001      	b.n	80096e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e005      	b.n	80096f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80096e8:	d101      	bne.n	80096ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096f8:	b084      	sub	sp, #16
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b086      	sub	sp, #24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009712:	2300      	movs	r3, #0
 8009714:	613b      	str	r3, [r7, #16]
 8009716:	e009      	b.n	800972c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	3340      	adds	r3, #64	@ 0x40
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	2200      	movs	r2, #0
 8009724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	3301      	adds	r3, #1
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b0e      	cmp	r3, #14
 8009730:	d9f2      	bls.n	8009718 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009732:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11c      	bne.n	8009774 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009748:	f043 0302 	orr.w	r3, r3, #2
 800974c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009752:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	639a      	str	r2, [r3, #56]	@ 0x38
 8009772:	e00b      	b.n	800978c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009778:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009784:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009792:	461a      	mov	r2, r3
 8009794:	2300      	movs	r3, #0
 8009796:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009798:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800979c:	2b01      	cmp	r3, #1
 800979e:	d10d      	bne.n	80097bc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097a8:	2100      	movs	r1, #0
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f968 	bl	8009a80 <USB_SetDevSpeed>
 80097b0:	e008      	b.n	80097c4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097b2:	2101      	movs	r1, #1
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f963 	bl	8009a80 <USB_SetDevSpeed>
 80097ba:	e003      	b.n	80097c4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097bc:	2103      	movs	r1, #3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f95e 	bl	8009a80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097c4:	2110      	movs	r1, #16
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f8fa 	bl	80099c0 <USB_FlushTxFifo>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f924 	bl	8009a24 <USB_FlushRxFifo>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ec:	461a      	mov	r2, r3
 80097ee:	2300      	movs	r3, #0
 80097f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f8:	461a      	mov	r2, r3
 80097fa:	2300      	movs	r3, #0
 80097fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009804:	461a      	mov	r2, r3
 8009806:	2300      	movs	r3, #0
 8009808:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	e043      	b.n	8009898 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009826:	d118      	bne.n	800985a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10a      	bne.n	8009844 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800983a:	461a      	mov	r2, r3
 800983c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	e013      	b.n	800986c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009850:	461a      	mov	r2, r3
 8009852:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	e008      	b.n	800986c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009866:	461a      	mov	r2, r3
 8009868:	2300      	movs	r3, #0
 800986a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009878:	461a      	mov	r2, r3
 800987a:	2300      	movs	r3, #0
 800987c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988a:	461a      	mov	r2, r3
 800988c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009890:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3301      	adds	r3, #1
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800989c:	461a      	mov	r2, r3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d3b5      	bcc.n	8009810 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
 80098a8:	e043      	b.n	8009932 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098c0:	d118      	bne.n	80098f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d4:	461a      	mov	r2, r3
 80098d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	e013      	b.n	8009906 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ea:	461a      	mov	r2, r3
 80098ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	e008      	b.n	8009906 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009900:	461a      	mov	r2, r3
 8009902:	2300      	movs	r3, #0
 8009904:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009912:	461a      	mov	r2, r3
 8009914:	2300      	movs	r3, #0
 8009916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009924:	461a      	mov	r2, r3
 8009926:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800992a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3301      	adds	r3, #1
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009936:	461a      	mov	r2, r3
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	4293      	cmp	r3, r2
 800993c:	d3b5      	bcc.n	80098aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800994c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009950:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800995e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009960:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f043 0210 	orr.w	r2, r3, #16
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699a      	ldr	r2, [r3, #24]
 8009978:	4b10      	ldr	r3, [pc, #64]	@ (80099bc <USB_DevInit+0x2c4>)
 800997a:	4313      	orrs	r3, r2
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009980:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	f043 0208 	orr.w	r2, r3, #8
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009994:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009998:	2b01      	cmp	r3, #1
 800999a:	d107      	bne.n	80099ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099a4:	f043 0304 	orr.w	r3, r3, #4
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099b8:	b004      	add	sp, #16
 80099ba:	4770      	bx	lr
 80099bc:	803c3800 	.word	0x803c3800

080099c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099da:	d901      	bls.n	80099e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e01b      	b.n	8009a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	daf2      	bge.n	80099ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	019b      	lsls	r3, r3, #6
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a04:	d901      	bls.n	8009a0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e006      	b.n	8009a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d0f0      	beq.n	80099f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3301      	adds	r3, #1
 8009a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a3c:	d901      	bls.n	8009a42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e018      	b.n	8009a74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	daf2      	bge.n	8009a30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2210      	movs	r2, #16
 8009a52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a60:	d901      	bls.n	8009a66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e006      	b.n	8009a74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	2b10      	cmp	r3, #16
 8009a70:	d0f0      	beq.n	8009a54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b087      	sub	sp, #28
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 0306 	and.w	r3, r3, #6
 8009aca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d102      	bne.n	8009ad8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75fb      	strb	r3, [r7, #23]
 8009ad6:	e00a      	b.n	8009aee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d002      	beq.n	8009ae4 <USB_GetDevSpeed+0x32>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b06      	cmp	r3, #6
 8009ae2:	d102      	bne.n	8009aea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	75fb      	strb	r3, [r7, #23]
 8009ae8:	e001      	b.n	8009aee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009aea:	230f      	movs	r3, #15
 8009aec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	371c      	adds	r7, #28
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d13a      	bne.n	8009b8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	2101      	movs	r1, #1
 8009b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	68f9      	ldr	r1, [r7, #12]
 8009b32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b36:	4313      	orrs	r3, r2
 8009b38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d155      	bne.n	8009bfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	791b      	ldrb	r3, [r3, #4]
 8009b6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	059b      	lsls	r3, r3, #22
 8009b72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b74:	4313      	orrs	r3, r2
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	e036      	b.n	8009bfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b94:	69da      	ldr	r2, [r3, #28]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bac:	4313      	orrs	r3, r2
 8009bae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d11a      	bne.n	8009bfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	791b      	ldrb	r3, [r3, #4]
 8009be0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009be2:	430b      	orrs	r3, r1
 8009be4:	4313      	orrs	r3, r2
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
	...

08009c0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d161      	bne.n	8009cec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c3e:	d11f      	bne.n	8009c80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	0151      	lsls	r1, r2, #5
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	440a      	add	r2, r1
 8009c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	2101      	movs	r1, #1
 8009c92:	fa01 f303 	lsl.w	r3, r1, r3
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	43db      	mvns	r3, r3
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009caa:	69da      	ldr	r2, [r3, #28]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	0159      	lsls	r1, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	440b      	add	r3, r1
 8009cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4b35      	ldr	r3, [pc, #212]	@ (8009dbc <USB_DeactivateEndpoint+0x1b0>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	600b      	str	r3, [r1, #0]
 8009cea:	e060      	b.n	8009dae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d02:	d11f      	bne.n	8009d44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	0151      	lsls	r1, r2, #5
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	440a      	add	r2, r1
 8009d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	0151      	lsls	r1, r2, #5
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	440a      	add	r2, r1
 8009d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	2101      	movs	r1, #1
 8009d56:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5a:	041b      	lsls	r3, r3, #16
 8009d5c:	43db      	mvns	r3, r3
 8009d5e:	68f9      	ldr	r1, [r7, #12]
 8009d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d64:	4013      	ands	r3, r2
 8009d66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d6e:	69da      	ldr	r2, [r3, #28]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	2101      	movs	r1, #1
 8009d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7e:	041b      	lsls	r3, r3, #16
 8009d80:	43db      	mvns	r3, r3
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d88:	4013      	ands	r3, r2
 8009d8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	0159      	lsls	r1, r3, #5
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	440b      	add	r3, r1
 8009da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da6:	4619      	mov	r1, r3
 8009da8:	4b05      	ldr	r3, [pc, #20]	@ (8009dc0 <USB_DeactivateEndpoint+0x1b4>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	ec337800 	.word	0xec337800
 8009dc0:	eff37800 	.word	0xeff37800

08009dc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08a      	sub	sp, #40	@ 0x28
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	f040 817a 	bne.w	800a0da <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d132      	bne.n	8009e54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	0151      	lsls	r1, r2, #5
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	440a      	add	r2, r1
 8009e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e08:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e0c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	0151      	lsls	r1, r2, #5
 8009e24:	69fa      	ldr	r2, [r7, #28]
 8009e26:	440a      	add	r2, r1
 8009e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	0151      	lsls	r1, r2, #5
 8009e44:	69fa      	ldr	r2, [r7, #28]
 8009e46:	440a      	add	r2, r1
 8009e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e4c:	0cdb      	lsrs	r3, r3, #19
 8009e4e:	04db      	lsls	r3, r3, #19
 8009e50:	6113      	str	r3, [r2, #16]
 8009e52:	e092      	b.n	8009f7a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	69ba      	ldr	r2, [r7, #24]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e6e:	0cdb      	lsrs	r3, r3, #19
 8009e70:	04db      	lsls	r3, r3, #19
 8009e72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e96:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d11a      	bne.n	8009ed4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d903      	bls.n	8009eb2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	69fa      	ldr	r2, [r7, #28]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ecc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ed0:	6113      	str	r3, [r2, #16]
 8009ed2:	e01b      	b.n	8009f0c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6919      	ldr	r1, [r3, #16]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	440b      	add	r3, r1
 8009eec:	1e59      	subs	r1, r3, #1
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ef6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ef8:	4ba2      	ldr	r3, [pc, #648]	@ (800a184 <USB_EPStartXfer+0x3c0>)
 8009efa:	400b      	ands	r3, r1
 8009efc:	69b9      	ldr	r1, [r7, #24]
 8009efe:	0148      	lsls	r0, r1, #5
 8009f00:	69f9      	ldr	r1, [r7, #28]
 8009f02:	4401      	add	r1, r0
 8009f04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f18:	691a      	ldr	r2, [r3, #16]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f22:	69b9      	ldr	r1, [r7, #24]
 8009f24:	0148      	lsls	r0, r1, #5
 8009f26:	69f9      	ldr	r1, [r7, #28]
 8009f28:	4401      	add	r1, r0
 8009f2a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	791b      	ldrb	r3, [r3, #4]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d11f      	bne.n	8009f7a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f54:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009f58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	0151      	lsls	r1, r2, #5
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	440a      	add	r2, r1
 8009f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f7a:	79fb      	ldrb	r3, [r7, #7]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d14b      	bne.n	800a018 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d009      	beq.n	8009f9c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f94:	461a      	mov	r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	791b      	ldrb	r3, [r3, #4]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d128      	bne.n	8009ff6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d110      	bne.n	8009fd6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	0151      	lsls	r1, r2, #5
 8009fc6:	69fa      	ldr	r2, [r7, #28]
 8009fc8:	440a      	add	r2, r1
 8009fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	e00f      	b.n	8009ff6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69ba      	ldr	r2, [r7, #24]
 8009fe6:	0151      	lsls	r1, r2, #5
 8009fe8:	69fa      	ldr	r2, [r7, #28]
 8009fea:	440a      	add	r2, r1
 8009fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ff4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a010:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	e165      	b.n	800a2e4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a032:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a036:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	791b      	ldrb	r3, [r3, #4]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d015      	beq.n	800a06c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 814d 	beq.w	800a2e4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	f003 030f 	and.w	r3, r3, #15
 800a05a:	2101      	movs	r1, #1
 800a05c:	fa01 f303 	lsl.w	r3, r1, r3
 800a060:	69f9      	ldr	r1, [r7, #28]
 800a062:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a066:	4313      	orrs	r3, r2
 800a068:	634b      	str	r3, [r1, #52]	@ 0x34
 800a06a:	e13b      	b.n	800a2e4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d110      	bne.n	800a09e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a096:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	e00f      	b.n	800a0be <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	69fa      	ldr	r2, [r7, #28]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	68d9      	ldr	r1, [r3, #12]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	781a      	ldrb	r2, [r3, #0]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	b298      	uxth	r0, r3
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f000 f9b8 	bl	800a448 <USB_WritePacket>
 800a0d8:	e104      	b.n	800a2e4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	0151      	lsls	r1, r2, #5
 800a0ec:	69fa      	ldr	r2, [r7, #28]
 800a0ee:	440a      	add	r2, r1
 800a0f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0f4:	0cdb      	lsrs	r3, r3, #19
 800a0f6:	04db      	lsls	r3, r3, #19
 800a0f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4413      	add	r3, r2
 800a102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	0151      	lsls	r1, r2, #5
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	440a      	add	r2, r1
 800a110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a114:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a118:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a11c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d131      	bne.n	800a188 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a152:	69b9      	ldr	r1, [r7, #24]
 800a154:	0148      	lsls	r0, r1, #5
 800a156:	69f9      	ldr	r1, [r7, #28]
 800a158:	4401      	add	r1, r0
 800a15a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a15e:	4313      	orrs	r3, r2
 800a160:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a17c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a180:	6113      	str	r3, [r2, #16]
 800a182:	e061      	b.n	800a248 <USB_EPStartXfer+0x484>
 800a184:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d123      	bne.n	800a1d8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a19c:	691a      	ldr	r2, [r3, #16]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1a6:	69b9      	ldr	r1, [r7, #24]
 800a1a8:	0148      	lsls	r0, r1, #5
 800a1aa:	69f9      	ldr	r1, [r7, #28]
 800a1ac:	4401      	add	r1, r0
 800a1ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	0151      	lsls	r1, r2, #5
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1d4:	6113      	str	r3, [r2, #16]
 800a1d6:	e037      	b.n	800a248 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	691a      	ldr	r2, [r3, #16]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	1e5a      	subs	r2, r3, #1
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	8afa      	ldrh	r2, [r7, #22]
 800a1f4:	fb03 f202 	mul.w	r2, r3, r2
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	8afb      	ldrh	r3, [r7, #22]
 800a20c:	04d9      	lsls	r1, r3, #19
 800a20e:	4b38      	ldr	r3, [pc, #224]	@ (800a2f0 <USB_EPStartXfer+0x52c>)
 800a210:	400b      	ands	r3, r1
 800a212:	69b9      	ldr	r1, [r7, #24]
 800a214:	0148      	lsls	r0, r1, #5
 800a216:	69f9      	ldr	r1, [r7, #28]
 800a218:	4401      	add	r1, r0
 800a21a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a238:	69b9      	ldr	r1, [r7, #24]
 800a23a:	0148      	lsls	r0, r1, #5
 800a23c:	69f9      	ldr	r1, [r7, #28]
 800a23e:	4401      	add	r1, r0
 800a240:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a244:	4313      	orrs	r3, r2
 800a246:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d10d      	bne.n	800a26a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d009      	beq.n	800a26a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	68d9      	ldr	r1, [r3, #12]
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a266:	460a      	mov	r2, r1
 800a268:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	791b      	ldrb	r3, [r3, #4]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d128      	bne.n	800a2c4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d110      	bne.n	800a2a4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	69fa      	ldr	r2, [r7, #28]
 800a296:	440a      	add	r2, r1
 800a298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a29c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	e00f      	b.n	800a2c4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	0151      	lsls	r1, r2, #5
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	440a      	add	r2, r1
 800a2da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3720      	adds	r7, #32
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	1ff80000 	.word	0x1ff80000

0800a2f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d14a      	bne.n	800a3a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a32a:	f040 8086 	bne.w	800a43a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a34c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a350:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a370:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a382:	4293      	cmp	r3, r2
 800a384:	d902      	bls.n	800a38c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	75fb      	strb	r3, [r7, #23]
          break;
 800a38a:	e056      	b.n	800a43a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3a4:	d0e7      	beq.n	800a376 <USB_EPStopXfer+0x82>
 800a3a6:	e048      	b.n	800a43a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3c0:	d13b      	bne.n	800a43a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a404:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a408:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a416:	4293      	cmp	r3, r2
 800a418:	d902      	bls.n	800a420 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	75fb      	strb	r3, [r7, #23]
          break;
 800a41e:	e00c      	b.n	800a43a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a438:	d0e7      	beq.n	800a40a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	371c      	adds	r7, #28
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a448:	b480      	push	{r7}
 800a44a:	b089      	sub	sp, #36	@ 0x24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	460b      	mov	r3, r1
 800a458:	71fb      	strb	r3, [r7, #7]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d123      	bne.n	800a4b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a46e:	88bb      	ldrh	r3, [r7, #4]
 800a470:	3303      	adds	r3, #3
 800a472:	089b      	lsrs	r3, r3, #2
 800a474:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a476:	2300      	movs	r3, #0
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	e018      	b.n	800a4ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	031a      	lsls	r2, r3, #12
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	4413      	add	r3, r2
 800a484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a488:	461a      	mov	r2, r3
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	3301      	adds	r3, #1
 800a494:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	3301      	adds	r3, #1
 800a49a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d3e2      	bcc.n	800a47c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3724      	adds	r7, #36	@ 0x24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b08b      	sub	sp, #44	@ 0x2c
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4da:	88fb      	ldrh	r3, [r7, #6]
 800a4dc:	089b      	lsrs	r3, r3, #2
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4e2:	88fb      	ldrh	r3, [r7, #6]
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e014      	b.n	800a51a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	3301      	adds	r3, #1
 800a500:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	3301      	adds	r3, #1
 800a506:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	3301      	adds	r3, #1
 800a50c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	3301      	adds	r3, #1
 800a512:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	3301      	adds	r3, #1
 800a518:	623b      	str	r3, [r7, #32]
 800a51a:	6a3a      	ldr	r2, [r7, #32]
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d3e6      	bcc.n	800a4f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a522:	8bfb      	ldrh	r3, [r7, #30]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01e      	beq.n	800a566 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a532:	461a      	mov	r2, r3
 800a534:	f107 0310 	add.w	r3, r7, #16
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	fa22 f303 	lsr.w	r3, r2, r3
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	701a      	strb	r2, [r3, #0]
      i++;
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	3301      	adds	r3, #1
 800a552:	623b      	str	r3, [r7, #32]
      pDest++;
 800a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a556:	3301      	adds	r3, #1
 800a558:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a55a:	8bfb      	ldrh	r3, [r7, #30]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a560:	8bfb      	ldrh	r3, [r7, #30]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1ea      	bne.n	800a53c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a568:	4618      	mov	r0, r3
 800a56a:	372c      	adds	r7, #44	@ 0x2c
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d12c      	bne.n	800a5ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	db12      	blt.n	800a5c8 <USB_EPSetStall+0x54>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	0151      	lsls	r1, r2, #5
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	440a      	add	r2, r1
 800a5de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	e02b      	b.n	800a642 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db12      	blt.n	800a622 <USB_EPSetStall+0xae>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00f      	beq.n	800a622 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a61c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a620:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a63c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a640:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	785b      	ldrb	r3, [r3, #1]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d128      	bne.n	800a6be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a686:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a68a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	791b      	ldrb	r3, [r3, #4]
 800a690:	2b03      	cmp	r3, #3
 800a692:	d003      	beq.n	800a69c <USB_EPClearStall+0x4c>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	791b      	ldrb	r3, [r3, #4]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d138      	bne.n	800a70e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	0151      	lsls	r1, r2, #5
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e027      	b.n	800a70e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	791b      	ldrb	r3, [r3, #4]
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d003      	beq.n	800a6ee <USB_EPClearStall+0x9e>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d10f      	bne.n	800a70e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	0151      	lsls	r1, r2, #5
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	440a      	add	r2, r1
 800a704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a70c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a73a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a73e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a750:	68f9      	ldr	r1, [r7, #12]
 800a752:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a756:	4313      	orrs	r3, r2
 800a758:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a796:	f023 0302 	bic.w	r3, r3, #2
 800a79a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7d8:	f043 0302 	orr.w	r3, r3, #2
 800a7dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4013      	ands	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a804:	68fb      	ldr	r3, [r7, #12]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	4013      	ands	r3, r2
 800a834:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	0c1b      	lsrs	r3, r3, #16
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	4013      	ands	r3, r2
 800a868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	b29b      	uxth	r3, r3
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b087      	sub	sp, #28
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	f003 030f 	and.w	r3, r3, #15
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e6:	01db      	lsls	r3, r3, #7
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	4013      	ands	r3, r2
 800a902:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a904:	68bb      	ldr	r3, [r7, #8]
}
 800a906:	4618      	mov	r0, r3
 800a908:	371c      	adds	r7, #28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	f003 0301 	and.w	r3, r3, #1
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a948:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	460b      	mov	r3, r1
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	333c      	adds	r3, #60	@ 0x3c
 800a98a:	3304      	adds	r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	4a26      	ldr	r2, [pc, #152]	@ (800aa2c <USB_EP0_OutStart+0xb8>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d90a      	bls.n	800a9ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9a8:	d101      	bne.n	800a9ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e037      	b.n	800aa1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9dc:	f043 0318 	orr.w	r3, r3, #24
 800a9e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a9f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9f6:	7afb      	ldrb	r3, [r7, #11]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d10f      	bne.n	800aa1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa02:	461a      	mov	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aa1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	4f54300a 	.word	0x4f54300a

0800aa30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa48:	d901      	bls.n	800aa4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e01b      	b.n	800aa86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	daf2      	bge.n	800aa3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f043 0201 	orr.w	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa72:	d901      	bls.n	800aa78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e006      	b.n	800aa86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d0f0      	beq.n	800aa66 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aa98:	4904      	ldr	r1, [pc, #16]	@ (800aaac <MX_FATFS_Init+0x18>)
 800aa9a:	4805      	ldr	r0, [pc, #20]	@ (800aab0 <MX_FATFS_Init+0x1c>)
 800aa9c:	f002 fa26 	bl	800ceec <FATFS_LinkDriver>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	4b03      	ldr	r3, [pc, #12]	@ (800aab4 <MX_FATFS_Init+0x20>)
 800aaa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aaa8:	bf00      	nop
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20000528 	.word	0x20000528
 800aab0:	0800d9b8 	.word	0x0800d9b8
 800aab4:	20000524 	.word	0x20000524

0800aab8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aac2:	f000 f896 	bl	800abf2 <BSP_SD_IsDetected>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d001      	beq.n	800aad0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e012      	b.n	800aaf6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800aad0:	480b      	ldr	r0, [pc, #44]	@ (800ab00 <BSP_SD_Init+0x48>)
 800aad2:	f7fa fcb6 	bl	8005442 <HAL_SD_Init>
 800aad6:	4603      	mov	r3, r0
 800aad8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d109      	bne.n	800aaf4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800aae0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800aae4:	4806      	ldr	r0, [pc, #24]	@ (800ab00 <BSP_SD_Init+0x48>)
 800aae6:	f7fb fa85 	bl	8005ff4 <HAL_SD_ConfigWideBusOperation>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	200001d4 	.word	0x200001d4

0800ab04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	68f9      	ldr	r1, [r7, #12]
 800ab1a:	4806      	ldr	r0, [pc, #24]	@ (800ab34 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ab1c:	f7fa fd42 	bl	80055a4 <HAL_SD_ReadBlocks_DMA>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	200001d4 	.word	0x200001d4

0800ab38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	68f9      	ldr	r1, [r7, #12]
 800ab4e:	4806      	ldr	r0, [pc, #24]	@ (800ab68 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ab50:	f7fa fe0a 	bl	8005768 <HAL_SD_WriteBlocks_DMA>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	200001d4 	.word	0x200001d4

0800ab6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab70:	4805      	ldr	r0, [pc, #20]	@ (800ab88 <BSP_SD_GetCardState+0x1c>)
 800ab72:	f7fb fad9 	bl	8006128 <HAL_SD_GetCardState>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	bf14      	ite	ne
 800ab7c:	2301      	movne	r3, #1
 800ab7e:	2300      	moveq	r3, #0
 800ab80:	b2db      	uxtb	r3, r3
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	200001d4 	.word	0x200001d4

0800ab8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	4803      	ldr	r0, [pc, #12]	@ (800aba4 <BSP_SD_GetCardInfo+0x18>)
 800ab98:	f7fb fa00 	bl	8005f9c <HAL_SD_GetCardInfo>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	200001d4 	.word	0x200001d4

0800aba8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800abb0:	f000 f818 	bl	800abe4 <BSP_SD_AbortCallback>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800abc4:	f000 f9a8 	bl	800af18 <BSP_SD_WriteCpltCallback>
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800abd8:	f000 f9aa 	bl	800af30 <BSP_SD_ReadCpltCallback>
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0

}
 800abe8:	bf00      	nop
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800abf8:	2301      	movs	r3, #1
 800abfa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800abfc:	f000 f80c 	bl	800ac18 <BSP_PlatformIsDetected>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ac06:	2300      	movs	r3, #0
 800ac08:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ac0a:	79fb      	ldrb	r3, [r7, #7]
 800ac0c:	b2db      	uxtb	r3, r3
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ac22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ac26:	4806      	ldr	r0, [pc, #24]	@ (800ac40 <BSP_PlatformIsDetected+0x28>)
 800ac28:	f7f7 ff92 	bl	8002b50 <HAL_GPIO_ReadPin>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ac32:	2300      	movs	r3, #0
 800ac34:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ac36:	79fb      	ldrb	r3, [r7, #7]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	40020000 	.word	0x40020000

0800ac44 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ac4c:	f7f6 fe4a 	bl	80018e4 <HAL_GetTick>
 800ac50:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ac52:	e006      	b.n	800ac62 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac54:	f7ff ff8a 	bl	800ab6c <BSP_SD_GetCardState>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e009      	b.n	800ac76 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ac62:	f7f6 fe3f 	bl	80018e4 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d8f0      	bhi.n	800ac54 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ac72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ac8a:	4b0b      	ldr	r3, [pc, #44]	@ (800acb8 <SD_CheckStatus+0x38>)
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ac90:	f7ff ff6c 	bl	800ab6c <BSP_SD_GetCardState>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d107      	bne.n	800acaa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ac9a:	4b07      	ldr	r3, [pc, #28]	@ (800acb8 <SD_CheckStatus+0x38>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f023 0301 	bic.w	r3, r3, #1
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	4b04      	ldr	r3, [pc, #16]	@ (800acb8 <SD_CheckStatus+0x38>)
 800aca8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800acaa:	4b03      	ldr	r3, [pc, #12]	@ (800acb8 <SD_CheckStatus+0x38>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	b2db      	uxtb	r3, r3
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20000009 	.word	0x20000009

0800acbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800acc6:	f7ff fef7 	bl	800aab8 <BSP_SD_Init>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d107      	bne.n	800ace0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff ffd4 	bl	800ac80 <SD_CheckStatus>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <SD_initialize+0x34>)
 800acde:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ace0:	4b03      	ldr	r3, [pc, #12]	@ (800acf0 <SD_initialize+0x34>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b2db      	uxtb	r3, r3
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20000009 	.word	0x20000009

0800acf4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff ffbd 	bl	800ac80 <SD_CheckStatus>
 800ad06:	4603      	mov	r3, r0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60b9      	str	r1, [r7, #8]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ad24:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ad28:	f7ff ff8c 	bl	800ac44 <SD_CheckStatusWithTimeout>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da01      	bge.n	800ad36 <SD_read+0x26>
  {
    return res;
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	e03b      	b.n	800adae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	68b8      	ldr	r0, [r7, #8]
 800ad3c:	f7ff fee2 	bl	800ab04 <BSP_SD_ReadBlocks_DMA>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d132      	bne.n	800adac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ad46:	4b1c      	ldr	r3, [pc, #112]	@ (800adb8 <SD_read+0xa8>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ad4c:	f7f6 fdca 	bl	80018e4 <HAL_GetTick>
 800ad50:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ad52:	bf00      	nop
 800ad54:	4b18      	ldr	r3, [pc, #96]	@ (800adb8 <SD_read+0xa8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d108      	bne.n	800ad6e <SD_read+0x5e>
 800ad5c:	f7f6 fdc2 	bl	80018e4 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d9f2      	bls.n	800ad54 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ad6e:	4b12      	ldr	r3, [pc, #72]	@ (800adb8 <SD_read+0xa8>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d102      	bne.n	800ad7c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	75fb      	strb	r3, [r7, #23]
 800ad7a:	e017      	b.n	800adac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ad7c:	4b0e      	ldr	r3, [pc, #56]	@ (800adb8 <SD_read+0xa8>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ad82:	f7f6 fdaf 	bl	80018e4 <HAL_GetTick>
 800ad86:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad88:	e007      	b.n	800ad9a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad8a:	f7ff feef 	bl	800ab6c <BSP_SD_GetCardState>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d102      	bne.n	800ad9a <SD_read+0x8a>
          {
            res = RES_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ad98:	e008      	b.n	800adac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad9a:	f7f6 fda3 	bl	80018e4 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d9ee      	bls.n	800ad8a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800adac:	7dfb      	ldrb	r3, [r7, #23]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20000530 	.word	0x20000530

0800adbc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	603b      	str	r3, [r7, #0]
 800adc8:	4603      	mov	r3, r0
 800adca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800add0:	4b24      	ldr	r3, [pc, #144]	@ (800ae64 <SD_write+0xa8>)
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800add6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800adda:	f7ff ff33 	bl	800ac44 <SD_CheckStatusWithTimeout>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	da01      	bge.n	800ade8 <SD_write+0x2c>
  {
    return res;
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	e038      	b.n	800ae5a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	68b8      	ldr	r0, [r7, #8]
 800adee:	f7ff fea3 	bl	800ab38 <BSP_SD_WriteBlocks_DMA>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d12f      	bne.n	800ae58 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800adf8:	f7f6 fd74 	bl	80018e4 <HAL_GetTick>
 800adfc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800adfe:	bf00      	nop
 800ae00:	4b18      	ldr	r3, [pc, #96]	@ (800ae64 <SD_write+0xa8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d108      	bne.n	800ae1a <SD_write+0x5e>
 800ae08:	f7f6 fd6c 	bl	80018e4 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d9f2      	bls.n	800ae00 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ae1a:	4b12      	ldr	r3, [pc, #72]	@ (800ae64 <SD_write+0xa8>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d102      	bne.n	800ae28 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	75fb      	strb	r3, [r7, #23]
 800ae26:	e017      	b.n	800ae58 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ae28:	4b0e      	ldr	r3, [pc, #56]	@ (800ae64 <SD_write+0xa8>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ae2e:	f7f6 fd59 	bl	80018e4 <HAL_GetTick>
 800ae32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae34:	e007      	b.n	800ae46 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae36:	f7ff fe99 	bl	800ab6c <BSP_SD_GetCardState>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <SD_write+0x8a>
          {
            res = RES_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	75fb      	strb	r3, [r7, #23]
            break;
 800ae44:	e008      	b.n	800ae58 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae46:	f7f6 fd4d 	bl	80018e4 <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d9ee      	bls.n	800ae36 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	2000052c 	.word	0x2000052c

0800ae68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08c      	sub	sp, #48	@ 0x30
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	603a      	str	r2, [r7, #0]
 800ae72:	71fb      	strb	r3, [r7, #7]
 800ae74:	460b      	mov	r3, r1
 800ae76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ae7e:	4b25      	ldr	r3, [pc, #148]	@ (800af14 <SD_ioctl+0xac>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f003 0301 	and.w	r3, r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <SD_ioctl+0x28>
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e03c      	b.n	800af0a <SD_ioctl+0xa2>

  switch (cmd)
 800ae90:	79bb      	ldrb	r3, [r7, #6]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d834      	bhi.n	800af00 <SD_ioctl+0x98>
 800ae96:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <SD_ioctl+0x34>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aeb5 	.word	0x0800aeb5
 800aea4:	0800aecd 	.word	0x0800aecd
 800aea8:	0800aee7 	.word	0x0800aee7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aeb2:	e028      	b.n	800af06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aeb4:	f107 030c 	add.w	r3, r7, #12
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff fe67 	bl	800ab8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aeca:	e01c      	b.n	800af06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aecc:	f107 030c 	add.w	r3, r7, #12
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff fe5b 	bl	800ab8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aee4:	e00f      	b.n	800af06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aee6:	f107 030c 	add.w	r3, r7, #12
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff fe4e 	bl	800ab8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef2:	0a5a      	lsrs	r2, r3, #9
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aefe:	e002      	b.n	800af06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800af00:	2304      	movs	r3, #4
 800af02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800af06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3730      	adds	r7, #48	@ 0x30
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	20000009 	.word	0x20000009

0800af18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800af1c:	4b03      	ldr	r3, [pc, #12]	@ (800af2c <BSP_SD_WriteCpltCallback+0x14>)
 800af1e:	2201      	movs	r2, #1
 800af20:	601a      	str	r2, [r3, #0]
}
 800af22:	bf00      	nop
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	2000052c 	.word	0x2000052c

0800af30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800af34:	4b03      	ldr	r3, [pc, #12]	@ (800af44 <BSP_SD_ReadCpltCallback+0x14>)
 800af36:	2201      	movs	r2, #1
 800af38:	601a      	str	r2, [r3, #0]
}
 800af3a:	bf00      	nop
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000530 	.word	0x20000530

0800af48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af58:	f002 fc7e 	bl	800d858 <USBD_static_malloc>
 800af5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d109      	bne.n	800af78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	32b0      	adds	r2, #176	@ 0xb0
 800af6e:	2100      	movs	r1, #0
 800af70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af74:	2302      	movs	r3, #2
 800af76:	e0d4      	b.n	800b122 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af7c:	2100      	movs	r1, #0
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f002 fcae 	bl	800d8e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32b0      	adds	r2, #176	@ 0xb0
 800af8e:	68f9      	ldr	r1, [r7, #12]
 800af90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	32b0      	adds	r2, #176	@ 0xb0
 800af9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	7c1b      	ldrb	r3, [r3, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d138      	bne.n	800b022 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afb0:	4b5e      	ldr	r3, [pc, #376]	@ (800b12c <USBD_CDC_Init+0x1e4>)
 800afb2:	7819      	ldrb	r1, [r3, #0]
 800afb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afb8:	2202      	movs	r2, #2
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f002 fb29 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afc0:	4b5a      	ldr	r3, [pc, #360]	@ (800b12c <USBD_CDC_Init+0x1e4>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	3324      	adds	r3, #36	@ 0x24
 800afd6:	2201      	movs	r2, #1
 800afd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afda:	4b55      	ldr	r3, [pc, #340]	@ (800b130 <USBD_CDC_Init+0x1e8>)
 800afdc:	7819      	ldrb	r1, [r3, #0]
 800afde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afe2:	2202      	movs	r2, #2
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f002 fb14 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afea:	4b51      	ldr	r3, [pc, #324]	@ (800b130 <USBD_CDC_Init+0x1e8>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 020f 	and.w	r2, r3, #15
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	440b      	add	r3, r1
 800affe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b002:	2201      	movs	r2, #1
 800b004:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b006:	4b4b      	ldr	r3, [pc, #300]	@ (800b134 <USBD_CDC_Init+0x1ec>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	f003 020f 	and.w	r2, r3, #15
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	440b      	add	r3, r1
 800b01a:	3326      	adds	r3, #38	@ 0x26
 800b01c:	2210      	movs	r2, #16
 800b01e:	801a      	strh	r2, [r3, #0]
 800b020:	e035      	b.n	800b08e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b022:	4b42      	ldr	r3, [pc, #264]	@ (800b12c <USBD_CDC_Init+0x1e4>)
 800b024:	7819      	ldrb	r1, [r3, #0]
 800b026:	2340      	movs	r3, #64	@ 0x40
 800b028:	2202      	movs	r2, #2
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f002 faf1 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b030:	4b3e      	ldr	r3, [pc, #248]	@ (800b12c <USBD_CDC_Init+0x1e4>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f003 020f 	and.w	r2, r3, #15
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	4613      	mov	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	440b      	add	r3, r1
 800b044:	3324      	adds	r3, #36	@ 0x24
 800b046:	2201      	movs	r2, #1
 800b048:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b04a:	4b39      	ldr	r3, [pc, #228]	@ (800b130 <USBD_CDC_Init+0x1e8>)
 800b04c:	7819      	ldrb	r1, [r3, #0]
 800b04e:	2340      	movs	r3, #64	@ 0x40
 800b050:	2202      	movs	r2, #2
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f002 fadd 	bl	800d612 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b058:	4b35      	ldr	r3, [pc, #212]	@ (800b130 <USBD_CDC_Init+0x1e8>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 020f 	and.w	r2, r3, #15
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b070:	2201      	movs	r2, #1
 800b072:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b074:	4b2f      	ldr	r3, [pc, #188]	@ (800b134 <USBD_CDC_Init+0x1ec>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 020f 	and.w	r2, r3, #15
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	440b      	add	r3, r1
 800b088:	3326      	adds	r3, #38	@ 0x26
 800b08a:	2210      	movs	r2, #16
 800b08c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b08e:	4b29      	ldr	r3, [pc, #164]	@ (800b134 <USBD_CDC_Init+0x1ec>)
 800b090:	7819      	ldrb	r1, [r3, #0]
 800b092:	2308      	movs	r3, #8
 800b094:	2203      	movs	r2, #3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f002 fabb 	bl	800d612 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b09c:	4b25      	ldr	r3, [pc, #148]	@ (800b134 <USBD_CDC_Init+0x1ec>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f003 020f 	and.w	r2, r3, #15
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3324      	adds	r3, #36	@ 0x24
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	33b0      	adds	r3, #176	@ 0xb0
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e018      	b.n	800b122 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	7c1b      	ldrb	r3, [r3, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b130 <USBD_CDC_Init+0x1e8>)
 800b0fa:	7819      	ldrb	r1, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f002 fb72 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800b10c:	e008      	b.n	800b120 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b10e:	4b08      	ldr	r3, [pc, #32]	@ (800b130 <USBD_CDC_Init+0x1e8>)
 800b110:	7819      	ldrb	r1, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b118:	2340      	movs	r3, #64	@ 0x40
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f002 fb68 	bl	800d7f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000093 	.word	0x20000093
 800b130:	20000094 	.word	0x20000094
 800b134:	20000095 	.word	0x20000095

0800b138 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b144:	4b3a      	ldr	r3, [pc, #232]	@ (800b230 <USBD_CDC_DeInit+0xf8>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f002 fa87 	bl	800d65e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b150:	4b37      	ldr	r3, [pc, #220]	@ (800b230 <USBD_CDC_DeInit+0xf8>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 020f 	and.w	r2, r3, #15
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	3324      	adds	r3, #36	@ 0x24
 800b166:	2200      	movs	r2, #0
 800b168:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b16a:	4b32      	ldr	r3, [pc, #200]	@ (800b234 <USBD_CDC_DeInit+0xfc>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f002 fa74 	bl	800d65e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b176:	4b2f      	ldr	r3, [pc, #188]	@ (800b234 <USBD_CDC_DeInit+0xfc>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	f003 020f 	and.w	r2, r3, #15
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	440b      	add	r3, r1
 800b18a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b18e:	2200      	movs	r2, #0
 800b190:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b192:	4b29      	ldr	r3, [pc, #164]	@ (800b238 <USBD_CDC_DeInit+0x100>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f002 fa60 	bl	800d65e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b19e:	4b26      	ldr	r3, [pc, #152]	@ (800b238 <USBD_CDC_DeInit+0x100>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	f003 020f 	and.w	r2, r3, #15
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	440b      	add	r3, r1
 800b1b2:	3324      	adds	r3, #36	@ 0x24
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800b238 <USBD_CDC_DeInit+0x100>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f003 020f 	and.w	r2, r3, #15
 800b1c0:	6879      	ldr	r1, [r7, #4]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	440b      	add	r3, r1
 800b1cc:	3326      	adds	r3, #38	@ 0x26
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	32b0      	adds	r2, #176	@ 0xb0
 800b1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01f      	beq.n	800b224 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	33b0      	adds	r3, #176	@ 0xb0
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	32b0      	adds	r2, #176	@ 0xb0
 800b202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b206:	4618      	mov	r0, r3
 800b208:	f002 fb34 	bl	800d874 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	32b0      	adds	r2, #176	@ 0xb0
 800b216:	2100      	movs	r1, #0
 800b218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	20000093 	.word	0x20000093
 800b234:	20000094 	.word	0x20000094
 800b238:	20000095 	.word	0x20000095

0800b23c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	32b0      	adds	r2, #176	@ 0xb0
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b268:	2303      	movs	r3, #3
 800b26a:	e0bf      	b.n	800b3ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b274:	2b00      	cmp	r3, #0
 800b276:	d050      	beq.n	800b31a <USBD_CDC_Setup+0xde>
 800b278:	2b20      	cmp	r3, #32
 800b27a:	f040 80af 	bne.w	800b3dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	88db      	ldrh	r3, [r3, #6]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d03a      	beq.n	800b2fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	b25b      	sxtb	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	da1b      	bge.n	800b2c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	33b0      	adds	r3, #176	@ 0xb0
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b2a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	88d2      	ldrh	r2, [r2, #6]
 800b2ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	88db      	ldrh	r3, [r3, #6]
 800b2b2:	2b07      	cmp	r3, #7
 800b2b4:	bf28      	it	cs
 800b2b6:	2307      	movcs	r3, #7
 800b2b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	89fa      	ldrh	r2, [r7, #14]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f001 fd47 	bl	800cd54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b2c6:	e090      	b.n	800b3ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	785a      	ldrb	r2, [r3, #1]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	88db      	ldrh	r3, [r3, #6]
 800b2d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800b2d8:	d803      	bhi.n	800b2e2 <USBD_CDC_Setup+0xa6>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	88db      	ldrh	r3, [r3, #6]
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	e000      	b.n	800b2e4 <USBD_CDC_Setup+0xa8>
 800b2e2:	2240      	movs	r2, #64	@ 0x40
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b2ea:	6939      	ldr	r1, [r7, #16]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fd59 	bl	800cdac <USBD_CtlPrepareRx>
      break;
 800b2fa:	e076      	b.n	800b3ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	33b0      	adds	r3, #176	@ 0xb0
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	7850      	ldrb	r0, [r2, #1]
 800b312:	2200      	movs	r2, #0
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	4798      	blx	r3
      break;
 800b318:	e067      	b.n	800b3ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	785b      	ldrb	r3, [r3, #1]
 800b31e:	2b0b      	cmp	r3, #11
 800b320:	d851      	bhi.n	800b3c6 <USBD_CDC_Setup+0x18a>
 800b322:	a201      	add	r2, pc, #4	@ (adr r2, 800b328 <USBD_CDC_Setup+0xec>)
 800b324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b328:	0800b359 	.word	0x0800b359
 800b32c:	0800b3d5 	.word	0x0800b3d5
 800b330:	0800b3c7 	.word	0x0800b3c7
 800b334:	0800b3c7 	.word	0x0800b3c7
 800b338:	0800b3c7 	.word	0x0800b3c7
 800b33c:	0800b3c7 	.word	0x0800b3c7
 800b340:	0800b3c7 	.word	0x0800b3c7
 800b344:	0800b3c7 	.word	0x0800b3c7
 800b348:	0800b3c7 	.word	0x0800b3c7
 800b34c:	0800b3c7 	.word	0x0800b3c7
 800b350:	0800b383 	.word	0x0800b383
 800b354:	0800b3ad 	.word	0x0800b3ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b03      	cmp	r3, #3
 800b362:	d107      	bne.n	800b374 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b364:	f107 030a 	add.w	r3, r7, #10
 800b368:	2202      	movs	r2, #2
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 fcf1 	bl	800cd54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b372:	e032      	b.n	800b3da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 fc7b 	bl	800cc72 <USBD_CtlError>
            ret = USBD_FAIL;
 800b37c:	2303      	movs	r3, #3
 800b37e:	75fb      	strb	r3, [r7, #23]
          break;
 800b380:	e02b      	b.n	800b3da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d107      	bne.n	800b39e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b38e:	f107 030d 	add.w	r3, r7, #13
 800b392:	2201      	movs	r2, #1
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f001 fcdc 	bl	800cd54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b39c:	e01d      	b.n	800b3da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fc66 	bl	800cc72 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b3aa:	e016      	b.n	800b3da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d00f      	beq.n	800b3d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f001 fc59 	bl	800cc72 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3c4:	e008      	b.n	800b3d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 fc52 	bl	800cc72 <USBD_CtlError>
          ret = USBD_FAIL;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b3d2:	e002      	b.n	800b3da <USBD_CDC_Setup+0x19e>
          break;
 800b3d4:	bf00      	nop
 800b3d6:	e008      	b.n	800b3ea <USBD_CDC_Setup+0x1ae>
          break;
 800b3d8:	bf00      	nop
      }
      break;
 800b3da:	e006      	b.n	800b3ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f001 fc47 	bl	800cc72 <USBD_CtlError>
      ret = USBD_FAIL;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b406:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	32b0      	adds	r2, #176	@ 0xb0
 800b412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e065      	b.n	800b4ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	32b0      	adds	r2, #176	@ 0xb0
 800b428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	f003 020f 	and.w	r2, r3, #15
 800b434:	6879      	ldr	r1, [r7, #4]
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	440b      	add	r3, r1
 800b440:	3318      	adds	r3, #24
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d02f      	beq.n	800b4a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	f003 020f 	and.w	r2, r3, #15
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4613      	mov	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	440b      	add	r3, r1
 800b45a:	3318      	adds	r3, #24
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	78fb      	ldrb	r3, [r7, #3]
 800b460:	f003 010f 	and.w	r1, r3, #15
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	460b      	mov	r3, r1
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	440b      	add	r3, r1
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4403      	add	r3, r0
 800b470:	331c      	adds	r3, #28
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	fbb2 f1f3 	udiv	r1, r2, r3
 800b478:	fb01 f303 	mul.w	r3, r1, r3
 800b47c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d112      	bne.n	800b4a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	f003 020f 	and.w	r2, r3, #15
 800b488:	6879      	ldr	r1, [r7, #4]
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	440b      	add	r3, r1
 800b494:	3318      	adds	r3, #24
 800b496:	2200      	movs	r2, #0
 800b498:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b49a:	78f9      	ldrb	r1, [r7, #3]
 800b49c:	2300      	movs	r3, #0
 800b49e:	2200      	movs	r2, #0
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f002 f984 	bl	800d7ae <USBD_LL_Transmit>
 800b4a6:	e01f      	b.n	800b4e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	33b0      	adds	r3, #176	@ 0xb0
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d010      	beq.n	800b4e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	33b0      	adds	r3, #176	@ 0xb0
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b4e4:	78fa      	ldrb	r2, [r7, #3]
 800b4e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	32b0      	adds	r2, #176	@ 0xb0
 800b508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	32b0      	adds	r2, #176	@ 0xb0
 800b518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	e01a      	b.n	800b55a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b524:	78fb      	ldrb	r3, [r7, #3]
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f002 f982 	bl	800d832 <USBD_LL_GetRxDataSize>
 800b52e:	4602      	mov	r2, r0
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	33b0      	adds	r3, #176	@ 0xb0
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b554:	4611      	mov	r1, r2
 800b556:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	32b0      	adds	r2, #176	@ 0xb0
 800b574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b578:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b580:	2303      	movs	r3, #3
 800b582:	e024      	b.n	800b5ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	33b0      	adds	r3, #176	@ 0xb0
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d019      	beq.n	800b5cc <USBD_CDC_EP0_RxReady+0x6a>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b59e:	2bff      	cmp	r3, #255	@ 0xff
 800b5a0:	d014      	beq.n	800b5cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	33b0      	adds	r3, #176	@ 0xb0
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b5ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	22ff      	movs	r2, #255	@ 0xff
 800b5c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5e0:	2182      	movs	r1, #130	@ 0x82
 800b5e2:	4818      	ldr	r0, [pc, #96]	@ (800b644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5e4:	f000 fd0f 	bl	800c006 <USBD_GetEpDesc>
 800b5e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	4815      	ldr	r0, [pc, #84]	@ (800b644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5ee:	f000 fd0a 	bl	800c006 <USBD_GetEpDesc>
 800b5f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5f4:	2181      	movs	r1, #129	@ 0x81
 800b5f6:	4813      	ldr	r0, [pc, #76]	@ (800b644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5f8:	f000 fd05 	bl	800c006 <USBD_GetEpDesc>
 800b5fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2210      	movs	r2, #16
 800b608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	2200      	movs	r2, #0
 800b614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b618:	711a      	strb	r2, [r3, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b62c:	711a      	strb	r2, [r3, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2243      	movs	r2, #67	@ 0x43
 800b636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b638:	4b02      	ldr	r3, [pc, #8]	@ (800b644 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20000050 	.word	0x20000050

0800b648 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b650:	2182      	movs	r1, #130	@ 0x82
 800b652:	4818      	ldr	r0, [pc, #96]	@ (800b6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b654:	f000 fcd7 	bl	800c006 <USBD_GetEpDesc>
 800b658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b65a:	2101      	movs	r1, #1
 800b65c:	4815      	ldr	r0, [pc, #84]	@ (800b6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b65e:	f000 fcd2 	bl	800c006 <USBD_GetEpDesc>
 800b662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b664:	2181      	movs	r1, #129	@ 0x81
 800b666:	4813      	ldr	r0, [pc, #76]	@ (800b6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b668:	f000 fccd 	bl	800c006 <USBD_GetEpDesc>
 800b66c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2210      	movs	r2, #16
 800b678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d006      	beq.n	800b68e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2200      	movs	r2, #0
 800b684:	711a      	strb	r2, [r3, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f042 0202 	orr.w	r2, r2, #2
 800b68c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	711a      	strb	r2, [r3, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f042 0202 	orr.w	r2, r2, #2
 800b6a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2243      	movs	r2, #67	@ 0x43
 800b6a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6a8:	4b02      	ldr	r3, [pc, #8]	@ (800b6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000050 	.word	0x20000050

0800b6b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6c0:	2182      	movs	r1, #130	@ 0x82
 800b6c2:	4818      	ldr	r0, [pc, #96]	@ (800b724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6c4:	f000 fc9f 	bl	800c006 <USBD_GetEpDesc>
 800b6c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	4815      	ldr	r0, [pc, #84]	@ (800b724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6ce:	f000 fc9a 	bl	800c006 <USBD_GetEpDesc>
 800b6d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6d4:	2181      	movs	r1, #129	@ 0x81
 800b6d6:	4813      	ldr	r0, [pc, #76]	@ (800b724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6d8:	f000 fc95 	bl	800c006 <USBD_GetEpDesc>
 800b6dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2210      	movs	r2, #16
 800b6e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d006      	beq.n	800b6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6f8:	711a      	strb	r2, [r3, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b70c:	711a      	strb	r2, [r3, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2243      	movs	r2, #67	@ 0x43
 800b716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b718:	4b02      	ldr	r3, [pc, #8]	@ (800b724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000050 	.word	0x20000050

0800b728 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	220a      	movs	r2, #10
 800b734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b736:	4b03      	ldr	r3, [pc, #12]	@ (800b744 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr
 800b744:	2000000c 	.word	0x2000000c

0800b748 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b758:	2303      	movs	r3, #3
 800b75a:	e009      	b.n	800b770 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	33b0      	adds	r3, #176	@ 0xb0
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	32b0      	adds	r2, #176	@ 0xb0
 800b792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b796:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e008      	b.n	800b7b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	32b0      	adds	r2, #176	@ 0xb0
 800b7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e004      	b.n	800b7ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
	...

0800b7fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	32b0      	adds	r2, #176	@ 0xb0
 800b80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b812:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	32b0      	adds	r2, #176	@ 0xb0
 800b81e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b826:	2303      	movs	r3, #3
 800b828:	e018      	b.n	800b85c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	7c1b      	ldrb	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b832:	4b0c      	ldr	r3, [pc, #48]	@ (800b864 <USBD_CDC_ReceivePacket+0x68>)
 800b834:	7819      	ldrb	r1, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b83c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f001 ffd5 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800b846:	e008      	b.n	800b85a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b848:	4b06      	ldr	r3, [pc, #24]	@ (800b864 <USBD_CDC_ReceivePacket+0x68>)
 800b84a:	7819      	ldrb	r1, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b852:	2340      	movs	r3, #64	@ 0x40
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 ffcb 	bl	800d7f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20000094 	.word	0x20000094

0800b868 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4613      	mov	r3, r2
 800b874:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e01f      	b.n	800b8c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	79fa      	ldrb	r2, [r7, #7]
 800b8b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f001 fe45 	bl	800d544 <USBD_LL_Init>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e025      	b.n	800b92c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	32ae      	adds	r2, #174	@ 0xae
 800b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00f      	beq.n	800b91c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	32ae      	adds	r2, #174	@ 0xae
 800b906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b90c:	f107 020e 	add.w	r2, r7, #14
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	4602      	mov	r2, r0
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 fe4d 	bl	800d5dc <USBD_LL_Start>
 800b942:	4603      	mov	r3, r0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b954:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b956:	4618      	mov	r0, r3
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	460b      	mov	r3, r1
 800b96c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d009      	beq.n	800b990 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	78fa      	ldrb	r2, [r7, #3]
 800b986:	4611      	mov	r1, r2
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4798      	blx	r3
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	78fa      	ldrb	r2, [r7, #3]
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 f90c 	bl	800cbfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba02:	f003 031f 	and.w	r3, r3, #31
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d01a      	beq.n	800ba40 <USBD_LL_SetupStage+0x72>
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d822      	bhi.n	800ba54 <USBD_LL_SetupStage+0x86>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <USBD_LL_SetupStage+0x4a>
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d00a      	beq.n	800ba2c <USBD_LL_SetupStage+0x5e>
 800ba16:	e01d      	b.n	800ba54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fb63 	bl	800c0ec <USBD_StdDevReq>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2a:	e020      	b.n	800ba6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fbcb 	bl	800c1d0 <USBD_StdItfReq>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	e016      	b.n	800ba6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fc2d 	bl	800c2a8 <USBD_StdEPReq>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]
      break;
 800ba52:	e00c      	b.n	800ba6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 fe1a 	bl	800d69c <USBD_LL_StallEP>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6c:	bf00      	nop
  }

  return ret;
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	460b      	mov	r3, r1
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ba8a:	7afb      	ldrb	r3, [r7, #11]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d16e      	bne.n	800bb6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	f040 8098 	bne.w	800bbd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	429a      	cmp	r2, r3
 800baae:	d913      	bls.n	800bad8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	689a      	ldr	r2, [r3, #8]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	1ad2      	subs	r2, r2, r3
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	4293      	cmp	r3, r2
 800bac8:	bf28      	it	cs
 800baca:	4613      	movcs	r3, r2
 800bacc:	461a      	mov	r2, r3
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f001 f988 	bl	800cde6 <USBD_CtlContinueRx>
 800bad6:	e07d      	b.n	800bbd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bade:	f003 031f 	and.w	r3, r3, #31
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d014      	beq.n	800bb10 <USBD_LL_DataOutStage+0x98>
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d81d      	bhi.n	800bb26 <USBD_LL_DataOutStage+0xae>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <USBD_LL_DataOutStage+0x7c>
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d003      	beq.n	800bafa <USBD_LL_DataOutStage+0x82>
 800baf2:	e018      	b.n	800bb26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	75bb      	strb	r3, [r7, #22]
            break;
 800baf8:	e018      	b.n	800bb2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	4619      	mov	r1, r3
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 fa64 	bl	800bfd2 <USBD_CoreFindIF>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	75bb      	strb	r3, [r7, #22]
            break;
 800bb0e:	e00d      	b.n	800bb2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 fa66 	bl	800bfec <USBD_CoreFindEP>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75bb      	strb	r3, [r7, #22]
            break;
 800bb24:	e002      	b.n	800bb2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	75bb      	strb	r3, [r7, #22]
            break;
 800bb2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb2c:	7dbb      	ldrb	r3, [r7, #22]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d119      	bne.n	800bb66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d113      	bne.n	800bb66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bb3e:	7dba      	ldrb	r2, [r7, #22]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	32ae      	adds	r2, #174	@ 0xae
 800bb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00b      	beq.n	800bb66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bb4e:	7dba      	ldrb	r2, [r7, #22]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb56:	7dba      	ldrb	r2, [r7, #22]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	32ae      	adds	r2, #174	@ 0xae
 800bb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 f94e 	bl	800ce08 <USBD_CtlSendStatus>
 800bb6c:	e032      	b.n	800bbd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb6e:	7afb      	ldrb	r3, [r7, #11]
 800bb70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	4619      	mov	r1, r3
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fa37 	bl	800bfec <USBD_CoreFindEP>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb82:	7dbb      	ldrb	r3, [r7, #22]
 800bb84:	2bff      	cmp	r3, #255	@ 0xff
 800bb86:	d025      	beq.n	800bbd4 <USBD_LL_DataOutStage+0x15c>
 800bb88:	7dbb      	ldrb	r3, [r7, #22]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d122      	bne.n	800bbd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d117      	bne.n	800bbca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb9a:	7dba      	ldrb	r2, [r7, #22]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	32ae      	adds	r2, #174	@ 0xae
 800bba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00f      	beq.n	800bbca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bbaa:	7dba      	ldrb	r2, [r7, #22]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bbb2:	7dba      	ldrb	r2, [r7, #22]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	32ae      	adds	r2, #174	@ 0xae
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	7afa      	ldrb	r2, [r7, #11]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	4798      	blx	r3
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	e000      	b.n	800bbd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b086      	sub	sp, #24
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	607a      	str	r2, [r7, #4]
 800bbea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bbec:	7afb      	ldrb	r3, [r7, #11]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d16f      	bne.n	800bcd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3314      	adds	r3, #20
 800bbf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d15a      	bne.n	800bcb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	689a      	ldr	r2, [r3, #8]
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d914      	bls.n	800bc38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	689a      	ldr	r2, [r3, #8]
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	1ad2      	subs	r2, r2, r3
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	461a      	mov	r2, r3
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f001 f8b0 	bl	800cd8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2100      	movs	r1, #0
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f001 fddd 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800bc36:	e03f      	b.n	800bcb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	68da      	ldr	r2, [r3, #12]
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d11c      	bne.n	800bc7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d316      	bcc.n	800bc7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d20f      	bcs.n	800bc7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2100      	movs	r1, #0
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f001 f891 	bl	800cd8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc70:	2300      	movs	r3, #0
 800bc72:	2200      	movs	r2, #0
 800bc74:	2100      	movs	r1, #0
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f001 fdba 	bl	800d7f0 <USBD_LL_PrepareReceive>
 800bc7c:	e01c      	b.n	800bcb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d10f      	bne.n	800bcaa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d009      	beq.n	800bcaa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcaa:	2180      	movs	r1, #128	@ 0x80
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f001 fcf5 	bl	800d69c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f001 f8bb 	bl	800ce2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d03a      	beq.n	800bd38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f7ff fe42 	bl	800b94c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bcd0:	e032      	b.n	800bd38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bcd2:	7afb      	ldrb	r3, [r7, #11]
 800bcd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	4619      	mov	r1, r3
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 f985 	bl	800bfec <USBD_CoreFindEP>
 800bce2:	4603      	mov	r3, r0
 800bce4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
 800bce8:	2bff      	cmp	r3, #255	@ 0xff
 800bcea:	d025      	beq.n	800bd38 <USBD_LL_DataInStage+0x15a>
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d122      	bne.n	800bd38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d11c      	bne.n	800bd38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcfe:	7dfa      	ldrb	r2, [r7, #23]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	32ae      	adds	r2, #174	@ 0xae
 800bd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d014      	beq.n	800bd38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bd0e:	7dfa      	ldrb	r2, [r7, #23]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd16:	7dfa      	ldrb	r2, [r7, #23]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	32ae      	adds	r2, #174	@ 0xae
 800bd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	7afa      	ldrb	r2, [r7, #11]
 800bd24:	4611      	mov	r1, r2
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	4798      	blx	r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd2e:	7dbb      	ldrb	r3, [r7, #22]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bd34:	7dbb      	ldrb	r3, [r7, #22]
 800bd36:	e000      	b.n	800bd3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d014      	beq.n	800bda8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00e      	beq.n	800bda8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	6852      	ldr	r2, [r2, #4]
 800bd96:	b2d2      	uxtb	r2, r2
 800bd98:	4611      	mov	r1, r2
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	4798      	blx	r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bda4:	2303      	movs	r3, #3
 800bda6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bda8:	2340      	movs	r3, #64	@ 0x40
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2100      	movs	r1, #0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f001 fc2f 	bl	800d612 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2240      	movs	r2, #64	@ 0x40
 800bdc0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdc4:	2340      	movs	r3, #64	@ 0x40
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2180      	movs	r1, #128	@ 0x80
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f001 fc21 	bl	800d612 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2240      	movs	r2, #64	@ 0x40
 800bdda:	621a      	str	r2, [r3, #32]

  return ret;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	78fa      	ldrb	r2, [r7, #3]
 800bdf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be06:	b480      	push	{r7}
 800be08:	b083      	sub	sp, #12
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b04      	cmp	r3, #4
 800be18:	d006      	beq.n	800be28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be20:	b2da      	uxtb	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2204      	movs	r2, #4
 800be2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b04      	cmp	r3, #4
 800be50:	d106      	bne.n	800be60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b082      	sub	sp, #8
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b03      	cmp	r3, #3
 800be80:	d110      	bne.n	800bea4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d005      	beq.n	800bea4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	460b      	mov	r3, r1
 800beb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	32ae      	adds	r2, #174	@ 0xae
 800bec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800becc:	2303      	movs	r3, #3
 800bece:	e01c      	b.n	800bf0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d115      	bne.n	800bf08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	32ae      	adds	r2, #174	@ 0xae
 800bee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beea:	6a1b      	ldr	r3, [r3, #32]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00b      	beq.n	800bf08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	32ae      	adds	r2, #174	@ 0xae
 800befa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	78fa      	ldrb	r2, [r7, #3]
 800bf02:	4611      	mov	r1, r2
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	32ae      	adds	r2, #174	@ 0xae
 800bf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e01c      	b.n	800bf6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d115      	bne.n	800bf6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32ae      	adds	r2, #174	@ 0xae
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00b      	beq.n	800bf6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	32ae      	adds	r2, #174	@ 0xae
 800bf5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf64:	78fa      	ldrb	r2, [r7, #3]
 800bf66:	4611      	mov	r1, r2
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00e      	beq.n	800bfc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6852      	ldr	r2, [r2, #4]
 800bfb6:	b2d2      	uxtb	r2, r2
 800bfb8:	4611      	mov	r1, r2
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bff8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b086      	sub	sp, #24
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	460b      	mov	r3, r1
 800c010:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	885b      	ldrh	r3, [r3, #2]
 800c022:	b29b      	uxth	r3, r3
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	7812      	ldrb	r2, [r2, #0]
 800c028:	4293      	cmp	r3, r2
 800c02a:	d91f      	bls.n	800c06c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c032:	e013      	b.n	800c05c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c034:	f107 030a 	add.w	r3, r7, #10
 800c038:	4619      	mov	r1, r3
 800c03a:	6978      	ldr	r0, [r7, #20]
 800c03c:	f000 f81b 	bl	800c076 <USBD_GetNextDesc>
 800c040:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	785b      	ldrb	r3, [r3, #1]
 800c046:	2b05      	cmp	r3, #5
 800c048:	d108      	bne.n	800c05c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	789b      	ldrb	r3, [r3, #2]
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	429a      	cmp	r2, r3
 800c056:	d008      	beq.n	800c06a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	885b      	ldrh	r3, [r3, #2]
 800c060:	b29a      	uxth	r2, r3
 800c062:	897b      	ldrh	r3, [r7, #10]
 800c064:	429a      	cmp	r2, r3
 800c066:	d8e5      	bhi.n	800c034 <USBD_GetEpDesc+0x2e>
 800c068:	e000      	b.n	800c06c <USBD_GetEpDesc+0x66>
          break;
 800c06a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c06c:	693b      	ldr	r3, [r7, #16]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c076:	b480      	push	{r7}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	7812      	ldrb	r2, [r2, #0]
 800c08c:	4413      	add	r3, r2
 800c08e:	b29a      	uxth	r2, r3
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4413      	add	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b087      	sub	sp, #28
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c0cc:	8a3b      	ldrh	r3, [r7, #16]
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	b21a      	sxth	r2, r3
 800c0d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	b21b      	sxth	r3, r3
 800c0da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c0dc:	89fb      	ldrh	r3, [r7, #14]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
	...

0800c0ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c102:	2b40      	cmp	r3, #64	@ 0x40
 800c104:	d005      	beq.n	800c112 <USBD_StdDevReq+0x26>
 800c106:	2b40      	cmp	r3, #64	@ 0x40
 800c108:	d857      	bhi.n	800c1ba <USBD_StdDevReq+0xce>
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00f      	beq.n	800c12e <USBD_StdDevReq+0x42>
 800c10e:	2b20      	cmp	r3, #32
 800c110:	d153      	bne.n	800c1ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	32ae      	adds	r2, #174	@ 0xae
 800c11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	4798      	blx	r3
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]
      break;
 800c12c:	e04a      	b.n	800c1c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	785b      	ldrb	r3, [r3, #1]
 800c132:	2b09      	cmp	r3, #9
 800c134:	d83b      	bhi.n	800c1ae <USBD_StdDevReq+0xc2>
 800c136:	a201      	add	r2, pc, #4	@ (adr r2, 800c13c <USBD_StdDevReq+0x50>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c191 	.word	0x0800c191
 800c140:	0800c1a5 	.word	0x0800c1a5
 800c144:	0800c1af 	.word	0x0800c1af
 800c148:	0800c19b 	.word	0x0800c19b
 800c14c:	0800c1af 	.word	0x0800c1af
 800c150:	0800c16f 	.word	0x0800c16f
 800c154:	0800c165 	.word	0x0800c165
 800c158:	0800c1af 	.word	0x0800c1af
 800c15c:	0800c187 	.word	0x0800c187
 800c160:	0800c179 	.word	0x0800c179
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fa3c 	bl	800c5e4 <USBD_GetDescriptor>
          break;
 800c16c:	e024      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fba1 	bl	800c8b8 <USBD_SetAddress>
          break;
 800c176:	e01f      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fbe0 	bl	800c940 <USBD_SetConfig>
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]
          break;
 800c184:	e018      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fc83 	bl	800ca94 <USBD_GetConfig>
          break;
 800c18e:	e013      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fcb4 	bl	800cb00 <USBD_GetStatus>
          break;
 800c198:	e00e      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fce3 	bl	800cb68 <USBD_SetFeature>
          break;
 800c1a2:	e009      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fd07 	bl	800cbba <USBD_ClrFeature>
          break;
 800c1ac:	e004      	b.n	800c1b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fd5e 	bl	800cc72 <USBD_CtlError>
          break;
 800c1b6:	bf00      	nop
      }
      break;
 800c1b8:	e004      	b.n	800c1c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fd58 	bl	800cc72 <USBD_CtlError>
      break;
 800c1c2:	bf00      	nop
  }

  return ret;
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop

0800c1d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1e6:	2b40      	cmp	r3, #64	@ 0x40
 800c1e8:	d005      	beq.n	800c1f6 <USBD_StdItfReq+0x26>
 800c1ea:	2b40      	cmp	r3, #64	@ 0x40
 800c1ec:	d852      	bhi.n	800c294 <USBD_StdItfReq+0xc4>
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <USBD_StdItfReq+0x26>
 800c1f2:	2b20      	cmp	r3, #32
 800c1f4:	d14e      	bne.n	800c294 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	3b01      	subs	r3, #1
 800c200:	2b02      	cmp	r3, #2
 800c202:	d840      	bhi.n	800c286 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	889b      	ldrh	r3, [r3, #4]
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d836      	bhi.n	800c27c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	889b      	ldrh	r3, [r3, #4]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fedb 	bl	800bfd2 <USBD_CoreFindIF>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	2bff      	cmp	r3, #255	@ 0xff
 800c224:	d01d      	beq.n	800c262 <USBD_StdItfReq+0x92>
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d11a      	bne.n	800c262 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c22c:	7bba      	ldrb	r2, [r7, #14]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	32ae      	adds	r2, #174	@ 0xae
 800c232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00f      	beq.n	800c25c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c23c:	7bba      	ldrb	r2, [r7, #14]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c244:	7bba      	ldrb	r2, [r7, #14]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	32ae      	adds	r2, #174	@ 0xae
 800c24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	4798      	blx	r3
 800c256:	4603      	mov	r3, r0
 800c258:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c25a:	e004      	b.n	800c266 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c25c:	2303      	movs	r3, #3
 800c25e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c260:	e001      	b.n	800c266 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c262:	2303      	movs	r3, #3
 800c264:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	88db      	ldrh	r3, [r3, #6]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d110      	bne.n	800c290 <USBD_StdItfReq+0xc0>
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10d      	bne.n	800c290 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fdc7 	bl	800ce08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c27a:	e009      	b.n	800c290 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fcf7 	bl	800cc72 <USBD_CtlError>
          break;
 800c284:	e004      	b.n	800c290 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fcf2 	bl	800cc72 <USBD_CtlError>
          break;
 800c28e:	e000      	b.n	800c292 <USBD_StdItfReq+0xc2>
          break;
 800c290:	bf00      	nop
      }
      break;
 800c292:	e004      	b.n	800c29e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fceb 	bl	800cc72 <USBD_CtlError>
      break;
 800c29c:	bf00      	nop
  }

  return ret;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	889b      	ldrh	r3, [r3, #4]
 800c2ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2c4:	2b40      	cmp	r3, #64	@ 0x40
 800c2c6:	d007      	beq.n	800c2d8 <USBD_StdEPReq+0x30>
 800c2c8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ca:	f200 817f 	bhi.w	800c5cc <USBD_StdEPReq+0x324>
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d02a      	beq.n	800c328 <USBD_StdEPReq+0x80>
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	f040 817a 	bne.w	800c5cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff fe85 	bl	800bfec <USBD_CoreFindEP>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2e6:	7b7b      	ldrb	r3, [r7, #13]
 800c2e8:	2bff      	cmp	r3, #255	@ 0xff
 800c2ea:	f000 8174 	beq.w	800c5d6 <USBD_StdEPReq+0x32e>
 800c2ee:	7b7b      	ldrb	r3, [r7, #13]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f040 8170 	bne.w	800c5d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c2f6:	7b7a      	ldrb	r2, [r7, #13]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2fe:	7b7a      	ldrb	r2, [r7, #13]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	32ae      	adds	r2, #174	@ 0xae
 800c304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 8163 	beq.w	800c5d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c310:	7b7a      	ldrb	r2, [r7, #13]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	32ae      	adds	r2, #174	@ 0xae
 800c316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	4798      	blx	r3
 800c322:	4603      	mov	r3, r0
 800c324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c326:	e156      	b.n	800c5d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	785b      	ldrb	r3, [r3, #1]
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d008      	beq.n	800c342 <USBD_StdEPReq+0x9a>
 800c330:	2b03      	cmp	r3, #3
 800c332:	f300 8145 	bgt.w	800c5c0 <USBD_StdEPReq+0x318>
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 809b 	beq.w	800c472 <USBD_StdEPReq+0x1ca>
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d03c      	beq.n	800c3ba <USBD_StdEPReq+0x112>
 800c340:	e13e      	b.n	800c5c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d002      	beq.n	800c354 <USBD_StdEPReq+0xac>
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d016      	beq.n	800c380 <USBD_StdEPReq+0xd8>
 800c352:	e02c      	b.n	800c3ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00d      	beq.n	800c376 <USBD_StdEPReq+0xce>
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	2b80      	cmp	r3, #128	@ 0x80
 800c35e:	d00a      	beq.n	800c376 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f001 f999 	bl	800d69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c36a:	2180      	movs	r1, #128	@ 0x80
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f001 f995 	bl	800d69c <USBD_LL_StallEP>
 800c372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c374:	e020      	b.n	800c3b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fc7a 	bl	800cc72 <USBD_CtlError>
              break;
 800c37e:	e01b      	b.n	800c3b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	885b      	ldrh	r3, [r3, #2]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10e      	bne.n	800c3a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00b      	beq.n	800c3a6 <USBD_StdEPReq+0xfe>
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b80      	cmp	r3, #128	@ 0x80
 800c392:	d008      	beq.n	800c3a6 <USBD_StdEPReq+0xfe>
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	88db      	ldrh	r3, [r3, #6]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d104      	bne.n	800c3a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f001 f97b 	bl	800d69c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fd2e 	bl	800ce08 <USBD_CtlSendStatus>

              break;
 800c3ac:	e004      	b.n	800c3b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fc5e 	bl	800cc72 <USBD_CtlError>
              break;
 800c3b6:	bf00      	nop
          }
          break;
 800c3b8:	e107      	b.n	800c5ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d002      	beq.n	800c3cc <USBD_StdEPReq+0x124>
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d016      	beq.n	800c3f8 <USBD_StdEPReq+0x150>
 800c3ca:	e04b      	b.n	800c464 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00d      	beq.n	800c3ee <USBD_StdEPReq+0x146>
 800c3d2:	7bbb      	ldrb	r3, [r7, #14]
 800c3d4:	2b80      	cmp	r3, #128	@ 0x80
 800c3d6:	d00a      	beq.n	800c3ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 f95d 	bl	800d69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3e2:	2180      	movs	r1, #128	@ 0x80
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f001 f959 	bl	800d69c <USBD_LL_StallEP>
 800c3ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3ec:	e040      	b.n	800c470 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fc3e 	bl	800cc72 <USBD_CtlError>
              break;
 800c3f6:	e03b      	b.n	800c470 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	885b      	ldrh	r3, [r3, #2]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d136      	bne.n	800c46e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c406:	2b00      	cmp	r3, #0
 800c408:	d004      	beq.n	800c414 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c40a:	7bbb      	ldrb	r3, [r7, #14]
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f001 f963 	bl	800d6da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fcf7 	bl	800ce08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff fde4 	bl	800bfec <USBD_CoreFindEP>
 800c424:	4603      	mov	r3, r0
 800c426:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c428:	7b7b      	ldrb	r3, [r7, #13]
 800c42a:	2bff      	cmp	r3, #255	@ 0xff
 800c42c:	d01f      	beq.n	800c46e <USBD_StdEPReq+0x1c6>
 800c42e:	7b7b      	ldrb	r3, [r7, #13]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d11c      	bne.n	800c46e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c434:	7b7a      	ldrb	r2, [r7, #13]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c43c:	7b7a      	ldrb	r2, [r7, #13]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	32ae      	adds	r2, #174	@ 0xae
 800c442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d010      	beq.n	800c46e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c44c:	7b7a      	ldrb	r2, [r7, #13]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	32ae      	adds	r2, #174	@ 0xae
 800c452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	4798      	blx	r3
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c462:	e004      	b.n	800c46e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fc03 	bl	800cc72 <USBD_CtlError>
              break;
 800c46c:	e000      	b.n	800c470 <USBD_StdEPReq+0x1c8>
              break;
 800c46e:	bf00      	nop
          }
          break;
 800c470:	e0ab      	b.n	800c5ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d002      	beq.n	800c484 <USBD_StdEPReq+0x1dc>
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d032      	beq.n	800c4e8 <USBD_StdEPReq+0x240>
 800c482:	e097      	b.n	800c5b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d007      	beq.n	800c49a <USBD_StdEPReq+0x1f2>
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	2b80      	cmp	r3, #128	@ 0x80
 800c48e:	d004      	beq.n	800c49a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fbed 	bl	800cc72 <USBD_CtlError>
                break;
 800c498:	e091      	b.n	800c5be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c49a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da0b      	bge.n	800c4ba <USBD_StdEPReq+0x212>
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	3310      	adds	r3, #16
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	e00b      	b.n	800c4d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fc37 	bl	800cd54 <USBD_CtlSendData>
              break;
 800c4e6:	e06a      	b.n	800c5be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	da11      	bge.n	800c514 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	f003 020f 	and.w	r2, r3, #15
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	440b      	add	r3, r1
 800c502:	3324      	adds	r3, #36	@ 0x24
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d117      	bne.n	800c53a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fbb0 	bl	800cc72 <USBD_CtlError>
                  break;
 800c512:	e054      	b.n	800c5be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	f003 020f 	and.w	r2, r3, #15
 800c51a:	6879      	ldr	r1, [r7, #4]
 800c51c:	4613      	mov	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4413      	add	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	440b      	add	r3, r1
 800c526:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d104      	bne.n	800c53a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fb9d 	bl	800cc72 <USBD_CtlError>
                  break;
 800c538:	e041      	b.n	800c5be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c53a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	da0b      	bge.n	800c55a <USBD_StdEPReq+0x2b2>
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c548:	4613      	mov	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	3310      	adds	r3, #16
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	4413      	add	r3, r2
 800c556:	3304      	adds	r3, #4
 800c558:	e00b      	b.n	800c572 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	4413      	add	r3, r2
 800c570:	3304      	adds	r3, #4
 800c572:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <USBD_StdEPReq+0x2d8>
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	2b80      	cmp	r3, #128	@ 0x80
 800c57e:	d103      	bne.n	800c588 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	e00e      	b.n	800c5a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c588:	7bbb      	ldrb	r3, [r7, #14]
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f001 f8c3 	bl	800d718 <USBD_LL_IsStallEP>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2201      	movs	r2, #1
 800c59c:	601a      	str	r2, [r3, #0]
 800c59e:	e002      	b.n	800c5a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fbd1 	bl	800cd54 <USBD_CtlSendData>
              break;
 800c5b2:	e004      	b.n	800c5be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fb5b 	bl	800cc72 <USBD_CtlError>
              break;
 800c5bc:	bf00      	nop
          }
          break;
 800c5be:	e004      	b.n	800c5ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fb55 	bl	800cc72 <USBD_CtlError>
          break;
 800c5c8:	bf00      	nop
      }
      break;
 800c5ca:	e005      	b.n	800c5d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fb4f 	bl	800cc72 <USBD_CtlError>
      break;
 800c5d4:	e000      	b.n	800c5d8 <USBD_StdEPReq+0x330>
      break;
 800c5d6:	bf00      	nop
  }

  return ret;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	885b      	ldrh	r3, [r3, #2]
 800c5fe:	0a1b      	lsrs	r3, r3, #8
 800c600:	b29b      	uxth	r3, r3
 800c602:	3b01      	subs	r3, #1
 800c604:	2b06      	cmp	r3, #6
 800c606:	f200 8128 	bhi.w	800c85a <USBD_GetDescriptor+0x276>
 800c60a:	a201      	add	r2, pc, #4	@ (adr r2, 800c610 <USBD_GetDescriptor+0x2c>)
 800c60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c610:	0800c62d 	.word	0x0800c62d
 800c614:	0800c645 	.word	0x0800c645
 800c618:	0800c685 	.word	0x0800c685
 800c61c:	0800c85b 	.word	0x0800c85b
 800c620:	0800c85b 	.word	0x0800c85b
 800c624:	0800c7fb 	.word	0x0800c7fb
 800c628:	0800c827 	.word	0x0800c827
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	7c12      	ldrb	r2, [r2, #16]
 800c638:	f107 0108 	add.w	r1, r7, #8
 800c63c:	4610      	mov	r0, r2
 800c63e:	4798      	blx	r3
 800c640:	60f8      	str	r0, [r7, #12]
      break;
 800c642:	e112      	b.n	800c86a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	7c1b      	ldrb	r3, [r3, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10d      	bne.n	800c668 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c654:	f107 0208 	add.w	r2, r7, #8
 800c658:	4610      	mov	r0, r2
 800c65a:	4798      	blx	r3
 800c65c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3301      	adds	r3, #1
 800c662:	2202      	movs	r2, #2
 800c664:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c666:	e100      	b.n	800c86a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c670:	f107 0208 	add.w	r2, r7, #8
 800c674:	4610      	mov	r0, r2
 800c676:	4798      	blx	r3
 800c678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3301      	adds	r3, #1
 800c67e:	2202      	movs	r2, #2
 800c680:	701a      	strb	r2, [r3, #0]
      break;
 800c682:	e0f2      	b.n	800c86a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	885b      	ldrh	r3, [r3, #2]
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b05      	cmp	r3, #5
 800c68c:	f200 80ac 	bhi.w	800c7e8 <USBD_GetDescriptor+0x204>
 800c690:	a201      	add	r2, pc, #4	@ (adr r2, 800c698 <USBD_GetDescriptor+0xb4>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c6b1 	.word	0x0800c6b1
 800c69c:	0800c6e5 	.word	0x0800c6e5
 800c6a0:	0800c719 	.word	0x0800c719
 800c6a4:	0800c74d 	.word	0x0800c74d
 800c6a8:	0800c781 	.word	0x0800c781
 800c6ac:	0800c7b5 	.word	0x0800c7b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	7c12      	ldrb	r2, [r2, #16]
 800c6c8:	f107 0108 	add.w	r1, r7, #8
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	4798      	blx	r3
 800c6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6d2:	e091      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 facb 	bl	800cc72 <USBD_CtlError>
            err++;
 800c6dc:	7afb      	ldrb	r3, [r7, #11]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6e2:	e089      	b.n	800c7f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00b      	beq.n	800c708 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	7c12      	ldrb	r2, [r2, #16]
 800c6fc:	f107 0108 	add.w	r1, r7, #8
 800c700:	4610      	mov	r0, r2
 800c702:	4798      	blx	r3
 800c704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c706:	e077      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fab1 	bl	800cc72 <USBD_CtlError>
            err++;
 800c710:	7afb      	ldrb	r3, [r7, #11]
 800c712:	3301      	adds	r3, #1
 800c714:	72fb      	strb	r3, [r7, #11]
          break;
 800c716:	e06f      	b.n	800c7f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	7c12      	ldrb	r2, [r2, #16]
 800c730:	f107 0108 	add.w	r1, r7, #8
 800c734:	4610      	mov	r0, r2
 800c736:	4798      	blx	r3
 800c738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c73a:	e05d      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fa97 	bl	800cc72 <USBD_CtlError>
            err++;
 800c744:	7afb      	ldrb	r3, [r7, #11]
 800c746:	3301      	adds	r3, #1
 800c748:	72fb      	strb	r3, [r7, #11]
          break;
 800c74a:	e055      	b.n	800c7f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00b      	beq.n	800c770 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	7c12      	ldrb	r2, [r2, #16]
 800c764:	f107 0108 	add.w	r1, r7, #8
 800c768:	4610      	mov	r0, r2
 800c76a:	4798      	blx	r3
 800c76c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c76e:	e043      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fa7d 	bl	800cc72 <USBD_CtlError>
            err++;
 800c778:	7afb      	ldrb	r3, [r7, #11]
 800c77a:	3301      	adds	r3, #1
 800c77c:	72fb      	strb	r3, [r7, #11]
          break;
 800c77e:	e03b      	b.n	800c7f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00b      	beq.n	800c7a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	7c12      	ldrb	r2, [r2, #16]
 800c798:	f107 0108 	add.w	r1, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a2:	e029      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fa63 	bl	800cc72 <USBD_CtlError>
            err++;
 800c7ac:	7afb      	ldrb	r3, [r7, #11]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b2:	e021      	b.n	800c7f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00b      	beq.n	800c7d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	7c12      	ldrb	r2, [r2, #16]
 800c7cc:	f107 0108 	add.w	r1, r7, #8
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4798      	blx	r3
 800c7d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7d6:	e00f      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fa49 	bl	800cc72 <USBD_CtlError>
            err++;
 800c7e0:	7afb      	ldrb	r3, [r7, #11]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7e6:	e007      	b.n	800c7f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa41 	bl	800cc72 <USBD_CtlError>
          err++;
 800c7f0:	7afb      	ldrb	r3, [r7, #11]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7f6:	bf00      	nop
      }
      break;
 800c7f8:	e037      	b.n	800c86a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	7c1b      	ldrb	r3, [r3, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d109      	bne.n	800c816 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c80a:	f107 0208 	add.w	r2, r7, #8
 800c80e:	4610      	mov	r0, r2
 800c810:	4798      	blx	r3
 800c812:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c814:	e029      	b.n	800c86a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fa2a 	bl	800cc72 <USBD_CtlError>
        err++;
 800c81e:	7afb      	ldrb	r3, [r7, #11]
 800c820:	3301      	adds	r3, #1
 800c822:	72fb      	strb	r3, [r7, #11]
      break;
 800c824:	e021      	b.n	800c86a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7c1b      	ldrb	r3, [r3, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10d      	bne.n	800c84a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c836:	f107 0208 	add.w	r2, r7, #8
 800c83a:	4610      	mov	r0, r2
 800c83c:	4798      	blx	r3
 800c83e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3301      	adds	r3, #1
 800c844:	2207      	movs	r2, #7
 800c846:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c848:	e00f      	b.n	800c86a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fa10 	bl	800cc72 <USBD_CtlError>
        err++;
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	3301      	adds	r3, #1
 800c856:	72fb      	strb	r3, [r7, #11]
      break;
 800c858:	e007      	b.n	800c86a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fa08 	bl	800cc72 <USBD_CtlError>
      err++;
 800c862:	7afb      	ldrb	r3, [r7, #11]
 800c864:	3301      	adds	r3, #1
 800c866:	72fb      	strb	r3, [r7, #11]
      break;
 800c868:	bf00      	nop
  }

  if (err != 0U)
 800c86a:	7afb      	ldrb	r3, [r7, #11]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d11e      	bne.n	800c8ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	88db      	ldrh	r3, [r3, #6]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d016      	beq.n	800c8a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c878:	893b      	ldrh	r3, [r7, #8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00e      	beq.n	800c89c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	88da      	ldrh	r2, [r3, #6]
 800c882:	893b      	ldrh	r3, [r7, #8]
 800c884:	4293      	cmp	r3, r2
 800c886:	bf28      	it	cs
 800c888:	4613      	movcs	r3, r2
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c88e:	893b      	ldrh	r3, [r7, #8]
 800c890:	461a      	mov	r2, r3
 800c892:	68f9      	ldr	r1, [r7, #12]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fa5d 	bl	800cd54 <USBD_CtlSendData>
 800c89a:	e009      	b.n	800c8b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f9e7 	bl	800cc72 <USBD_CtlError>
 800c8a4:	e004      	b.n	800c8b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 faae 	bl	800ce08 <USBD_CtlSendStatus>
 800c8ac:	e000      	b.n	800c8b0 <USBD_GetDescriptor+0x2cc>
    return;
 800c8ae:	bf00      	nop
  }
}
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop

0800c8b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	889b      	ldrh	r3, [r3, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d131      	bne.n	800c92e <USBD_SetAddress+0x76>
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	88db      	ldrh	r3, [r3, #6]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d12d      	bne.n	800c92e <USBD_SetAddress+0x76>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	885b      	ldrh	r3, [r3, #2]
 800c8d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8d8:	d829      	bhi.n	800c92e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d104      	bne.n	800c8fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f9bc 	bl	800cc72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fa:	e01d      	b.n	800c938 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7bfa      	ldrb	r2, [r7, #15]
 800c900:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c904:	7bfb      	ldrb	r3, [r7, #15]
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 ff31 	bl	800d770 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fa7a 	bl	800ce08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d004      	beq.n	800c924 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2202      	movs	r2, #2
 800c91e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c922:	e009      	b.n	800c938 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c92c:	e004      	b.n	800c938 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f99e 	bl	800cc72 <USBD_CtlError>
  }
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	885b      	ldrh	r3, [r3, #2]
 800c952:	b2da      	uxtb	r2, r3
 800c954:	4b4e      	ldr	r3, [pc, #312]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c956:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c958:	4b4d      	ldr	r3, [pc, #308]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d905      	bls.n	800c96c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f985 	bl	800cc72 <USBD_CtlError>
    return USBD_FAIL;
 800c968:	2303      	movs	r3, #3
 800c96a:	e08c      	b.n	800ca86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b02      	cmp	r3, #2
 800c976:	d002      	beq.n	800c97e <USBD_SetConfig+0x3e>
 800c978:	2b03      	cmp	r3, #3
 800c97a:	d029      	beq.n	800c9d0 <USBD_SetConfig+0x90>
 800c97c:	e075      	b.n	800ca6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c97e:	4b44      	ldr	r3, [pc, #272]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d020      	beq.n	800c9c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c986:	4b42      	ldr	r3, [pc, #264]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c990:	4b3f      	ldr	r3, [pc, #252]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7fe ffe3 	bl	800b962 <USBD_SetClassConfig>
 800c99c:	4603      	mov	r3, r0
 800c99e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d008      	beq.n	800c9b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f962 	bl	800cc72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9b6:	e065      	b.n	800ca84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fa25 	bl	800ce08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2203      	movs	r2, #3
 800c9c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c9c6:	e05d      	b.n	800ca84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fa1d 	bl	800ce08 <USBD_CtlSendStatus>
      break;
 800c9ce:	e059      	b.n	800ca84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c9d0:	4b2f      	ldr	r3, [pc, #188]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d112      	bne.n	800c9fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2202      	movs	r2, #2
 800c9dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c9e0:	4b2b      	ldr	r3, [pc, #172]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9ea:	4b29      	ldr	r3, [pc, #164]	@ (800ca90 <USBD_SetConfig+0x150>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7fe ffd2 	bl	800b99a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa06 	bl	800ce08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9fc:	e042      	b.n	800ca84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c9fe:	4b24      	ldr	r3, [pc, #144]	@ (800ca90 <USBD_SetConfig+0x150>)
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d02a      	beq.n	800ca62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7fe ffc0 	bl	800b99a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ca90 <USBD_SetConfig+0x150>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca24:	4b1a      	ldr	r3, [pc, #104]	@ (800ca90 <USBD_SetConfig+0x150>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7fe ff99 	bl	800b962 <USBD_SetClassConfig>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00f      	beq.n	800ca5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f918 	bl	800cc72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7fe ffa5 	bl	800b99a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2202      	movs	r2, #2
 800ca54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca58:	e014      	b.n	800ca84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f9d4 	bl	800ce08 <USBD_CtlSendStatus>
      break;
 800ca60:	e010      	b.n	800ca84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f9d0 	bl	800ce08 <USBD_CtlSendStatus>
      break;
 800ca68:	e00c      	b.n	800ca84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f900 	bl	800cc72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca72:	4b07      	ldr	r3, [pc, #28]	@ (800ca90 <USBD_SetConfig+0x150>)
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7fe ff8e 	bl	800b99a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	73fb      	strb	r3, [r7, #15]
      break;
 800ca82:	bf00      	nop
  }

  return ret;
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000534 	.word	0x20000534

0800ca94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	88db      	ldrh	r3, [r3, #6]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d004      	beq.n	800cab0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f8e2 	bl	800cc72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800caae:	e023      	b.n	800caf8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	2b02      	cmp	r3, #2
 800caba:	dc02      	bgt.n	800cac2 <USBD_GetConfig+0x2e>
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dc03      	bgt.n	800cac8 <USBD_GetConfig+0x34>
 800cac0:	e015      	b.n	800caee <USBD_GetConfig+0x5a>
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d00b      	beq.n	800cade <USBD_GetConfig+0x4a>
 800cac6:	e012      	b.n	800caee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	3308      	adds	r3, #8
 800cad2:	2201      	movs	r2, #1
 800cad4:	4619      	mov	r1, r3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f93c 	bl	800cd54 <USBD_CtlSendData>
        break;
 800cadc:	e00c      	b.n	800caf8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3304      	adds	r3, #4
 800cae2:	2201      	movs	r2, #1
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f934 	bl	800cd54 <USBD_CtlSendData>
        break;
 800caec:	e004      	b.n	800caf8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f8be 	bl	800cc72 <USBD_CtlError>
        break;
 800caf6:	bf00      	nop
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	3b01      	subs	r3, #1
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d81e      	bhi.n	800cb56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	88db      	ldrh	r3, [r3, #6]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d004      	beq.n	800cb2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f8a5 	bl	800cc72 <USBD_CtlError>
        break;
 800cb28:	e01a      	b.n	800cb60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f043 0202 	orr.w	r2, r3, #2
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	330c      	adds	r3, #12
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f900 	bl	800cd54 <USBD_CtlSendData>
      break;
 800cb54:	e004      	b.n	800cb60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f88a 	bl	800cc72 <USBD_CtlError>
      break;
 800cb5e:	bf00      	nop
  }
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	885b      	ldrh	r3, [r3, #2]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d107      	bne.n	800cb8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f940 	bl	800ce08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb88:	e013      	b.n	800cbb2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	885b      	ldrh	r3, [r3, #2]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d10b      	bne.n	800cbaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	889b      	ldrh	r3, [r3, #4]
 800cb96:	0a1b      	lsrs	r3, r3, #8
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f930 	bl	800ce08 <USBD_CtlSendStatus>
}
 800cba8:	e003      	b.n	800cbb2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f860 	bl	800cc72 <USBD_CtlError>
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d80b      	bhi.n	800cbea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	885b      	ldrh	r3, [r3, #2]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d10c      	bne.n	800cbf4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f910 	bl	800ce08 <USBD_CtlSendStatus>
      }
      break;
 800cbe8:	e004      	b.n	800cbf4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f840 	bl	800cc72 <USBD_CtlError>
      break;
 800cbf2:	e000      	b.n	800cbf6 <USBD_ClrFeature+0x3c>
      break;
 800cbf4:	bf00      	nop
  }
}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b084      	sub	sp, #16
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	781a      	ldrb	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3301      	adds	r3, #1
 800cc18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	781a      	ldrb	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3301      	adds	r3, #1
 800cc26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7ff fa40 	bl	800c0ae <SWAPBYTE>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	461a      	mov	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f7ff fa33 	bl	800c0ae <SWAPBYTE>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3301      	adds	r3, #1
 800cc54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f7ff fa26 	bl	800c0ae <SWAPBYTE>
 800cc62:	4603      	mov	r3, r0
 800cc64:	461a      	mov	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	80da      	strh	r2, [r3, #6]
}
 800cc6a:	bf00      	nop
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc7c:	2180      	movs	r1, #128	@ 0x80
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fd0c 	bl	800d69c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc84:	2100      	movs	r1, #0
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fd08 	bl	800d69c <USBD_LL_StallEP>
}
 800cc8c:	bf00      	nop
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cca0:	2300      	movs	r3, #0
 800cca2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d036      	beq.n	800cd18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ccae:	6938      	ldr	r0, [r7, #16]
 800ccb0:	f000 f836 	bl	800cd20 <USBD_GetLen>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	005b      	lsls	r3, r3, #1
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ccc2:	7dfb      	ldrb	r3, [r7, #23]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	7812      	ldrb	r2, [r2, #0]
 800cccc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	4413      	add	r3, r2
 800ccda:	2203      	movs	r2, #3
 800ccdc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	3301      	adds	r3, #1
 800cce2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cce4:	e013      	b.n	800cd0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	4413      	add	r3, r2
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	7812      	ldrb	r2, [r2, #0]
 800ccf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	613b      	str	r3, [r7, #16]
    idx++;
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	4413      	add	r3, r2
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e7      	bne.n	800cce6 <USBD_GetString+0x52>
 800cd16:	e000      	b.n	800cd1a <USBD_GetString+0x86>
    return;
 800cd18:	bf00      	nop
  }
}
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd30:	e005      	b.n	800cd3e <USBD_GetLen+0x1e>
  {
    len++;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	3301      	adds	r3, #1
 800cd36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1f5      	bne.n	800cd32 <USBD_GetLen+0x12>
  }

  return len;
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	2100      	movs	r1, #0
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f000 fd17 	bl	800d7ae <USBD_LL_Transmit>

  return USBD_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b084      	sub	sp, #16
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68ba      	ldr	r2, [r7, #8]
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 fd06 	bl	800d7ae <USBD_LL_Transmit>

  return USBD_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f000 fd0a 	bl	800d7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 fcf9 	bl	800d7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3710      	adds	r7, #16
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2204      	movs	r2, #4
 800ce14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fcc5 	bl	800d7ae <USBD_LL_Transmit>

  return USBD_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2205      	movs	r2, #5
 800ce3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce3e:	2300      	movs	r3, #0
 800ce40:	2200      	movs	r2, #0
 800ce42:	2100      	movs	r1, #0
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fcd3 	bl	800d7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b087      	sub	sp, #28
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce62:	2301      	movs	r3, #1
 800ce64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce6a:	4b1f      	ldr	r3, [pc, #124]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce6c:	7a5b      	ldrb	r3, [r3, #9]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d131      	bne.n	800ced8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce74:	4b1c      	ldr	r3, [pc, #112]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce76:	7a5b      	ldrb	r3, [r3, #9]
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce7e:	2100      	movs	r1, #0
 800ce80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce82:	4b19      	ldr	r3, [pc, #100]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce84:	7a5b      	ldrb	r3, [r3, #9]
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	4a17      	ldr	r2, [pc, #92]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce92:	4b15      	ldr	r3, [pc, #84]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce94:	7a5b      	ldrb	r3, [r3, #9]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	461a      	mov	r2, r3
 800ce9a:	4b13      	ldr	r3, [pc, #76]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ce9c:	4413      	add	r3, r2
 800ce9e:	79fa      	ldrb	r2, [r7, #7]
 800cea0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cea2:	4b11      	ldr	r3, [pc, #68]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800cea4:	7a5b      	ldrb	r3, [r3, #9]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	1c5a      	adds	r2, r3, #1
 800ceaa:	b2d1      	uxtb	r1, r2
 800ceac:	4a0e      	ldr	r2, [pc, #56]	@ (800cee8 <FATFS_LinkDriverEx+0x94>)
 800ceae:	7251      	strb	r1, [r2, #9]
 800ceb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ceb2:	7dbb      	ldrb	r3, [r7, #22]
 800ceb4:	3330      	adds	r3, #48	@ 0x30
 800ceb6:	b2da      	uxtb	r2, r3
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	3301      	adds	r3, #1
 800cec0:	223a      	movs	r2, #58	@ 0x3a
 800cec2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	3302      	adds	r3, #2
 800cec8:	222f      	movs	r2, #47	@ 0x2f
 800ceca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	3303      	adds	r3, #3
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	371c      	adds	r7, #28
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	20000538 	.word	0x20000538

0800ceec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cef6:	2200      	movs	r2, #0
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff ffaa 	bl	800ce54 <FATFS_LinkDriverEx>
 800cf00:	4603      	mov	r3, r0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf10:	2200      	movs	r2, #0
 800cf12:	4912      	ldr	r1, [pc, #72]	@ (800cf5c <MX_USB_DEVICE_Init+0x50>)
 800cf14:	4812      	ldr	r0, [pc, #72]	@ (800cf60 <MX_USB_DEVICE_Init+0x54>)
 800cf16:	f7fe fca7 	bl	800b868 <USBD_Init>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf20:	f7f3 fd9e 	bl	8000a60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf24:	490f      	ldr	r1, [pc, #60]	@ (800cf64 <MX_USB_DEVICE_Init+0x58>)
 800cf26:	480e      	ldr	r0, [pc, #56]	@ (800cf60 <MX_USB_DEVICE_Init+0x54>)
 800cf28:	f7fe fcce 	bl	800b8c8 <USBD_RegisterClass>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf32:	f7f3 fd95 	bl	8000a60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf36:	490c      	ldr	r1, [pc, #48]	@ (800cf68 <MX_USB_DEVICE_Init+0x5c>)
 800cf38:	4809      	ldr	r0, [pc, #36]	@ (800cf60 <MX_USB_DEVICE_Init+0x54>)
 800cf3a:	f7fe fc05 	bl	800b748 <USBD_CDC_RegisterInterface>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf44:	f7f3 fd8c 	bl	8000a60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf48:	4805      	ldr	r0, [pc, #20]	@ (800cf60 <MX_USB_DEVICE_Init+0x54>)
 800cf4a:	f7fe fcf3 	bl	800b934 <USBD_Start>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf54:	f7f3 fd84 	bl	8000a60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf58:	bf00      	nop
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	200000ac 	.word	0x200000ac
 800cf60:	20000544 	.word	0x20000544
 800cf64:	20000018 	.word	0x20000018
 800cf68:	20000098 	.word	0x20000098

0800cf6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf70:	2200      	movs	r2, #0
 800cf72:	4905      	ldr	r1, [pc, #20]	@ (800cf88 <CDC_Init_FS+0x1c>)
 800cf74:	4805      	ldr	r0, [pc, #20]	@ (800cf8c <CDC_Init_FS+0x20>)
 800cf76:	f7fe fc01 	bl	800b77c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf7a:	4905      	ldr	r1, [pc, #20]	@ (800cf90 <CDC_Init_FS+0x24>)
 800cf7c:	4803      	ldr	r0, [pc, #12]	@ (800cf8c <CDC_Init_FS+0x20>)
 800cf7e:	f7fe fc1f 	bl	800b7c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	20000c20 	.word	0x20000c20
 800cf8c:	20000544 	.word	0x20000544
 800cf90:	20000820 	.word	0x20000820

0800cf94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	6039      	str	r1, [r7, #0]
 800cfae:	71fb      	strb	r3, [r7, #7]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cfb4:	79fb      	ldrb	r3, [r7, #7]
 800cfb6:	2b23      	cmp	r3, #35	@ 0x23
 800cfb8:	d84a      	bhi.n	800d050 <CDC_Control_FS+0xac>
 800cfba:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc0 <CDC_Control_FS+0x1c>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800d051 	.word	0x0800d051
 800cfc4:	0800d051 	.word	0x0800d051
 800cfc8:	0800d051 	.word	0x0800d051
 800cfcc:	0800d051 	.word	0x0800d051
 800cfd0:	0800d051 	.word	0x0800d051
 800cfd4:	0800d051 	.word	0x0800d051
 800cfd8:	0800d051 	.word	0x0800d051
 800cfdc:	0800d051 	.word	0x0800d051
 800cfe0:	0800d051 	.word	0x0800d051
 800cfe4:	0800d051 	.word	0x0800d051
 800cfe8:	0800d051 	.word	0x0800d051
 800cfec:	0800d051 	.word	0x0800d051
 800cff0:	0800d051 	.word	0x0800d051
 800cff4:	0800d051 	.word	0x0800d051
 800cff8:	0800d051 	.word	0x0800d051
 800cffc:	0800d051 	.word	0x0800d051
 800d000:	0800d051 	.word	0x0800d051
 800d004:	0800d051 	.word	0x0800d051
 800d008:	0800d051 	.word	0x0800d051
 800d00c:	0800d051 	.word	0x0800d051
 800d010:	0800d051 	.word	0x0800d051
 800d014:	0800d051 	.word	0x0800d051
 800d018:	0800d051 	.word	0x0800d051
 800d01c:	0800d051 	.word	0x0800d051
 800d020:	0800d051 	.word	0x0800d051
 800d024:	0800d051 	.word	0x0800d051
 800d028:	0800d051 	.word	0x0800d051
 800d02c:	0800d051 	.word	0x0800d051
 800d030:	0800d051 	.word	0x0800d051
 800d034:	0800d051 	.word	0x0800d051
 800d038:	0800d051 	.word	0x0800d051
 800d03c:	0800d051 	.word	0x0800d051
 800d040:	0800d051 	.word	0x0800d051
 800d044:	0800d051 	.word	0x0800d051
 800d048:	0800d051 	.word	0x0800d051
 800d04c:	0800d051 	.word	0x0800d051
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d050:	bf00      	nop
  }

  return (USBD_OK);
 800d052:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d054:	4618      	mov	r0, r3
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	4805      	ldr	r0, [pc, #20]	@ (800d084 <CDC_Receive_FS+0x24>)
 800d06e:	f7fe fba7 	bl	800b7c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d072:	4804      	ldr	r0, [pc, #16]	@ (800d084 <CDC_Receive_FS+0x24>)
 800d074:	f7fe fbc2 	bl	800b7fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d078:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000544 	.word	0x20000544

0800d088 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d088:	b480      	push	{r7}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	4613      	mov	r3, r2
 800d094:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	371c      	adds	r7, #28
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
	...

0800d0ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	6039      	str	r1, [r7, #0]
 800d0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2212      	movs	r2, #18
 800d0bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0be:	4b03      	ldr	r3, [pc, #12]	@ (800d0cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	200000c8 	.word	0x200000c8

0800d0d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	6039      	str	r1, [r7, #0]
 800d0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2204      	movs	r2, #4
 800d0e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0e2:	4b03      	ldr	r3, [pc, #12]	@ (800d0f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	200000dc 	.word	0x200000dc

0800d0f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	6039      	str	r1, [r7, #0]
 800d0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d105      	bne.n	800d112 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	4907      	ldr	r1, [pc, #28]	@ (800d128 <USBD_FS_ProductStrDescriptor+0x34>)
 800d10a:	4808      	ldr	r0, [pc, #32]	@ (800d12c <USBD_FS_ProductStrDescriptor+0x38>)
 800d10c:	f7ff fdc2 	bl	800cc94 <USBD_GetString>
 800d110:	e004      	b.n	800d11c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	4904      	ldr	r1, [pc, #16]	@ (800d128 <USBD_FS_ProductStrDescriptor+0x34>)
 800d116:	4805      	ldr	r0, [pc, #20]	@ (800d12c <USBD_FS_ProductStrDescriptor+0x38>)
 800d118:	f7ff fdbc 	bl	800cc94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d11c:	4b02      	ldr	r3, [pc, #8]	@ (800d128 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20001020 	.word	0x20001020
 800d12c:	0800d950 	.word	0x0800d950

0800d130 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	6039      	str	r1, [r7, #0]
 800d13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	4904      	ldr	r1, [pc, #16]	@ (800d150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d140:	4804      	ldr	r0, [pc, #16]	@ (800d154 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d142:	f7ff fda7 	bl	800cc94 <USBD_GetString>
  return USBD_StrDesc;
 800d146:	4b02      	ldr	r3, [pc, #8]	@ (800d150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	20001020 	.word	0x20001020
 800d154:	0800d968 	.word	0x0800d968

0800d158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	6039      	str	r1, [r7, #0]
 800d162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	221a      	movs	r2, #26
 800d168:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d16a:	f000 f843 	bl	800d1f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d16e:	4b02      	ldr	r3, [pc, #8]	@ (800d178 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	200000e0 	.word	0x200000e0

0800d17c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	6039      	str	r1, [r7, #0]
 800d186:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d188:	79fb      	ldrb	r3, [r7, #7]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d105      	bne.n	800d19a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	4907      	ldr	r1, [pc, #28]	@ (800d1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d192:	4808      	ldr	r0, [pc, #32]	@ (800d1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d194:	f7ff fd7e 	bl	800cc94 <USBD_GetString>
 800d198:	e004      	b.n	800d1a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d19a:	683a      	ldr	r2, [r7, #0]
 800d19c:	4904      	ldr	r1, [pc, #16]	@ (800d1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d19e:	4805      	ldr	r0, [pc, #20]	@ (800d1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1a0:	f7ff fd78 	bl	800cc94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1a4:	4b02      	ldr	r3, [pc, #8]	@ (800d1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20001020 	.word	0x20001020
 800d1b4:	0800d97c 	.word	0x0800d97c

0800d1b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	4603      	mov	r3, r0
 800d1c0:	6039      	str	r1, [r7, #0]
 800d1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d105      	bne.n	800d1d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	4907      	ldr	r1, [pc, #28]	@ (800d1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1ce:	4808      	ldr	r0, [pc, #32]	@ (800d1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1d0:	f7ff fd60 	bl	800cc94 <USBD_GetString>
 800d1d4:	e004      	b.n	800d1e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	4904      	ldr	r1, [pc, #16]	@ (800d1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1da:	4805      	ldr	r0, [pc, #20]	@ (800d1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1dc:	f7ff fd5a 	bl	800cc94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1e0:	4b02      	ldr	r3, [pc, #8]	@ (800d1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20001020 	.word	0x20001020
 800d1f0:	0800d988 	.word	0x0800d988

0800d1f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1fa:	4b0f      	ldr	r3, [pc, #60]	@ (800d238 <Get_SerialNum+0x44>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d200:	4b0e      	ldr	r3, [pc, #56]	@ (800d23c <Get_SerialNum+0x48>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d206:	4b0e      	ldr	r3, [pc, #56]	@ (800d240 <Get_SerialNum+0x4c>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d009      	beq.n	800d22e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d21a:	2208      	movs	r2, #8
 800d21c:	4909      	ldr	r1, [pc, #36]	@ (800d244 <Get_SerialNum+0x50>)
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 f814 	bl	800d24c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d224:	2204      	movs	r2, #4
 800d226:	4908      	ldr	r1, [pc, #32]	@ (800d248 <Get_SerialNum+0x54>)
 800d228:	68b8      	ldr	r0, [r7, #8]
 800d22a:	f000 f80f 	bl	800d24c <IntToUnicode>
  }
}
 800d22e:	bf00      	nop
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	1fff7a10 	.word	0x1fff7a10
 800d23c:	1fff7a14 	.word	0x1fff7a14
 800d240:	1fff7a18 	.word	0x1fff7a18
 800d244:	200000e2 	.word	0x200000e2
 800d248:	200000f2 	.word	0x200000f2

0800d24c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d25e:	2300      	movs	r3, #0
 800d260:	75fb      	strb	r3, [r7, #23]
 800d262:	e027      	b.n	800d2b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	0f1b      	lsrs	r3, r3, #28
 800d268:	2b09      	cmp	r3, #9
 800d26a:	d80b      	bhi.n	800d284 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	0f1b      	lsrs	r3, r3, #28
 800d270:	b2da      	uxtb	r2, r3
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	4619      	mov	r1, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	440b      	add	r3, r1
 800d27c:	3230      	adds	r2, #48	@ 0x30
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	e00a      	b.n	800d29a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	0f1b      	lsrs	r3, r3, #28
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4619      	mov	r1, r3
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	440b      	add	r3, r1
 800d294:	3237      	adds	r2, #55	@ 0x37
 800d296:	b2d2      	uxtb	r2, r2
 800d298:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	011b      	lsls	r3, r3, #4
 800d29e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	75fb      	strb	r3, [r7, #23]
 800d2b4:	7dfa      	ldrb	r2, [r7, #23]
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d3d3      	bcc.n	800d264 <IntToUnicode+0x18>
  }
}
 800d2bc:	bf00      	nop
 800d2be:	bf00      	nop
 800d2c0:	371c      	adds	r7, #28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
	...

0800d2cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08a      	sub	sp, #40	@ 0x28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2d4:	f107 0314 	add.w	r3, r7, #20
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	605a      	str	r2, [r3, #4]
 800d2de:	609a      	str	r2, [r3, #8]
 800d2e0:	60da      	str	r2, [r3, #12]
 800d2e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2ec:	d13a      	bne.n	800d364 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2f6:	4a1d      	ldr	r2, [pc, #116]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d2f8:	f043 0301 	orr.w	r3, r3, #1
 800d2fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d302:	f003 0301 	and.w	r3, r3, #1
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = UsbM_Pin|UsbP_Pin;
 800d30a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d30e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d310:	2302      	movs	r3, #2
 800d312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d314:	2300      	movs	r3, #0
 800d316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d318:	2303      	movs	r3, #3
 800d31a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d31c:	230a      	movs	r3, #10
 800d31e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d320:	f107 0314 	add.w	r3, r7, #20
 800d324:	4619      	mov	r1, r3
 800d326:	4812      	ldr	r0, [pc, #72]	@ (800d370 <HAL_PCD_MspInit+0xa4>)
 800d328:	f7f5 fa8e 	bl	8002848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d32c:	4b0f      	ldr	r3, [pc, #60]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d330:	4a0e      	ldr	r2, [pc, #56]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d336:	6353      	str	r3, [r2, #52]	@ 0x34
 800d338:	2300      	movs	r3, #0
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	4b0b      	ldr	r3, [pc, #44]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d33e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d340:	4a0a      	ldr	r2, [pc, #40]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d346:	6453      	str	r3, [r2, #68]	@ 0x44
 800d348:	4b08      	ldr	r3, [pc, #32]	@ (800d36c <HAL_PCD_MspInit+0xa0>)
 800d34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d34c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d350:	60fb      	str	r3, [r7, #12]
 800d352:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d354:	2200      	movs	r2, #0
 800d356:	2100      	movs	r1, #0
 800d358:	2043      	movs	r0, #67	@ 0x43
 800d35a:	f7f4 fe30 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d35e:	2043      	movs	r0, #67	@ 0x43
 800d360:	f7f4 fe49 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d364:	bf00      	nop
 800d366:	3728      	adds	r7, #40	@ 0x28
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	40023800 	.word	0x40023800
 800d370:	40020000 	.word	0x40020000

0800d374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fe fb1f 	bl	800b9ce <USBD_LL_SetupStage>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d3aa:	78fa      	ldrb	r2, [r7, #3]
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	4413      	add	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	440b      	add	r3, r1
 800d3b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	78fb      	ldrb	r3, [r7, #3]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	f7fe fb59 	bl	800ba78 <USBD_LL_DataOutStage>
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d3e0:	78fa      	ldrb	r2, [r7, #3]
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	440b      	add	r3, r1
 800d3ee:	3320      	adds	r3, #32
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	78fb      	ldrb	r3, [r7, #3]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	f7fe fbf2 	bl	800bbde <USBD_LL_DataInStage>
}
 800d3fa:	bf00      	nop
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b082      	sub	sp, #8
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe fd2c 	bl	800be6e <USBD_LL_SOF>
}
 800d416:	bf00      	nop
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b084      	sub	sp, #16
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d426:	2301      	movs	r3, #1
 800d428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	79db      	ldrb	r3, [r3, #7]
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d001      	beq.n	800d436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d432:	f7f3 fb15 	bl	8000a60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d43c:	7bfa      	ldrb	r2, [r7, #15]
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe fcd0 	bl	800bde6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fe fc78 	bl	800bd42 <USBD_LL_Reset>
}
 800d452:	bf00      	nop
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe fccb 	bl	800be06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6812      	ldr	r2, [r2, #0]
 800d47e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7adb      	ldrb	r3, [r3, #11]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d490:	4b04      	ldr	r3, [pc, #16]	@ (800d4a4 <HAL_PCD_SuspendCallback+0x48>)
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	4a03      	ldr	r2, [pc, #12]	@ (800d4a4 <HAL_PCD_SuspendCallback+0x48>)
 800d496:	f043 0306 	orr.w	r3, r3, #6
 800d49a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	e000ed00 	.word	0xe000ed00

0800d4a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe fcc1 	bl	800be3e <USBD_LL_Resume>
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4d6:	78fa      	ldrb	r2, [r7, #3]
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fd19 	bl	800bf12 <USBD_LL_IsoOUTIncomplete>
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4fa:	78fa      	ldrb	r2, [r7, #3]
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fcd5 	bl	800beae <USBD_LL_IsoINIncomplete>
}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fd2b 	bl	800bf76 <USBD_LL_DevConnected>
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe fd28 	bl	800bf8c <USBD_LL_DevDisconnected>
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d13c      	bne.n	800d5ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d554:	4a20      	ldr	r2, [pc, #128]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d560:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d564:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d566:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d56a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d56c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d56e:	2204      	movs	r2, #4
 800d570:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d572:	4b19      	ldr	r3, [pc, #100]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d574:	2202      	movs	r2, #2
 800d576:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d578:	4b17      	ldr	r3, [pc, #92]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d57e:	4b16      	ldr	r3, [pc, #88]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d580:	2202      	movs	r2, #2
 800d582:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d584:	4b14      	ldr	r3, [pc, #80]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d586:	2200      	movs	r2, #0
 800d588:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d58a:	4b13      	ldr	r3, [pc, #76]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d590:	4b11      	ldr	r3, [pc, #68]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d592:	2200      	movs	r2, #0
 800d594:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d596:	4b10      	ldr	r3, [pc, #64]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d598:	2200      	movs	r2, #0
 800d59a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d59c:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d5a2:	480d      	ldr	r0, [pc, #52]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5a4:	f7f5 fc4a 	bl	8002e3c <HAL_PCD_Init>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d5ae:	f7f3 fa57 	bl	8000a60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d5b2:	2180      	movs	r1, #128	@ 0x80
 800d5b4:	4808      	ldr	r0, [pc, #32]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5b6:	f7f6 fe74 	bl	80042a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d5ba:	2240      	movs	r2, #64	@ 0x40
 800d5bc:	2100      	movs	r1, #0
 800d5be:	4806      	ldr	r0, [pc, #24]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5c0:	f7f6 fe28 	bl	8004214 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d5c4:	2280      	movs	r2, #128	@ 0x80
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	4803      	ldr	r0, [pc, #12]	@ (800d5d8 <USBD_LL_Init+0x94>)
 800d5ca:	f7f6 fe23 	bl	8004214 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20001220 	.word	0x20001220

0800d5dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f5 fd31 	bl	800305a <HAL_PCD_Start>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 f942 	bl	800d888 <USBD_Get_USB_Status>
 800d604:	4603      	mov	r3, r0
 800d606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d608:	7bbb      	ldrb	r3, [r7, #14]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	4608      	mov	r0, r1
 800d61c:	4611      	mov	r1, r2
 800d61e:	461a      	mov	r2, r3
 800d620:	4603      	mov	r3, r0
 800d622:	70fb      	strb	r3, [r7, #3]
 800d624:	460b      	mov	r3, r1
 800d626:	70bb      	strb	r3, [r7, #2]
 800d628:	4613      	mov	r3, r2
 800d62a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d63a:	78bb      	ldrb	r3, [r7, #2]
 800d63c:	883a      	ldrh	r2, [r7, #0]
 800d63e:	78f9      	ldrb	r1, [r7, #3]
 800d640:	f7f6 fa05 	bl	8003a4e <HAL_PCD_EP_Open>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 f91c 	bl	800d888 <USBD_Get_USB_Status>
 800d650:	4603      	mov	r3, r0
 800d652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d654:	7bbb      	ldrb	r3, [r7, #14]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	460b      	mov	r3, r1
 800d668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d678:	78fa      	ldrb	r2, [r7, #3]
 800d67a:	4611      	mov	r1, r2
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7f6 fa4e 	bl	8003b1e <HAL_PCD_EP_Close>
 800d682:	4603      	mov	r3, r0
 800d684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 f8fd 	bl	800d888 <USBD_Get_USB_Status>
 800d68e:	4603      	mov	r3, r0
 800d690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d692:	7bbb      	ldrb	r3, [r7, #14]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6b6:	78fa      	ldrb	r2, [r7, #3]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f6 fb06 	bl	8003ccc <HAL_PCD_EP_SetStall>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c4:	7bfb      	ldrb	r3, [r7, #15]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 f8de 	bl	800d888 <USBD_Get_USB_Status>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6f4:	78fa      	ldrb	r2, [r7, #3]
 800d6f6:	4611      	mov	r1, r2
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7f6 fb4a 	bl	8003d92 <HAL_PCD_EP_ClrStall>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	4618      	mov	r0, r3
 800d706:	f000 f8bf 	bl	800d888 <USBD_Get_USB_Status>
 800d70a:	4603      	mov	r3, r0
 800d70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d72a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d72c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d730:	2b00      	cmp	r3, #0
 800d732:	da0b      	bge.n	800d74c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d734:	78fb      	ldrb	r3, [r7, #3]
 800d736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d73a:	68f9      	ldr	r1, [r7, #12]
 800d73c:	4613      	mov	r3, r2
 800d73e:	00db      	lsls	r3, r3, #3
 800d740:	4413      	add	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	440b      	add	r3, r1
 800d746:	3316      	adds	r3, #22
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	e00b      	b.n	800d764 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d752:	68f9      	ldr	r1, [r7, #12]
 800d754:	4613      	mov	r3, r2
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	440b      	add	r3, r1
 800d75e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d762:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d78a:	78fa      	ldrb	r2, [r7, #3]
 800d78c:	4611      	mov	r1, r2
 800d78e:	4618      	mov	r0, r3
 800d790:	f7f6 f939 	bl	8003a06 <HAL_PCD_SetAddress>
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 f874 	bl	800d888 <USBD_Get_USB_Status>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b086      	sub	sp, #24
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7cc:	7af9      	ldrb	r1, [r7, #11]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	f7f6 fa41 	bl	8003c58 <HAL_PCD_EP_Transmit>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f853 	bl	800d888 <USBD_Get_USB_Status>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	607a      	str	r2, [r7, #4]
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d800:	2300      	movs	r3, #0
 800d802:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d80e:	7af9      	ldrb	r1, [r7, #11]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	f7f6 f9cd 	bl	8003bb2 <HAL_PCD_EP_Receive>
 800d818:	4603      	mov	r3, r0
 800d81a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d81c:	7dfb      	ldrb	r3, [r7, #23]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f832 	bl	800d888 <USBD_Get_USB_Status>
 800d824:	4603      	mov	r3, r0
 800d826:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d828:	7dbb      	ldrb	r3, [r7, #22]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	460b      	mov	r3, r1
 800d83c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d844:	78fa      	ldrb	r2, [r7, #3]
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f6 f9ed 	bl	8003c28 <HAL_PCD_EP_GetRxCount>
 800d84e:	4603      	mov	r3, r0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d860:	4b03      	ldr	r3, [pc, #12]	@ (800d870 <USBD_static_malloc+0x18>)
}
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	20001704 	.word	0x20001704

0800d874 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]

}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d817      	bhi.n	800d8cc <USBD_Get_USB_Status+0x44>
 800d89c:	a201      	add	r2, pc, #4	@ (adr r2, 800d8a4 <USBD_Get_USB_Status+0x1c>)
 800d89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a2:	bf00      	nop
 800d8a4:	0800d8b5 	.word	0x0800d8b5
 800d8a8:	0800d8bb 	.word	0x0800d8bb
 800d8ac:	0800d8c1 	.word	0x0800d8c1
 800d8b0:	0800d8c7 	.word	0x0800d8c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b8:	e00b      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8be:	e008      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c4:	e005      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ca:	e002      	b.n	800d8d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d0:	bf00      	nop
  }
  return usb_status;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <memset>:
 800d8e0:	4402      	add	r2, r0
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d100      	bne.n	800d8ea <memset+0xa>
 800d8e8:	4770      	bx	lr
 800d8ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d8ee:	e7f9      	b.n	800d8e4 <memset+0x4>

0800d8f0 <__libc_init_array>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d928 <__libc_init_array+0x38>)
 800d8f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d92c <__libc_init_array+0x3c>)
 800d8f6:	1b64      	subs	r4, r4, r5
 800d8f8:	10a4      	asrs	r4, r4, #2
 800d8fa:	2600      	movs	r6, #0
 800d8fc:	42a6      	cmp	r6, r4
 800d8fe:	d109      	bne.n	800d914 <__libc_init_array+0x24>
 800d900:	4d0b      	ldr	r5, [pc, #44]	@ (800d930 <__libc_init_array+0x40>)
 800d902:	4c0c      	ldr	r4, [pc, #48]	@ (800d934 <__libc_init_array+0x44>)
 800d904:	f000 f818 	bl	800d938 <_init>
 800d908:	1b64      	subs	r4, r4, r5
 800d90a:	10a4      	asrs	r4, r4, #2
 800d90c:	2600      	movs	r6, #0
 800d90e:	42a6      	cmp	r6, r4
 800d910:	d105      	bne.n	800d91e <__libc_init_array+0x2e>
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	f855 3b04 	ldr.w	r3, [r5], #4
 800d918:	4798      	blx	r3
 800d91a:	3601      	adds	r6, #1
 800d91c:	e7ee      	b.n	800d8fc <__libc_init_array+0xc>
 800d91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d922:	4798      	blx	r3
 800d924:	3601      	adds	r6, #1
 800d926:	e7f2      	b.n	800d90e <__libc_init_array+0x1e>
 800d928:	0800d9d4 	.word	0x0800d9d4
 800d92c:	0800d9d4 	.word	0x0800d9d4
 800d930:	0800d9d4 	.word	0x0800d9d4
 800d934:	0800d9d8 	.word	0x0800d9d8

0800d938 <_init>:
 800d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93a:	bf00      	nop
 800d93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d93e:	bc08      	pop	{r3}
 800d940:	469e      	mov	lr, r3
 800d942:	4770      	bx	lr

0800d944 <_fini>:
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	bf00      	nop
 800d948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94a:	bc08      	pop	{r3}
 800d94c:	469e      	mov	lr, r3
 800d94e:	4770      	bx	lr
